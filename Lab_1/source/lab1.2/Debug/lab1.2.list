
lab1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a14c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a324  0800a324  0000b324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a364  0800a364  0000c00c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a364  0800a364  0000b364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a36c  0800a36c  0000c00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a36c  0800a36c  0000b36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a370  0800a370  0000b370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800a374  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  2000000c  0800a380  0000c00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  0800a380  0000c5d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e67f  00000000  00000000  0000c03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000350a  00000000  00000000  0002a6bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001840  00000000  00000000  0002dbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012c6  00000000  00000000  0002f408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c5ce  00000000  00000000  000306ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c4d0  00000000  00000000  0005cc9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013640b  00000000  00000000  0007916c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001af577  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069a8  00000000  00000000  001af5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001b5f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a30c 	.word	0x0800a30c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800a30c 	.word	0x0800a30c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000510:	4b08      	ldr	r3, [pc, #32]	@ (8000534 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000512:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000514:	4907      	ldr	r1, [pc, #28]	@ (8000534 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4313      	orrs	r3, r2
 800051a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800051c:	4b05      	ldr	r3, [pc, #20]	@ (8000534 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800051e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4013      	ands	r3, r2
 8000524:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000526:	68fb      	ldr	r3, [r7, #12]
}
 8000528:	bf00      	nop
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	40021000 	.word	0x40021000

08000538 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000540:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000542:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000544:	4907      	ldr	r1, [pc, #28]	@ (8000564 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800054c:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <LL_APB1_GRP2_EnableClock+0x2c>)
 800054e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4013      	ands	r3, r2
 8000554:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000556:	68fb      	ldr	r3, [r7, #12]
}
 8000558:	bf00      	nop
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	40021000 	.word	0x40021000

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f001 f950 	bl	8001812 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f865 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 fcd3 	bl	8000f20 <MX_GPIO_Init>
  MX_ADC1_Init();
 800057a:	f000 f8af 	bl	80006dc <MX_ADC1_Init>
  MX_COMP2_Init();
 800057e:	f000 f925 	bl	80007cc <MX_COMP2_Init>
  MX_COMP3_Init();
 8000582:	f000 f949 	bl	8000818 <MX_COMP3_Init>
  MX_COMP4_Init();
 8000586:	f000 f96d 	bl	8000864 <MX_COMP4_Init>
  MX_COMP6_Init();
 800058a:	f000 f991 	bl	80008b0 <MX_COMP6_Init>
  MX_DAC1_Init();
 800058e:	f000 f9b5 	bl	80008fc <MX_DAC1_Init>
  MX_DAC2_Init();
 8000592:	f000 f9ed 	bl	8000970 <MX_DAC2_Init>
  MX_DAC3_Init();
 8000596:	f000 fa25 	bl	80009e4 <MX_DAC3_Init>
  MX_HRTIM1_Init();
 800059a:	f000 fa67 	bl	8000a6c <MX_HRTIM1_Init>
  MX_UCPD1_Init();
 800059e:	f000 fc1d 	bl	8000ddc <MX_UCPD1_Init>
  MX_USART3_UART_Init();
 80005a2:	f000 fc49 	bl	8000e38 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 80005a6:	f000 fc93 	bl	8000ed0 <MX_USB_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char button=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 80005aa:	2101      	movs	r1, #1
 80005ac:	4823      	ldr	r0, [pc, #140]	@ (800063c <main+0xd4>)
 80005ae:	f003 fdcd 	bl	800414c <HAL_GPIO_ReadPin>
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	  if (button==1) {
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d132      	bne.n	8000622 <main+0xba>
HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80005bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c4:	f003 fdf2 	bl	80041ac <HAL_GPIO_TogglePin>
      HAL_Delay(500);
 80005c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005cc:	f001 f992 	bl	80018f4 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80005d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d8:	f003 fde8 	bl	80041ac <HAL_GPIO_TogglePin>
            HAL_Delay(500);
 80005dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005e0:	f001 f988 	bl	80018f4 <HAL_Delay>
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80005e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ec:	f003 fdde 	bl	80041ac <HAL_GPIO_TogglePin>
                  HAL_Delay(500);
 80005f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005f4:	f001 f97e 	bl	80018f4 <HAL_Delay>
                  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 80005f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000600:	f003 fdd4 	bl	80041ac <HAL_GPIO_TogglePin>
                        HAL_Delay(500);
 8000604:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000608:	f001 f974 	bl	80018f4 <HAL_Delay>
                        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 800060c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000614:	f003 fdca 	bl	80041ac <HAL_GPIO_TogglePin>
                        HAL_Delay(500);
 8000618:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800061c:	f001 f96a 	bl	80018f4 <HAL_Delay>
 8000620:	e7c3      	b.n	80005aa <main+0x42>

	}
	  else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000628:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062c:	f003 fda6 	bl	800417c <HAL_GPIO_WritePin>
	      HAL_Delay(500);
 8000630:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000634:	f001 f95e 	bl	80018f4 <HAL_Delay>
  {
 8000638:	e7b7      	b.n	80005aa <main+0x42>
 800063a:	bf00      	nop
 800063c:	48000800 	.word	0x48000800

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	@ 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	2238      	movs	r2, #56	@ 0x38
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f009 fe2f 	bl	800a2b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000662:	2000      	movs	r0, #0
 8000664:	f006 fb86 	bl	8006d74 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000668:	2322      	movs	r3, #34	@ 0x22
 800066a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000672:	2340      	movs	r3, #64	@ 0x40
 8000674:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000676:	2301      	movs	r3, #1
 8000678:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000682:	2304      	movs	r3, #4
 8000684:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000686:	2355      	movs	r3, #85	@ 0x55
 8000688:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800068a:	2308      	movs	r3, #8
 800068c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 800068e:	2308      	movs	r3, #8
 8000690:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 0318 	add.w	r3, r7, #24
 800069a:	4618      	mov	r0, r3
 800069c:	f006 fc0e 	bl	8006ebc <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006a6:	f000 fd29 	bl	80010fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	2303      	movs	r3, #3
 80006b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2104      	movs	r1, #4
 80006c2:	4618      	mov	r0, r3
 80006c4:	f006 ff0c 	bl	80074e0 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006ce:	f000 fd15 	bl	80010fc <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	@ 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08c      	sub	sp, #48	@ 0x30
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2220      	movs	r2, #32
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f009 fddc 	bl	800a2b2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006fa:	4b32      	ldr	r3, [pc, #200]	@ (80007c4 <MX_ADC1_Init+0xe8>)
 80006fc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000700:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000702:	4b30      	ldr	r3, [pc, #192]	@ (80007c4 <MX_ADC1_Init+0xe8>)
 8000704:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000708:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800070a:	4b2e      	ldr	r3, [pc, #184]	@ (80007c4 <MX_ADC1_Init+0xe8>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000710:	4b2c      	ldr	r3, [pc, #176]	@ (80007c4 <MX_ADC1_Init+0xe8>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000716:	4b2b      	ldr	r3, [pc, #172]	@ (80007c4 <MX_ADC1_Init+0xe8>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800071c:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <MX_ADC1_Init+0xe8>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000722:	4b28      	ldr	r3, [pc, #160]	@ (80007c4 <MX_ADC1_Init+0xe8>)
 8000724:	2204      	movs	r2, #4
 8000726:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000728:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <MX_ADC1_Init+0xe8>)
 800072a:	2200      	movs	r2, #0
 800072c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800072e:	4b25      	ldr	r3, [pc, #148]	@ (80007c4 <MX_ADC1_Init+0xe8>)
 8000730:	2200      	movs	r2, #0
 8000732:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000734:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <MX_ADC1_Init+0xe8>)
 8000736:	2201      	movs	r2, #1
 8000738:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073a:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <MX_ADC1_Init+0xe8>)
 800073c:	2200      	movs	r2, #0
 800073e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_ADC1_Init+0xe8>)
 8000744:	2200      	movs	r2, #0
 8000746:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000748:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <MX_ADC1_Init+0xe8>)
 800074a:	2200      	movs	r2, #0
 800074c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800074e:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <MX_ADC1_Init+0xe8>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000756:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <MX_ADC1_Init+0xe8>)
 8000758:	2200      	movs	r2, #0
 800075a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800075c:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <MX_ADC1_Init+0xe8>)
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000764:	4817      	ldr	r0, [pc, #92]	@ (80007c4 <MX_ADC1_Init+0xe8>)
 8000766:	f001 faff 	bl	8001d68 <HAL_ADC_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000770:	f000 fcc4 	bl	80010fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800077c:	4619      	mov	r1, r3
 800077e:	4811      	ldr	r0, [pc, #68]	@ (80007c4 <MX_ADC1_Init+0xe8>)
 8000780:	f002 fbc4 	bl	8002f0c <HAL_ADCEx_MultiModeConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800078a:	f000 fcb7 	bl	80010fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <MX_ADC1_Init+0xec>)
 8000790:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000792:	2306      	movs	r3, #6
 8000794:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800079a:	237f      	movs	r3, #127	@ 0x7f
 800079c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800079e:	2304      	movs	r3, #4
 80007a0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	@ (80007c4 <MX_ADC1_Init+0xe8>)
 80007ac:	f001 ff16 	bl	80025dc <HAL_ADC_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80007b6:	f000 fca1 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3730      	adds	r7, #48	@ 0x30
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000028 	.word	0x20000028
 80007c8:	21800100 	.word	0x21800100

080007cc <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_COMP2_Init+0x44>)
 80007d2:	4a10      	ldr	r2, [pc, #64]	@ (8000814 <MX_COMP2_Init+0x48>)
 80007d4:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_COMP2_Init+0x44>)
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_COMP2_Init+0x44>)
 80007de:	2240      	movs	r2, #64	@ 0x40
 80007e0:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <MX_COMP2_Init+0x44>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80007e8:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_COMP2_Init+0x44>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <MX_COMP2_Init+0x44>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_COMP2_Init+0x44>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_COMP2_Init+0x44>)
 80007fc:	f002 fdde 	bl	80033bc <HAL_COMP_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_COMP2_Init+0x3e>
  {
    Error_Handler();
 8000806:	f000 fc79 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000094 	.word	0x20000094
 8000814:	40010204 	.word	0x40010204

08000818 <MX_COMP3_Init>:
  * @brief COMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP3_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP3_Init 0 */

  /* USER CODE BEGIN COMP3_Init 1 */

  /* USER CODE END COMP3_Init 1 */
  hcomp3.Instance = COMP3;
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <MX_COMP3_Init+0x44>)
 800081e:	4a10      	ldr	r2, [pc, #64]	@ (8000860 <MX_COMP3_Init+0x48>)
 8000820:	601a      	str	r2, [r3, #0]
  hcomp3.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <MX_COMP3_Init+0x44>)
 8000824:	2200      	movs	r2, #0
 8000826:	605a      	str	r2, [r3, #4]
  hcomp3.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <MX_COMP3_Init+0x44>)
 800082a:	2240      	movs	r2, #64	@ 0x40
 800082c:	609a      	str	r2, [r3, #8]
  hcomp3.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <MX_COMP3_Init+0x44>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hcomp3.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_COMP3_Init+0x44>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  hcomp3.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800083a:	4b08      	ldr	r3, [pc, #32]	@ (800085c <MX_COMP3_Init+0x44>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  hcomp3.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_COMP3_Init+0x44>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp3) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_COMP3_Init+0x44>)
 8000848:	f002 fdb8 	bl	80033bc <HAL_COMP_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_COMP3_Init+0x3e>
  {
    Error_Handler();
 8000852:	f000 fc53 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN COMP3_Init 2 */

  /* USER CODE END COMP3_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000b8 	.word	0x200000b8
 8000860:	40010208 	.word	0x40010208

08000864 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_COMP4_Init+0x44>)
 800086a:	4a10      	ldr	r2, [pc, #64]	@ (80008ac <MX_COMP4_Init+0x48>)
 800086c:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_COMP4_Init+0x44>)
 8000870:	2200      	movs	r2, #0
 8000872:	605a      	str	r2, [r3, #4]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_COMP4_Init+0x44>)
 8000876:	2250      	movs	r2, #80	@ 0x50
 8000878:	609a      	str	r2, [r3, #8]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_COMP4_Init+0x44>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_COMP4_Init+0x44>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <MX_COMP4_Init+0x44>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_COMP4_Init+0x44>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_COMP4_Init+0x44>)
 8000894:	f002 fd92 	bl	80033bc <HAL_COMP_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_COMP4_Init+0x3e>
  {
    Error_Handler();
 800089e:	f000 fc2d 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000dc 	.word	0x200000dc
 80008ac:	4001020c 	.word	0x4001020c

080008b0 <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */

  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_COMP6_Init+0x44>)
 80008b6:	4a10      	ldr	r2, [pc, #64]	@ (80008f8 <MX_COMP6_Init+0x48>)
 80008b8:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_COMP6_Init+0x44>)
 80008bc:	2200      	movs	r2, #0
 80008be:	605a      	str	r2, [r3, #4]
  hcomp6.Init.InputMinus = COMP_INPUT_MINUS_DAC2_CH1;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_COMP6_Init+0x44>)
 80008c2:	2250      	movs	r2, #80	@ 0x50
 80008c4:	609a      	str	r2, [r3, #8]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <MX_COMP6_Init+0x44>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hcomp6.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_COMP6_Init+0x44>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <MX_COMP6_Init+0x44>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_COMP6_Init+0x44>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_COMP6_Init+0x44>)
 80008e0:	f002 fd6c 	bl	80033bc <HAL_COMP_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_COMP6_Init+0x3e>
  {
    Error_Handler();
 80008ea:	f000 fc07 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000100 	.word	0x20000100
 80008f8:	40010214 	.word	0x40010214

080008fc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	@ 0x30
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000902:	463b      	mov	r3, r7
 8000904:	2230      	movs	r2, #48	@ 0x30
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f009 fcd2 	bl	800a2b2 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800090e:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <MX_DAC1_Init+0x6c>)
 8000910:	4a16      	ldr	r2, [pc, #88]	@ (800096c <MX_DAC1_Init+0x70>)
 8000912:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000914:	4814      	ldr	r0, [pc, #80]	@ (8000968 <MX_DAC1_Init+0x6c>)
 8000916:	f002 fffa 	bl	800390e <HAL_DAC_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000920:	f000 fbec 	bl	80010fc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000924:	2302      	movs	r3, #2
 8000926:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000938:	2300      	movs	r3, #0
 800093a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800093c:	2302      	movs	r3, #2
 800093e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000940:	2302      	movs	r3, #2
 8000942:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	4619      	mov	r1, r3
 800094e:	4806      	ldr	r0, [pc, #24]	@ (8000968 <MX_DAC1_Init+0x6c>)
 8000950:	f003 f800 	bl	8003954 <HAL_DAC_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800095a:	f000 fbcf 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	3730      	adds	r7, #48	@ 0x30
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000124 	.word	0x20000124
 800096c:	50000800 	.word	0x50000800

08000970 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	@ 0x30
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000976:	463b      	mov	r3, r7
 8000978:	2230      	movs	r2, #48	@ 0x30
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f009 fc98 	bl	800a2b2 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000982:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <MX_DAC2_Init+0x6c>)
 8000984:	4a16      	ldr	r2, [pc, #88]	@ (80009e0 <MX_DAC2_Init+0x70>)
 8000986:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000988:	4814      	ldr	r0, [pc, #80]	@ (80009dc <MX_DAC2_Init+0x6c>)
 800098a:	f002 ffc0 	bl	800390e <HAL_DAC_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000994:	f000 fbb2 	bl	80010fc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000998:	2302      	movs	r3, #2
 800099a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80009b0:	2302      	movs	r3, #2
 80009b2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009bc:	463b      	mov	r3, r7
 80009be:	2200      	movs	r2, #0
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	@ (80009dc <MX_DAC2_Init+0x6c>)
 80009c4:	f002 ffc6 	bl	8003954 <HAL_DAC_ConfigChannel>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 80009ce:	f000 fb95 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	3730      	adds	r7, #48	@ 0x30
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000138 	.word	0x20000138
 80009e0:	50000c00 	.word	0x50000c00

080009e4 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08c      	sub	sp, #48	@ 0x30
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009ea:	463b      	mov	r3, r7
 80009ec:	2230      	movs	r2, #48	@ 0x30
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f009 fc5e 	bl	800a2b2 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 80009f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a64 <MX_DAC3_Init+0x80>)
 80009f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a68 <MX_DAC3_Init+0x84>)
 80009fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 80009fc:	4819      	ldr	r0, [pc, #100]	@ (8000a64 <MX_DAC3_Init+0x80>)
 80009fe:	f002 ff86 	bl	800390e <HAL_DAC_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000a08:	f000 fb78 	bl	80010fc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000a24:	2302      	movs	r3, #2
 8000a26:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a30:	463b      	mov	r3, r7
 8000a32:	2200      	movs	r2, #0
 8000a34:	4619      	mov	r1, r3
 8000a36:	480b      	ldr	r0, [pc, #44]	@ (8000a64 <MX_DAC3_Init+0x80>)
 8000a38:	f002 ff8c 	bl	8003954 <HAL_DAC_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000a42:	f000 fb5b 	bl	80010fc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000a46:	463b      	mov	r3, r7
 8000a48:	2210      	movs	r2, #16
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_DAC3_Init+0x80>)
 8000a4e:	f002 ff81 	bl	8003954 <HAL_DAC_ConfigChannel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8000a58:	f000 fb50 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	3730      	adds	r7, #48	@ 0x30
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	2000014c 	.word	0x2000014c
 8000a68:	50001000 	.word	0x50001000

08000a6c <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0ac      	sub	sp, #176	@ 0xb0
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000a72:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8000a80:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
 8000a90:	615a      	str	r2, [r3, #20]
 8000a92:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000a94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a98:	2260      	movs	r2, #96	@ 0x60
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f009 fc08 	bl	800a2b2 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	2220      	movs	r2, #32
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f009 fc02 	bl	800a2b2 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8000aae:	4bc3      	ldr	r3, [pc, #780]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000ab0:	4ac3      	ldr	r2, [pc, #780]	@ (8000dc0 <MX_HRTIM1_Init+0x354>)
 8000ab2:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000ab4:	4bc1      	ldr	r3, [pc, #772]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000aba:	4bc0      	ldr	r3, [pc, #768]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8000ac0:	48be      	ldr	r0, [pc, #760]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000ac2:	f003 fbb1 	bl	8004228 <HAL_HRTIM_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_HRTIM1_Init+0x64>
  {
    Error_Handler();
 8000acc:	f000 fb16 	bl	80010fc <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8000ad0:	210c      	movs	r1, #12
 8000ad2:	48ba      	ldr	r0, [pc, #744]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000ad4:	f003 fc78 	bl	80043c8 <HAL_HRTIM_DLLCalibrationStart>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_HRTIM1_Init+0x76>
  {
    Error_Handler();
 8000ade:	f000 fb0d 	bl	80010fc <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8000ae2:	210a      	movs	r1, #10
 8000ae4:	48b5      	ldr	r0, [pc, #724]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000ae6:	f003 fcc7 	bl	8004478 <HAL_HRTIM_PollForDLLCalibration>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 8000af0:	f000 fb04 	bl	80010fc <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFDF;
 8000af4:	f64f 73df 	movw	r3, #65503	@ 0xffdf
 8000af8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000b08:	2308      	movs	r3, #8
 8000b0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000b0e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000b12:	461a      	mov	r2, r3
 8000b14:	2100      	movs	r1, #0
 8000b16:	48a9      	ldr	r0, [pc, #676]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000b18:	f003 fce2 	bl	80044e0 <HAL_HRTIM_TimeBaseConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_HRTIM1_Init+0xba>
  {
    Error_Handler();
 8000b22:	f000 faeb 	bl	80010fc <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8000b26:	2300      	movs	r3, #0
 8000b28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8000b32:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000b36:	461a      	mov	r2, r3
 8000b38:	2100      	movs	r1, #0
 8000b3a:	48a0      	ldr	r0, [pc, #640]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000b3c:	f003 fd85 	bl	800464a <HAL_HRTIM_WaveformTimerControl>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_HRTIM1_Init+0xde>
  {
    Error_Handler();
 8000b46:	f000 fad9 	bl	80010fc <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  pTimerCfg.DMASrcAddress = 0x0000;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 8000b56:	2300      	movs	r3, #0
 8000b58:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASize = 0x1;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8000b62:	2300      	movs	r3, #0
 8000b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000b66:	2300      	movs	r3, #0
 8000b68:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8000b72:	2300      	movs	r3, #0
 8000b74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000b76:	2300      	movs	r3, #0
 8000b78:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8000b82:	2300      	movs	r3, #0
 8000b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8000b92:	2300      	movs	r3, #0
 8000b94:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bac:	461a      	mov	r2, r3
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4882      	ldr	r0, [pc, #520]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000bb2:	f003 fcbd 	bl	8004530 <HAL_HRTIM_WaveformTimerConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_HRTIM1_Init+0x154>
  {
    Error_Handler();
 8000bbc:	f000 fa9e 	bl	80010fc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8000bc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	2102      	movs	r1, #2
 8000bc8:	487c      	ldr	r0, [pc, #496]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000bca:	f003 fcb1 	bl	8004530 <HAL_HRTIM_WaveformTimerConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_HRTIM1_Init+0x16c>
  {
    Error_Handler();
 8000bd4:	f000 fa92 	bl	80010fc <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 8000bdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be0:	461a      	mov	r2, r3
 8000be2:	2103      	movs	r1, #3
 8000be4:	4875      	ldr	r0, [pc, #468]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000be6:	f003 fca3 	bl	8004530 <HAL_HRTIM_WaveformTimerConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_HRTIM1_Init+0x188>
  {
    Error_Handler();
 8000bf0:	f000 fa84 	bl	80010fc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8000bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	486f      	ldr	r0, [pc, #444]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000bfe:	f003 fc97 	bl	8004530 <HAL_HRTIM_WaveformTimerConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_HRTIM1_Init+0x1a0>
  {
    Error_Handler();
 8000c08:	f000 fa78 	bl	80010fc <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_F_DELAYEDPROTECTION_DISABLED;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCfg) != HAL_OK)
 8000c10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c14:	461a      	mov	r2, r3
 8000c16:	2105      	movs	r1, #5
 8000c18:	4868      	ldr	r0, [pc, #416]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000c1a:	f003 fc89 	bl	8004530 <HAL_HRTIM_WaveformTimerConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_HRTIM1_Init+0x1bc>
  {
    Error_Handler();
 8000c24:	f000 fa6a 	bl	80010fc <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	485b      	ldr	r0, [pc, #364]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000c50:	f003 fd2e 	bl	80046b0 <HAL_HRTIM_WaveformOutputConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_HRTIM1_Init+0x1f2>
  {
    Error_Handler();
 8000c5a:	f000 fa4f 	bl	80010fc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2210      	movs	r2, #16
 8000c62:	2102      	movs	r1, #2
 8000c64:	4855      	ldr	r0, [pc, #340]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000c66:	f003 fd23 	bl	80046b0 <HAL_HRTIM_WaveformOutputConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_HRTIM1_Init+0x208>
  {
    Error_Handler();
 8000c70:	f000 fa44 	bl	80010fc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2240      	movs	r2, #64	@ 0x40
 8000c78:	2103      	movs	r1, #3
 8000c7a:	4850      	ldr	r0, [pc, #320]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000c7c:	f003 fd18 	bl	80046b0 <HAL_HRTIM_WaveformOutputConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_HRTIM1_Init+0x21e>
  {
    Error_Handler();
 8000c86:	f000 fa39 	bl	80010fc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c90:	2104      	movs	r1, #4
 8000c92:	484a      	ldr	r0, [pc, #296]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000c94:	f003 fd0c 	bl	80046b0 <HAL_HRTIM_WaveformOutputConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_HRTIM1_Init+0x236>
  {
    Error_Handler();
 8000c9e:	f000 fa2d 	bl	80010fc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF1, &pOutputCfg) != HAL_OK)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ca8:	2105      	movs	r1, #5
 8000caa:	4844      	ldr	r0, [pc, #272]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000cac:	f003 fd00 	bl	80046b0 <HAL_HRTIM_WaveformOutputConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_HRTIM1_Init+0x24e>
  {
    Error_Handler();
 8000cb6:	f000 fa21 	bl	80010fc <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000cba:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	483e      	ldr	r0, [pc, #248]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000cc4:	f003 fc0c 	bl	80044e0 <HAL_HRTIM_TimeBaseConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_HRTIM1_Init+0x266>
  {
    Error_Handler();
 8000cce:	f000 fa15 	bl	80010fc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCtl) != HAL_OK)
 8000cd2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	2102      	movs	r1, #2
 8000cda:	4838      	ldr	r0, [pc, #224]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000cdc:	f003 fcb5 	bl	800464a <HAL_HRTIM_WaveformTimerControl>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_HRTIM1_Init+0x27e>
  {
    Error_Handler();
 8000ce6:	f000 fa09 	bl	80010fc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2220      	movs	r2, #32
 8000cee:	2102      	movs	r1, #2
 8000cf0:	4832      	ldr	r0, [pc, #200]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000cf2:	f003 fcdd 	bl	80046b0 <HAL_HRTIM_WaveformOutputConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_HRTIM1_Init+0x294>
  {
    Error_Handler();
 8000cfc:	f000 f9fe 	bl	80010fc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2280      	movs	r2, #128	@ 0x80
 8000d04:	2103      	movs	r1, #3
 8000d06:	482d      	ldr	r0, [pc, #180]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000d08:	f003 fcd2 	bl	80046b0 <HAL_HRTIM_WaveformOutputConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_HRTIM1_Init+0x2aa>
  {
    Error_Handler();
 8000d12:	f000 f9f3 	bl	80010fc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF2, &pOutputCfg) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d1c:	2105      	movs	r1, #5
 8000d1e:	4827      	ldr	r0, [pc, #156]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000d20:	f003 fcc6 	bl	80046b0 <HAL_HRTIM_WaveformOutputConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_HRTIM1_Init+0x2c2>
  {
    Error_Handler();
 8000d2a:	f000 f9e7 	bl	80010fc <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 8000d2e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000d32:	461a      	mov	r2, r3
 8000d34:	2103      	movs	r1, #3
 8000d36:	4821      	ldr	r0, [pc, #132]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000d38:	f003 fbd2 	bl	80044e0 <HAL_HRTIM_TimeBaseConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_HRTIM1_Init+0x2da>
  {
    Error_Handler();
 8000d42:	f000 f9db 	bl	80010fc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCtl) != HAL_OK)
 8000d46:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	2103      	movs	r1, #3
 8000d4e:	481b      	ldr	r0, [pc, #108]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000d50:	f003 fc7b 	bl	800464a <HAL_HRTIM_WaveformTimerControl>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_HRTIM1_Init+0x2f2>
  {
    Error_Handler();
 8000d5a:	f000 f9cf 	bl	80010fc <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8000d5e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000d62:	461a      	mov	r2, r3
 8000d64:	2104      	movs	r1, #4
 8000d66:	4815      	ldr	r0, [pc, #84]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000d68:	f003 fbba 	bl	80044e0 <HAL_HRTIM_TimeBaseConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_HRTIM1_Init+0x30a>
  {
    Error_Handler();
 8000d72:	f000 f9c3 	bl	80010fc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 8000d76:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	2104      	movs	r1, #4
 8000d7e:	480f      	ldr	r0, [pc, #60]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000d80:	f003 fc63 	bl	800464a <HAL_HRTIM_WaveformTimerControl>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_HRTIM1_Init+0x322>
  {
    Error_Handler();
 8000d8a:	f000 f9b7 	bl	80010fc <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimeBaseCfg) != HAL_OK)
 8000d8e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000d92:	461a      	mov	r2, r3
 8000d94:	2105      	movs	r1, #5
 8000d96:	4809      	ldr	r0, [pc, #36]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000d98:	f003 fba2 	bl	80044e0 <HAL_HRTIM_TimeBaseConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_HRTIM1_Init+0x33a>
  {
    Error_Handler();
 8000da2:	f000 f9ab 	bl	80010fc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCtl) != HAL_OK)
 8000da6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000daa:	461a      	mov	r2, r3
 8000dac:	2105      	movs	r1, #5
 8000dae:	4803      	ldr	r0, [pc, #12]	@ (8000dbc <MX_HRTIM1_Init+0x350>)
 8000db0:	f003 fc4b 	bl	800464a <HAL_HRTIM_WaveformTimerControl>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d006      	beq.n	8000dc8 <MX_HRTIM1_Init+0x35c>
 8000dba:	e003      	b.n	8000dc4 <MX_HRTIM1_Init+0x358>
 8000dbc:	20000160 	.word	0x20000160
 8000dc0:	40016800 	.word	0x40016800
  {
    Error_Handler();
 8000dc4:	f000 f99a 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8000dc8:	4803      	ldr	r0, [pc, #12]	@ (8000dd8 <MX_HRTIM1_Init+0x36c>)
 8000dca:	f000 fb43 	bl	8001454 <HAL_HRTIM_MspPostInit>

}
 8000dce:	bf00      	nop
 8000dd0:	37b0      	adds	r7, #176	@ 0xb0
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000160 	.word	0x20000160

08000ddc <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	463b      	mov	r3, r7
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000df2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000df6:	f7ff fb9f 	bl	8000538 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f7ff fb84 	bl	8000508 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000e00:	2310      	movs	r3, #16
 8000e02:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e04:	2303      	movs	r3, #3
 8000e06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4808      	ldr	r0, [pc, #32]	@ (8000e34 <MX_UCPD1_Init+0x58>)
 8000e12:	f008 fb46 	bl	80094a2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000e16:	2340      	movs	r3, #64	@ 0x40
 8000e18:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e22:	463b      	mov	r3, r7
 8000e24:	4619      	mov	r1, r3
 8000e26:	4803      	ldr	r0, [pc, #12]	@ (8000e34 <MX_UCPD1_Init+0x58>)
 8000e28:	f008 fb3b 	bl	80094a2 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	48000400 	.word	0x48000400

08000e38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e3c:	4b22      	ldr	r3, [pc, #136]	@ (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e3e:	4a23      	ldr	r2, [pc, #140]	@ (8000ecc <MX_USART3_UART_Init+0x94>)
 8000e40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e42:	4b21      	ldr	r3, [pc, #132]	@ (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e50:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e5e:	220c      	movs	r2, #12
 8000e60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e62:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e68:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6e:	4b16      	ldr	r3, [pc, #88]	@ (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV4;
 8000e74:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e76:	2202      	movs	r2, #2
 8000e78:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e80:	4811      	ldr	r0, [pc, #68]	@ (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e82:	f006 ff97 	bl	8007db4 <HAL_UART_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e8c:	f000 f936 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e90:	2100      	movs	r1, #0
 8000e92:	480d      	ldr	r0, [pc, #52]	@ (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000e94:	f008 f8ef 	bl	8009076 <HAL_UARTEx_SetTxFifoThreshold>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e9e:	f000 f92d 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4808      	ldr	r0, [pc, #32]	@ (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000ea6:	f008 f924 	bl	80090f2 <HAL_UARTEx_SetRxFifoThreshold>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000eb0:	f000 f924 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000eb4:	4804      	ldr	r0, [pc, #16]	@ (8000ec8 <MX_USART3_UART_Init+0x90>)
 8000eb6:	f008 f8a5 	bl	8009004 <HAL_UARTEx_DisableFifoMode>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ec0:	f000 f91c 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	2000025c 	.word	0x2000025c
 8000ecc:	40004800 	.word	0x40004800

08000ed0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000ed4:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <MX_USB_PCD_Init+0x48>)
 8000ed6:	4a11      	ldr	r2, [pc, #68]	@ (8000f1c <MX_USB_PCD_Init+0x4c>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000eda:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <MX_USB_PCD_Init+0x48>)
 8000edc:	2208      	movs	r2, #8
 8000ede:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <MX_USB_PCD_Init+0x48>)
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <MX_USB_PCD_Init+0x48>)
 8000ee8:	2202      	movs	r2, #2
 8000eea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <MX_USB_PCD_Init+0x48>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <MX_USB_PCD_Init+0x48>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <MX_USB_PCD_Init+0x48>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <MX_USB_PCD_Init+0x48>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000f04:	4804      	ldr	r0, [pc, #16]	@ (8000f18 <MX_USB_PCD_Init+0x48>)
 8000f06:	f004 fc0f 	bl	8005728 <HAL_PCD_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000f10:	f000 f8f4 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200002f0 	.word	0x200002f0
 8000f1c:	40005c00 	.word	0x40005c00

08000f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	@ 0x28
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	4b6d      	ldr	r3, [pc, #436]	@ (80010ec <MX_GPIO_Init+0x1cc>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3a:	4a6c      	ldr	r2, [pc, #432]	@ (80010ec <MX_GPIO_Init+0x1cc>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f42:	4b6a      	ldr	r3, [pc, #424]	@ (80010ec <MX_GPIO_Init+0x1cc>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b67      	ldr	r3, [pc, #412]	@ (80010ec <MX_GPIO_Init+0x1cc>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	4a66      	ldr	r2, [pc, #408]	@ (80010ec <MX_GPIO_Init+0x1cc>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5a:	4b64      	ldr	r3, [pc, #400]	@ (80010ec <MX_GPIO_Init+0x1cc>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	4b61      	ldr	r3, [pc, #388]	@ (80010ec <MX_GPIO_Init+0x1cc>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	4a60      	ldr	r2, [pc, #384]	@ (80010ec <MX_GPIO_Init+0x1cc>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f72:	4b5e      	ldr	r3, [pc, #376]	@ (80010ec <MX_GPIO_Init+0x1cc>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7e:	4b5b      	ldr	r3, [pc, #364]	@ (80010ec <MX_GPIO_Init+0x1cc>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f82:	4a5a      	ldr	r2, [pc, #360]	@ (80010ec <MX_GPIO_Init+0x1cc>)
 8000f84:	f043 0308 	orr.w	r3, r3, #8
 8000f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8a:	4b58      	ldr	r3, [pc, #352]	@ (80010ec <MX_GPIO_Init+0x1cc>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	f003 0308 	and.w	r3, r3, #8
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUCKBOOST_LOAD_1_Pin|BUCKBOOST_LOAD_2_Pin|BUCKBOOST_USBPD_EN_Pin|USBPD_1A_PROTECT_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f24d 0108 	movw	r1, #53256	@ 0xd008
 8000f9c:	4854      	ldr	r0, [pc, #336]	@ (80010f0 <MX_GPIO_Init+0x1d0>)
 8000f9e:	f003 f8ed 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD5_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	21a2      	movs	r1, #162	@ 0xa2
 8000fa6:	4853      	ldr	r0, [pc, #332]	@ (80010f4 <MX_GPIO_Init+0x1d4>)
 8000fa8:	f003 f8e8 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb6:	f003 f8e1 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USBPD_550mA_PROTECT_GPIO_Port, USBPD_550mA_PROTECT_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	484e      	ldr	r0, [pc, #312]	@ (80010f8 <MX_GPIO_Init+0x1d8>)
 8000fc0:	f003 f8dc 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4845      	ldr	r0, [pc, #276]	@ (80010f0 <MX_GPIO_Init+0x1d0>)
 8000fda:	f002 ff35 	bl	8003e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUCKBOOST_LOAD_1_Pin BUCKBOOST_LOAD_2_Pin BUCKBOOST_USBPD_EN_Pin USBPD_1A_PROTECT_Pin */
  GPIO_InitStruct.Pin = BUCKBOOST_LOAD_1_Pin|BUCKBOOST_LOAD_2_Pin|BUCKBOOST_USBPD_EN_Pin|USBPD_1A_PROTECT_Pin;
 8000fde:	f24d 0308 	movw	r3, #53256	@ 0xd008
 8000fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	483e      	ldr	r0, [pc, #248]	@ (80010f0 <MX_GPIO_Init+0x1d0>)
 8000ff8:	f002 ff26 	bl	8003e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001000:	2300      	movs	r3, #0
 8001002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001004:	2302      	movs	r3, #2
 8001006:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4619      	mov	r1, r3
 800100e:	4838      	ldr	r0, [pc, #224]	@ (80010f0 <MX_GPIO_Init+0x1d0>)
 8001010:	f002 ff1a 	bl	8003e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOYSTICK_LEFT_Pin JOYSTICK_DOWN_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_LEFT_Pin|JOYSTICK_DOWN_Pin;
 8001014:	2330      	movs	r3, #48	@ 0x30
 8001016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001018:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800101c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101e:	2301      	movs	r3, #1
 8001020:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4831      	ldr	r0, [pc, #196]	@ (80010f0 <MX_GPIO_Init+0x1d0>)
 800102a:	f002 ff0d 	bl	8003e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD4_Pin;
 800102e:	23a2      	movs	r3, #162	@ 0xa2
 8001030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	2301      	movs	r3, #1
 8001034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	482b      	ldr	r0, [pc, #172]	@ (80010f4 <MX_GPIO_Init+0x1d4>)
 8001046:	f002 feff 	bl	8003e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOYSTICK_RIGHT_Pin JOYSTICK_UP_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_RIGHT_Pin|JOYSTICK_UP_Pin;
 800104a:	f240 4304 	movw	r3, #1028	@ 0x404
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001050:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001056:	2301      	movs	r3, #1
 8001058:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4824      	ldr	r0, [pc, #144]	@ (80010f4 <MX_GPIO_Init+0x1d4>)
 8001062:	f002 fef1 	bl	8003e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800106a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001082:	f002 fee1 	bl	8003e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USBPD_550mA_PROTECT_Pin */
  GPIO_InitStruct.Pin = USBPD_550mA_PROTECT_Pin;
 8001086:	2304      	movs	r3, #4
 8001088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USBPD_550mA_PROTECT_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4619      	mov	r1, r3
 800109c:	4816      	ldr	r0, [pc, #88]	@ (80010f8 <MX_GPIO_Init+0x1d8>)
 800109e:	f002 fed3 	bl	8003e48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	2008      	movs	r0, #8
 80010a8:	f002 fbfd 	bl	80038a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80010ac:	2008      	movs	r0, #8
 80010ae:	f002 fc14 	bl	80038da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	200a      	movs	r0, #10
 80010b8:	f002 fbf5 	bl	80038a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010bc:	200a      	movs	r0, #10
 80010be:	f002 fc0c 	bl	80038da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	2017      	movs	r0, #23
 80010c8:	f002 fbed 	bl	80038a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010cc:	2017      	movs	r0, #23
 80010ce:	f002 fc04 	bl	80038da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2028      	movs	r0, #40	@ 0x28
 80010d8:	f002 fbe5 	bl	80038a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010dc:	2028      	movs	r0, #40	@ 0x28
 80010de:	f002 fbfc 	bl	80038da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	@ 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000
 80010f0:	48000800 	.word	0x48000800
 80010f4:	48000400 	.word	0x48000400
 80010f8:	48000c00 	.word	0x48000c00

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <Error_Handler+0x8>

08001108 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <HAL_MspInit+0x44>)
 8001110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001112:	4a0e      	ldr	r2, [pc, #56]	@ (800114c <HAL_MspInit+0x44>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6613      	str	r3, [r2, #96]	@ 0x60
 800111a:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <HAL_MspInit+0x44>)
 800111c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	4b09      	ldr	r3, [pc, #36]	@ (800114c <HAL_MspInit+0x44>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112a:	4a08      	ldr	r2, [pc, #32]	@ (800114c <HAL_MspInit+0x44>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001130:	6593      	str	r3, [r2, #88]	@ 0x58
 8001132:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HAL_MspInit+0x44>)
 8001134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000

08001150 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b0a0      	sub	sp, #128	@ 0x80
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001168:	f107 0318 	add.w	r3, r7, #24
 800116c:	2254      	movs	r2, #84	@ 0x54
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f009 f89e 	bl	800a2b2 <memset>
  if(hadc->Instance==ADC1)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800117e:	d154      	bne.n	800122a <HAL_ADC_MspInit+0xda>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001180:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001184:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001186:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800118a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800118c:	f107 0318 	add.w	r3, r7, #24
 8001190:	4618      	mov	r0, r3
 8001192:	f006 fbc1 	bl	8007918 <HAL_RCCEx_PeriphCLKConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800119c:	f7ff ffae 	bl	80010fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011a0:	4b24      	ldr	r3, [pc, #144]	@ (8001234 <HAL_ADC_MspInit+0xe4>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a4:	4a23      	ldr	r2, [pc, #140]	@ (8001234 <HAL_ADC_MspInit+0xe4>)
 80011a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ac:	4b21      	ldr	r3, [pc, #132]	@ (8001234 <HAL_ADC_MspInit+0xe4>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001234 <HAL_ADC_MspInit+0xe4>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001234 <HAL_ADC_MspInit+0xe4>)
 80011be:	f043 0304 	orr.w	r3, r3, #4
 80011c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <HAL_ADC_MspInit+0xe4>)
 80011c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <HAL_ADC_MspInit+0xe4>)
 80011d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d4:	4a17      	ldr	r2, [pc, #92]	@ (8001234 <HAL_ADC_MspInit+0xe4>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011dc:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HAL_ADC_MspInit+0xe4>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = USBPD_VIN_Pin;
 80011e8:	2304      	movs	r3, #4
 80011ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ec:	2303      	movs	r3, #3
 80011ee:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USBPD_VIN_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011f8:	4619      	mov	r1, r3
 80011fa:	480f      	ldr	r0, [pc, #60]	@ (8001238 <HAL_ADC_MspInit+0xe8>)
 80011fc:	f002 fe24 	bl	8003e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCKBOOST_VIN_Pin|BUCKBOOST_I_IN_AVG_Pin|BUCKBOOST_VOUT_Pin;
 8001200:	230e      	movs	r3, #14
 8001202:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001204:	2303      	movs	r3, #3
 8001206:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001216:	f002 fe17 	bl	8003e48 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2012      	movs	r0, #18
 8001220:	f002 fb41 	bl	80038a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001224:	2012      	movs	r0, #18
 8001226:	f002 fb58 	bl	80038da <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800122a:	bf00      	nop
 800122c:	3780      	adds	r7, #128	@ 0x80
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000
 8001238:	48000800 	.word	0x48000800

0800123c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08c      	sub	sp, #48	@ 0x30
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a3d      	ldr	r2, [pc, #244]	@ (8001350 <HAL_COMP_MspInit+0x114>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d119      	bne.n	8001292 <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4b3d      	ldr	r3, [pc, #244]	@ (8001354 <HAL_COMP_MspInit+0x118>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	4a3c      	ldr	r2, [pc, #240]	@ (8001354 <HAL_COMP_MspInit+0x118>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126a:	4b3a      	ldr	r3, [pc, #232]	@ (8001354 <HAL_COMP_MspInit+0x118>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
 8001274:	69bb      	ldr	r3, [r7, #24]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = BUCK_RED_SENSE_Pin;
 8001276:	2380      	movs	r3, #128	@ 0x80
 8001278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127a:	2303      	movs	r3, #3
 800127c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_RED_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128c:	f002 fddc 	bl	8003e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP6_MspInit 1 */

  /* USER CODE END COMP6_MspInit 1 */
  }

}
 8001290:	e05a      	b.n	8001348 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP3)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a30      	ldr	r2, [pc, #192]	@ (8001358 <HAL_COMP_MspInit+0x11c>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d119      	bne.n	80012d0 <HAL_COMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129c:	4b2d      	ldr	r3, [pc, #180]	@ (8001354 <HAL_COMP_MspInit+0x118>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a0:	4a2c      	ldr	r2, [pc, #176]	@ (8001354 <HAL_COMP_MspInit+0x118>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001354 <HAL_COMP_MspInit+0x118>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUCK_GREEN_SENSE_Pin;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_GREEN_SENSE_GPIO_Port, &GPIO_InitStruct);
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	4619      	mov	r1, r3
 80012c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ca:	f002 fdbd 	bl	8003e48 <HAL_GPIO_Init>
}
 80012ce:	e03b      	b.n	8001348 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP4)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a21      	ldr	r2, [pc, #132]	@ (800135c <HAL_COMP_MspInit+0x120>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d118      	bne.n	800130c <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	4b1e      	ldr	r3, [pc, #120]	@ (8001354 <HAL_COMP_MspInit+0x118>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	4a1d      	ldr	r2, [pc, #116]	@ (8001354 <HAL_COMP_MspInit+0x118>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001354 <HAL_COMP_MspInit+0x118>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUCK_BLUE_SENSE_Pin;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f6:	2303      	movs	r3, #3
 80012f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_BLUE_SENSE_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	4816      	ldr	r0, [pc, #88]	@ (8001360 <HAL_COMP_MspInit+0x124>)
 8001306:	f002 fd9f 	bl	8003e48 <HAL_GPIO_Init>
}
 800130a:	e01d      	b.n	8001348 <HAL_COMP_MspInit+0x10c>
  else if(hcomp->Instance==COMP6)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a14      	ldr	r2, [pc, #80]	@ (8001364 <HAL_COMP_MspInit+0x128>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d118      	bne.n	8001348 <HAL_COMP_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <HAL_COMP_MspInit+0x118>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131a:	4a0e      	ldr	r2, [pc, #56]	@ (8001354 <HAL_COMP_MspInit+0x118>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001322:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <HAL_COMP_MspInit+0x118>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUCKBOOST_I_IN_SENSE_Pin;
 800132e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001334:	2303      	movs	r3, #3
 8001336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCKBOOST_I_IN_SENSE_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	4807      	ldr	r0, [pc, #28]	@ (8001360 <HAL_COMP_MspInit+0x124>)
 8001344:	f002 fd80 	bl	8003e48 <HAL_GPIO_Init>
}
 8001348:	bf00      	nop
 800134a:	3730      	adds	r7, #48	@ 0x30
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40010204 	.word	0x40010204
 8001354:	40021000 	.word	0x40021000
 8001358:	40010208 	.word	0x40010208
 800135c:	4001020c 	.word	0x4001020c
 8001360:	48000400 	.word	0x48000400
 8001364:	40010214 	.word	0x40010214

08001368 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a1c      	ldr	r2, [pc, #112]	@ (80013e8 <HAL_DAC_MspInit+0x80>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d10c      	bne.n	8001394 <HAL_DAC_MspInit+0x2c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800137a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <HAL_DAC_MspInit+0x84>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	4a1b      	ldr	r2, [pc, #108]	@ (80013ec <HAL_DAC_MspInit+0x84>)
 8001380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001386:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <HAL_DAC_MspInit+0x84>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 8001392:	e022      	b.n	80013da <HAL_DAC_MspInit+0x72>
  else if(hdac->Instance==DAC2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a15      	ldr	r2, [pc, #84]	@ (80013f0 <HAL_DAC_MspInit+0x88>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d10c      	bne.n	80013b8 <HAL_DAC_MspInit+0x50>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800139e:	4b13      	ldr	r3, [pc, #76]	@ (80013ec <HAL_DAC_MspInit+0x84>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	4a12      	ldr	r2, [pc, #72]	@ (80013ec <HAL_DAC_MspInit+0x84>)
 80013a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013aa:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <HAL_DAC_MspInit+0x84>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
}
 80013b6:	e010      	b.n	80013da <HAL_DAC_MspInit+0x72>
  else if(hdac->Instance==DAC3)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0d      	ldr	r2, [pc, #52]	@ (80013f4 <HAL_DAC_MspInit+0x8c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d10b      	bne.n	80013da <HAL_DAC_MspInit+0x72>
    __HAL_RCC_DAC3_CLK_ENABLE();
 80013c2:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <HAL_DAC_MspInit+0x84>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	4a09      	ldr	r2, [pc, #36]	@ (80013ec <HAL_DAC_MspInit+0x84>)
 80013c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ce:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <HAL_DAC_MspInit+0x84>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
}
 80013da:	bf00      	nop
 80013dc:	371c      	adds	r7, #28
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	50000800 	.word	0x50000800
 80013ec:	40021000 	.word	0x40021000
 80013f0:	50000c00 	.word	0x50000c00
 80013f4:	50001000 	.word	0x50001000

080013f8 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a11      	ldr	r2, [pc, #68]	@ (800144c <HAL_HRTIM_MspInit+0x54>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d11b      	bne.n	8001442 <HAL_HRTIM_MspInit+0x4a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800140a:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <HAL_HRTIM_MspInit+0x58>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800140e:	4a10      	ldr	r2, [pc, #64]	@ (8001450 <HAL_HRTIM_MspInit+0x58>)
 8001410:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001414:	6613      	str	r3, [r2, #96]	@ 0x60
 8001416:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <HAL_HRTIM_MspInit+0x58>)
 8001418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2043      	movs	r0, #67	@ 0x43
 8001428:	f002 fa3d 	bl	80038a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_Master_IRQn);
 800142c:	2043      	movs	r0, #67	@ 0x43
 800142e:	f002 fa54 	bl	80038da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIMF_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	204a      	movs	r0, #74	@ 0x4a
 8001438:	f002 fa35 	bl	80038a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMF_IRQn);
 800143c:	204a      	movs	r0, #74	@ 0x4a
 800143e:	f002 fa4c 	bl	80038da <HAL_NVIC_EnableIRQ>

  /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40016800 	.word	0x40016800
 8001450:	40021000 	.word	0x40021000

08001454 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	@ 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a37      	ldr	r2, [pc, #220]	@ (8001550 <HAL_HRTIM_MspPostInit+0xfc>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d167      	bne.n	8001546 <HAL_HRTIM_MspPostInit+0xf2>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	4b37      	ldr	r3, [pc, #220]	@ (8001554 <HAL_HRTIM_MspPostInit+0x100>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	4a36      	ldr	r2, [pc, #216]	@ (8001554 <HAL_HRTIM_MspPostInit+0x100>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001482:	4b34      	ldr	r3, [pc, #208]	@ (8001554 <HAL_HRTIM_MspPostInit+0x100>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	4b31      	ldr	r3, [pc, #196]	@ (8001554 <HAL_HRTIM_MspPostInit+0x100>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	4a30      	ldr	r2, [pc, #192]	@ (8001554 <HAL_HRTIM_MspPostInit+0x100>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800149a:	4b2e      	ldr	r3, [pc, #184]	@ (8001554 <HAL_HRTIM_MspPostInit+0x100>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001554 <HAL_HRTIM_MspPostInit+0x100>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001554 <HAL_HRTIM_MspPostInit+0x100>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b2:	4b28      	ldr	r3, [pc, #160]	@ (8001554 <HAL_HRTIM_MspPostInit+0x100>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> HRTIM1_CHF1
    PC7     ------> HRTIM1_CHF2
    PC8     ------> HRTIM1_CHE1
    PA8     ------> HRTIM1_CHA1
    */
    GPIO_InitStruct.Pin = BUCKBOOST_P1_DRIVE_Pin|BUCKBOOST_N1_DRIVE_Pin|BUCKBOOST_N2_DRIVE_Pin|BUCKBOOST_P2_DRIVE_Pin;
 80014be:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80014c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014cc:	2303      	movs	r3, #3
 80014ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80014d0:	230d      	movs	r3, #13
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	481f      	ldr	r0, [pc, #124]	@ (8001558 <HAL_HRTIM_MspPostInit+0x104>)
 80014dc:	f002 fcb4 	bl	8003e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_RED_DRIVE_Pin|RC_TP4_Pin;
 80014e0:	23c0      	movs	r3, #192	@ 0xc0
 80014e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80014f0:	230d      	movs	r3, #13
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	4818      	ldr	r0, [pc, #96]	@ (800155c <HAL_HRTIM_MspPostInit+0x108>)
 80014fc:	f002 fca4 	bl	8003e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_GREEN_DRIVE_Pin;
 8001500:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 8001512:	2303      	movs	r3, #3
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_GREEN_DRIVE_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	480f      	ldr	r0, [pc, #60]	@ (800155c <HAL_HRTIM_MspPostInit+0x108>)
 800151e:	f002 fc93 	bl	8003e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_BLUE_DRIVE_Pin;
 8001522:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001534:	230d      	movs	r3, #13
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_BLUE_DRIVE_GPIO_Port, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001542:	f002 fc81 	bl	8003e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	@ 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40016800 	.word	0x40016800
 8001554:	40021000 	.word	0x40021000
 8001558:	48000400 	.word	0x48000400
 800155c:	48000800 	.word	0x48000800

08001560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b09e      	sub	sp, #120	@ 0x78
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	2254      	movs	r2, #84	@ 0x54
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f008 fe96 	bl	800a2b2 <memset>
  if(huart->Instance==USART3)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a23      	ldr	r2, [pc, #140]	@ (8001618 <HAL_UART_MspInit+0xb8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d13e      	bne.n	800160e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001590:	2304      	movs	r3, #4
 8001592:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	4618      	mov	r0, r3
 800159e:	f006 f9bb 	bl	8007918 <HAL_RCCEx_PeriphCLKConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015a8:	f7ff fda8 	bl	80010fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015ac:	4b1b      	ldr	r3, [pc, #108]	@ (800161c <HAL_UART_MspInit+0xbc>)
 80015ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b0:	4a1a      	ldr	r2, [pc, #104]	@ (800161c <HAL_UART_MspInit+0xbc>)
 80015b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80015b8:	4b18      	ldr	r3, [pc, #96]	@ (800161c <HAL_UART_MspInit+0xbc>)
 80015ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c4:	4b15      	ldr	r3, [pc, #84]	@ (800161c <HAL_UART_MspInit+0xbc>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c8:	4a14      	ldr	r2, [pc, #80]	@ (800161c <HAL_UART_MspInit+0xbc>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <HAL_UART_MspInit+0xbc>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 80015dc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015e0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015ea:	2301      	movs	r3, #1
 80015ec:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015ee:	2307      	movs	r3, #7
 80015f0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015f6:	4619      	mov	r1, r3
 80015f8:	4809      	ldr	r0, [pc, #36]	@ (8001620 <HAL_UART_MspInit+0xc0>)
 80015fa:	f002 fc25 	bl	8003e48 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2100      	movs	r1, #0
 8001602:	2027      	movs	r0, #39	@ 0x27
 8001604:	f002 f94f 	bl	80038a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001608:	2027      	movs	r0, #39	@ 0x27
 800160a:	f002 f966 	bl	80038da <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800160e:	bf00      	nop
 8001610:	3778      	adds	r7, #120	@ 0x78
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40004800 	.word	0x40004800
 800161c:	40021000 	.word	0x40021000
 8001620:	48000800 	.word	0x48000800

08001624 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b098      	sub	sp, #96	@ 0x60
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	2254      	movs	r2, #84	@ 0x54
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f008 fe3c 	bl	800a2b2 <memset>
  if(hpcd->Instance==USB)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a15      	ldr	r2, [pc, #84]	@ (8001694 <HAL_PCD_MspInit+0x70>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d122      	bne.n	800168a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001644:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001648:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800164a:	2300      	movs	r3, #0
 800164c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	4618      	mov	r0, r3
 8001654:	f006 f960 	bl	8007918 <HAL_RCCEx_PeriphCLKConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800165e:	f7ff fd4d 	bl	80010fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001662:	4b0d      	ldr	r3, [pc, #52]	@ (8001698 <HAL_PCD_MspInit+0x74>)
 8001664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001666:	4a0c      	ldr	r2, [pc, #48]	@ (8001698 <HAL_PCD_MspInit+0x74>)
 8001668:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800166c:	6593      	str	r3, [r2, #88]	@ 0x58
 800166e:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <HAL_PCD_MspInit+0x74>)
 8001670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001672:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	2013      	movs	r0, #19
 8001680:	f002 f911 	bl	80038a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8001684:	2013      	movs	r0, #19
 8001686:	f002 f928 	bl	80038da <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_MspInit 1 */

  }

}
 800168a:	bf00      	nop
 800168c:	3760      	adds	r7, #96	@ 0x60
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40005c00 	.word	0x40005c00
 8001698:	40021000 	.word	0x40021000

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <NMI_Handler+0x4>

080016a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <HardFault_Handler+0x4>

080016ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <MemManage_Handler+0x4>

080016b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f2:	f000 f8e1 	bl	80018b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}

080016fa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_RIGHT_Pin);
 80016fe:	2004      	movs	r0, #4
 8001700:	f002 fd6e 	bl	80041e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}

08001708 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_LEFT_Pin);
 800170c:	2010      	movs	r0, #16
 800170e:	f002 fd67 	bl	80041e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800171c:	4802      	ldr	r0, [pc, #8]	@ (8001728 <ADC1_2_IRQHandler+0x10>)
 800171e:	f000 fcdf 	bl	80020e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000028 	.word	0x20000028

0800172c <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001730:	4802      	ldr	r0, [pc, #8]	@ (800173c <USB_HP_IRQHandler+0x10>)
 8001732:	f004 f8c7 	bl	80058c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200002f0 	.word	0x200002f0

08001740 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_DOWN_Pin);
 8001744:	2020      	movs	r0, #32
 8001746:	f002 fd4b 	bl	80041e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001754:	4802      	ldr	r0, [pc, #8]	@ (8001760 <USART3_IRQHandler+0x10>)
 8001756:	f006 fb7d 	bl	8007e54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000025c 	.word	0x2000025c

08001764 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOYSTICK_UP_Pin);
 8001768:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800176c:	f002 fd38 	bl	80041e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}

08001774 <HRTIM1_Master_IRQHandler>:

/**
  * @brief This function handles HRTIM master timer global interrupt.
  */
void HRTIM1_Master_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_Master_IRQn 0 */

  /* USER CODE END HRTIM1_Master_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_MASTER);
 8001778:	2106      	movs	r1, #6
 800177a:	4802      	ldr	r0, [pc, #8]	@ (8001784 <HRTIM1_Master_IRQHandler+0x10>)
 800177c:	f002 ffc9 	bl	8004712 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_Master_IRQn 1 */

  /* USER CODE END HRTIM1_Master_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000160 	.word	0x20000160

08001788 <HRTIM1_TIMF_IRQHandler>:

/**
  * @brief This function handles HRTIM timer F global interrupt.
  */
void HRTIM1_TIMF_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMF_IRQn 0 */

  /* USER CODE END HRTIM1_TIMF_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_TIMER_F);
 800178c:	2105      	movs	r1, #5
 800178e:	4802      	ldr	r0, [pc, #8]	@ (8001798 <HRTIM1_TIMF_IRQHandler+0x10>)
 8001790:	f002 ffbf 	bl	8004712 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMF_IRQn 1 */

  /* USER CODE END HRTIM1_TIMF_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000160 	.word	0x20000160

0800179c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017a0:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <SystemInit+0x20>)
 80017a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017a6:	4a05      	ldr	r2, [pc, #20]	@ (80017bc <SystemInit+0x20>)
 80017a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017c0:	480d      	ldr	r0, [pc, #52]	@ (80017f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017c4:	f7ff ffea 	bl	800179c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c8:	480c      	ldr	r0, [pc, #48]	@ (80017fc <LoopForever+0x6>)
  ldr r1, =_edata
 80017ca:	490d      	ldr	r1, [pc, #52]	@ (8001800 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001804 <LoopForever+0xe>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017d0:	e002      	b.n	80017d8 <LoopCopyDataInit>

080017d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d6:	3304      	adds	r3, #4

080017d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017dc:	d3f9      	bcc.n	80017d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017de:	4a0a      	ldr	r2, [pc, #40]	@ (8001808 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017e0:	4c0a      	ldr	r4, [pc, #40]	@ (800180c <LoopForever+0x16>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e4:	e001      	b.n	80017ea <LoopFillZerobss>

080017e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e8:	3204      	adds	r2, #4

080017ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ec:	d3fb      	bcc.n	80017e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ee:	f008 fd69 	bl	800a2c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017f2:	f7fe feb9 	bl	8000568 <main>

080017f6 <LoopForever>:

LoopForever:
    b LoopForever
 80017f6:	e7fe      	b.n	80017f6 <LoopForever>
  ldr   r0, =_estack
 80017f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001800:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001804:	0800a374 	.word	0x0800a374
  ldr r2, =_sbss
 8001808:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800180c:	200005d0 	.word	0x200005d0

08001810 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC3_IRQHandler>

08001812 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181c:	2003      	movs	r0, #3
 800181e:	f002 f837 	bl	8003890 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001822:	2000      	movs	r0, #0
 8001824:	f000 f80e 	bl	8001844 <HAL_InitTick>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	71fb      	strb	r3, [r7, #7]
 8001832:	e001      	b.n	8001838 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001834:	f7ff fc68 	bl	8001108 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001838:	79fb      	ldrb	r3, [r7, #7]

}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001850:	4b16      	ldr	r3, [pc, #88]	@ (80018ac <HAL_InitTick+0x68>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d022      	beq.n	800189e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001858:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <HAL_InitTick+0x6c>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <HAL_InitTick+0x68>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001864:	fbb1 f3f3 	udiv	r3, r1, r3
 8001868:	fbb2 f3f3 	udiv	r3, r2, r3
 800186c:	4618      	mov	r0, r3
 800186e:	f002 f842 	bl	80038f6 <HAL_SYSTICK_Config>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10f      	bne.n	8001898 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b0f      	cmp	r3, #15
 800187c:	d809      	bhi.n	8001892 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800187e:	2200      	movs	r2, #0
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	f04f 30ff 	mov.w	r0, #4294967295
 8001886:	f002 f80e 	bl	80038a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800188a:	4a0a      	ldr	r2, [pc, #40]	@ (80018b4 <HAL_InitTick+0x70>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	e007      	b.n	80018a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
 8001896:	e004      	b.n	80018a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
 800189c:	e001      	b.n	80018a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000008 	.word	0x20000008
 80018b0:	20000000 	.word	0x20000000
 80018b4:	20000004 	.word	0x20000004

080018b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <HAL_IncTick+0x1c>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <HAL_IncTick+0x20>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a03      	ldr	r2, [pc, #12]	@ (80018d4 <HAL_IncTick+0x1c>)
 80018c8:	6013      	str	r3, [r2, #0]
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	200005cc 	.word	0x200005cc
 80018d8:	20000008 	.word	0x20000008

080018dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return uwTick;
 80018e0:	4b03      	ldr	r3, [pc, #12]	@ (80018f0 <HAL_GetTick+0x14>)
 80018e2:	681b      	ldr	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	200005cc 	.word	0x200005cc

080018f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff ffee 	bl	80018dc <HAL_GetTick>
 8001900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d004      	beq.n	8001918 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800190e:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <HAL_Delay+0x40>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	4413      	add	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001918:	bf00      	nop
 800191a:	f7ff ffdf 	bl	80018dc <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	429a      	cmp	r2, r3
 8001928:	d8f7      	bhi.n	800191a <HAL_Delay+0x26>
  {
  }
}
 800192a:	bf00      	nop
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000008 	.word	0x20000008

08001938 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	431a      	orrs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	609a      	str	r2, [r3, #8]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	609a      	str	r2, [r3, #8]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	3360      	adds	r3, #96	@ 0x60
 80019b2:	461a      	mov	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <LL_ADC_SetOffset+0x44>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	4313      	orrs	r3, r2
 80019d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019d8:	bf00      	nop
 80019da:	371c      	adds	r7, #28
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	03fff000 	.word	0x03fff000

080019e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3360      	adds	r3, #96	@ 0x60
 80019f6:	461a      	mov	r2, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3360      	adds	r3, #96	@ 0x60
 8001a24:	461a      	mov	r2, r3
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a3e:	bf00      	nop
 8001a40:	371c      	adds	r7, #28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b087      	sub	sp, #28
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3360      	adds	r3, #96	@ 0x60
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a74:	bf00      	nop
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3360      	adds	r3, #96	@ 0x60
 8001a90:	461a      	mov	r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001aaa:	bf00      	nop
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	615a      	str	r2, [r3, #20]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b087      	sub	sp, #28
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3330      	adds	r3, #48	@ 0x30
 8001b12:	461a      	mov	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	0a1b      	lsrs	r3, r3, #8
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	f003 030c 	and.w	r3, r3, #12
 8001b1e:	4413      	add	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	211f      	movs	r1, #31
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	401a      	ands	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	0e9b      	lsrs	r3, r3, #26
 8001b3a:	f003 011f 	and.w	r1, r3, #31
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	f003 031f 	and.w	r3, r3, #31
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b4e:	bf00      	nop
 8001b50:	371c      	adds	r7, #28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b66:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3314      	adds	r3, #20
 8001b90:	461a      	mov	r2, r3
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	0e5b      	lsrs	r3, r3, #25
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	4413      	add	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	0d1b      	lsrs	r3, r3, #20
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	2107      	movs	r1, #7
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	401a      	ands	r2, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	0d1b      	lsrs	r3, r3, #20
 8001bba:	f003 031f 	and.w	r3, r3, #31
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001bca:	bf00      	nop
 8001bcc:	371c      	adds	r7, #28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0318 	and.w	r3, r3, #24
 8001bfa:	4908      	ldr	r1, [pc, #32]	@ (8001c1c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bfc:	40d9      	lsrs	r1, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	400b      	ands	r3, r1
 8001c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c06:	431a      	orrs	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c0e:	bf00      	nop
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	0007ffff 	.word	0x0007ffff

08001c20 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 031f 	and.w	r3, r3, #31
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6093      	str	r3, [r2, #8]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c90:	d101      	bne.n	8001c96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001cb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cb8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ce0:	d101      	bne.n	8001ce6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <LL_ADC_IsEnabled+0x18>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <LL_ADC_IsEnabled+0x1a>
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d101      	bne.n	8001d32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d101      	bne.n	8001d58 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	b089      	sub	sp, #36	@ 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e1a9      	b.n	80020d6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d109      	bne.n	8001da4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff f9dd 	bl	8001150 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff67 	bl	8001c7c <LL_ADC_IsDeepPowerDownEnabled>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d004      	beq.n	8001dbe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff4d 	bl	8001c58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ff82 	bl	8001ccc <LL_ADC_IsInternalRegulatorEnabled>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d115      	bne.n	8001dfa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ff66 	bl	8001ca4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dd8:	4b9c      	ldr	r3, [pc, #624]	@ (800204c <HAL_ADC_Init+0x2e4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	099b      	lsrs	r3, r3, #6
 8001dde:	4a9c      	ldr	r2, [pc, #624]	@ (8002050 <HAL_ADC_Init+0x2e8>)
 8001de0:	fba2 2303 	umull	r2, r3, r2, r3
 8001de4:	099b      	lsrs	r3, r3, #6
 8001de6:	3301      	adds	r3, #1
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001dec:	e002      	b.n	8001df4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f9      	bne.n	8001dee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ff64 	bl	8001ccc <LL_ADC_IsInternalRegulatorEnabled>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10d      	bne.n	8001e26 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e0e:	f043 0210 	orr.w	r2, r3, #16
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e1a:	f043 0201 	orr.w	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff ff75 	bl	8001d1a <LL_ADC_REG_IsConversionOngoing>
 8001e30:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f040 8142 	bne.w	80020c4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 813e 	bne.w	80020c4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e4c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e50:	f043 0202 	orr.w	r2, r3, #2
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff49 	bl	8001cf4 <LL_ADC_IsEnabled>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d141      	bne.n	8001eec <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e70:	d004      	beq.n	8001e7c <HAL_ADC_Init+0x114>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a77      	ldr	r2, [pc, #476]	@ (8002054 <HAL_ADC_Init+0x2ec>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d10f      	bne.n	8001e9c <HAL_ADC_Init+0x134>
 8001e7c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001e80:	f7ff ff38 	bl	8001cf4 <LL_ADC_IsEnabled>
 8001e84:	4604      	mov	r4, r0
 8001e86:	4873      	ldr	r0, [pc, #460]	@ (8002054 <HAL_ADC_Init+0x2ec>)
 8001e88:	f7ff ff34 	bl	8001cf4 <LL_ADC_IsEnabled>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4323      	orrs	r3, r4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	e012      	b.n	8001ec2 <HAL_ADC_Init+0x15a>
 8001e9c:	486e      	ldr	r0, [pc, #440]	@ (8002058 <HAL_ADC_Init+0x2f0>)
 8001e9e:	f7ff ff29 	bl	8001cf4 <LL_ADC_IsEnabled>
 8001ea2:	4604      	mov	r4, r0
 8001ea4:	486d      	ldr	r0, [pc, #436]	@ (800205c <HAL_ADC_Init+0x2f4>)
 8001ea6:	f7ff ff25 	bl	8001cf4 <LL_ADC_IsEnabled>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	431c      	orrs	r4, r3
 8001eae:	486c      	ldr	r0, [pc, #432]	@ (8002060 <HAL_ADC_Init+0x2f8>)
 8001eb0:	f7ff ff20 	bl	8001cf4 <LL_ADC_IsEnabled>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	4323      	orrs	r3, r4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d012      	beq.n	8001eec <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ece:	d004      	beq.n	8001eda <HAL_ADC_Init+0x172>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a5f      	ldr	r2, [pc, #380]	@ (8002054 <HAL_ADC_Init+0x2ec>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d101      	bne.n	8001ede <HAL_ADC_Init+0x176>
 8001eda:	4a62      	ldr	r2, [pc, #392]	@ (8002064 <HAL_ADC_Init+0x2fc>)
 8001edc:	e000      	b.n	8001ee0 <HAL_ADC_Init+0x178>
 8001ede:	4a62      	ldr	r2, [pc, #392]	@ (8002068 <HAL_ADC_Init+0x300>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	f7ff fd26 	bl	8001938 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7f5b      	ldrb	r3, [r3, #29]
 8001ef0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ef6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001efc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f02:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f0a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d106      	bne.n	8001f28 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	045b      	lsls	r3, r3, #17
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d009      	beq.n	8001f44 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f34:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	4b48      	ldr	r3, [pc, #288]	@ (800206c <HAL_ADC_Init+0x304>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	69b9      	ldr	r1, [r7, #24]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fee4 	bl	8001d40 <LL_ADC_INJ_IsConversionOngoing>
 8001f78:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d17f      	bne.n	8002080 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d17c      	bne.n	8002080 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f8a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f92:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fa2:	f023 0302 	bic.w	r3, r3, #2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	69b9      	ldr	r1, [r7, #24]
 8001fac:	430b      	orrs	r3, r1
 8001fae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d017      	beq.n	8001fe8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001fc6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001fd0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001fd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6911      	ldr	r1, [r2, #16]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001fe6:	e013      	b.n	8002010 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691a      	ldr	r2, [r3, #16]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001ff6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002008:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800200c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002016:	2b01      	cmp	r3, #1
 8002018:	d12a      	bne.n	8002070 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002024:	f023 0304 	bic.w	r3, r3, #4
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002030:	4311      	orrs	r1, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002036:	4311      	orrs	r1, r2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800203c:	430a      	orrs	r2, r1
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 0201 	orr.w	r2, r2, #1
 8002048:	611a      	str	r2, [r3, #16]
 800204a:	e019      	b.n	8002080 <HAL_ADC_Init+0x318>
 800204c:	20000000 	.word	0x20000000
 8002050:	053e2d63 	.word	0x053e2d63
 8002054:	50000100 	.word	0x50000100
 8002058:	50000400 	.word	0x50000400
 800205c:	50000500 	.word	0x50000500
 8002060:	50000600 	.word	0x50000600
 8002064:	50000300 	.word	0x50000300
 8002068:	50000700 	.word	0x50000700
 800206c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691a      	ldr	r2, [r3, #16]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0201 	bic.w	r2, r2, #1
 800207e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d10c      	bne.n	80020a2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	f023 010f 	bic.w	r1, r3, #15
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	1e5a      	subs	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	631a      	str	r2, [r3, #48]	@ 0x30
 80020a0:	e007      	b.n	80020b2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 020f 	bic.w	r2, r2, #15
 80020b0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b6:	f023 0303 	bic.w	r3, r3, #3
 80020ba:	f043 0201 	orr.w	r2, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020c2:	e007      	b.n	80020d4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c8:	f043 0210 	orr.w	r2, r3, #16
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	@ 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd90      	pop	{r4, r7, pc}
 80020de:	bf00      	nop

080020e0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	@ 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80020e8:	2300      	movs	r3, #0
 80020ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002104:	d004      	beq.n	8002110 <HAL_ADC_IRQHandler+0x30>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a8e      	ldr	r2, [pc, #568]	@ (8002344 <HAL_ADC_IRQHandler+0x264>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d101      	bne.n	8002114 <HAL_ADC_IRQHandler+0x34>
 8002110:	4b8d      	ldr	r3, [pc, #564]	@ (8002348 <HAL_ADC_IRQHandler+0x268>)
 8002112:	e000      	b.n	8002116 <HAL_ADC_IRQHandler+0x36>
 8002114:	4b8d      	ldr	r3, [pc, #564]	@ (800234c <HAL_ADC_IRQHandler+0x26c>)
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fd82 	bl	8001c20 <LL_ADC_GetMultimode>
 800211c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d017      	beq.n	8002158 <HAL_ADC_IRQHandler+0x78>
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d012      	beq.n	8002158 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	2b00      	cmp	r3, #0
 800213c:	d105      	bne.n	800214a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002142:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fed4 	bl	8002ef8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2202      	movs	r2, #2
 8002156:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	2b00      	cmp	r3, #0
 8002160:	d004      	beq.n	800216c <HAL_ADC_IRQHandler+0x8c>
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10b      	bne.n	8002184 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 8094 	beq.w	80022a0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 808e 	beq.w	80022a0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b00      	cmp	r3, #0
 800218e:	d105      	bne.n	800219c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002194:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fc9b 	bl	8001adc <LL_ADC_REG_IsTriggerSourceSWStart>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d072      	beq.n	8002292 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a64      	ldr	r2, [pc, #400]	@ (8002344 <HAL_ADC_IRQHandler+0x264>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d009      	beq.n	80021ca <HAL_ADC_IRQHandler+0xea>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a65      	ldr	r2, [pc, #404]	@ (8002350 <HAL_ADC_IRQHandler+0x270>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d002      	beq.n	80021c6 <HAL_ADC_IRQHandler+0xe6>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	e003      	b.n	80021ce <HAL_ADC_IRQHandler+0xee>
 80021c6:	4b63      	ldr	r3, [pc, #396]	@ (8002354 <HAL_ADC_IRQHandler+0x274>)
 80021c8:	e001      	b.n	80021ce <HAL_ADC_IRQHandler+0xee>
 80021ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d008      	beq.n	80021e8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b05      	cmp	r3, #5
 80021e0:	d002      	beq.n	80021e8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b09      	cmp	r3, #9
 80021e6:	d104      	bne.n	80021f2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	623b      	str	r3, [r7, #32]
 80021f0:	e014      	b.n	800221c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a53      	ldr	r2, [pc, #332]	@ (8002344 <HAL_ADC_IRQHandler+0x264>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d009      	beq.n	8002210 <HAL_ADC_IRQHandler+0x130>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a53      	ldr	r2, [pc, #332]	@ (8002350 <HAL_ADC_IRQHandler+0x270>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d002      	beq.n	800220c <HAL_ADC_IRQHandler+0x12c>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	e003      	b.n	8002214 <HAL_ADC_IRQHandler+0x134>
 800220c:	4b51      	ldr	r3, [pc, #324]	@ (8002354 <HAL_ADC_IRQHandler+0x274>)
 800220e:	e001      	b.n	8002214 <HAL_ADC_IRQHandler+0x134>
 8002210:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002214:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d135      	bne.n	8002292 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b08      	cmp	r3, #8
 8002232:	d12e      	bne.n	8002292 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fd6e 	bl	8001d1a <LL_ADC_REG_IsConversionOngoing>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d11a      	bne.n	800227a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 020c 	bic.w	r2, r2, #12
 8002252:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002258:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002264:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d112      	bne.n	8002292 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002270:	f043 0201 	orr.w	r2, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002278:	e00b      	b.n	8002292 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227e:	f043 0210 	orr.w	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800228a:	f043 0201 	orr.w	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f984 	bl	80025a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	220c      	movs	r2, #12
 800229e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d004      	beq.n	80022b4 <HAL_ADC_IRQHandler+0x1d4>
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10b      	bne.n	80022cc <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 80b3 	beq.w	8002426 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 80ad 	beq.w	8002426 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d105      	bne.n	80022e4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022dc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fc36 	bl	8001b5a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80022ee:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fbf1 	bl	8001adc <LL_ADC_REG_IsTriggerSourceSWStart>
 80022fa:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a10      	ldr	r2, [pc, #64]	@ (8002344 <HAL_ADC_IRQHandler+0x264>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d009      	beq.n	800231a <HAL_ADC_IRQHandler+0x23a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a11      	ldr	r2, [pc, #68]	@ (8002350 <HAL_ADC_IRQHandler+0x270>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d002      	beq.n	8002316 <HAL_ADC_IRQHandler+0x236>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	e003      	b.n	800231e <HAL_ADC_IRQHandler+0x23e>
 8002316:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <HAL_ADC_IRQHandler+0x274>)
 8002318:	e001      	b.n	800231e <HAL_ADC_IRQHandler+0x23e>
 800231a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	4293      	cmp	r3, r2
 8002324:	d008      	beq.n	8002338 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	2b06      	cmp	r3, #6
 8002330:	d002      	beq.n	8002338 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b07      	cmp	r3, #7
 8002336:	d10f      	bne.n	8002358 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	623b      	str	r3, [r7, #32]
 8002340:	e01f      	b.n	8002382 <HAL_ADC_IRQHandler+0x2a2>
 8002342:	bf00      	nop
 8002344:	50000100 	.word	0x50000100
 8002348:	50000300 	.word	0x50000300
 800234c:	50000700 	.word	0x50000700
 8002350:	50000500 	.word	0x50000500
 8002354:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a8b      	ldr	r2, [pc, #556]	@ (800258c <HAL_ADC_IRQHandler+0x4ac>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d009      	beq.n	8002376 <HAL_ADC_IRQHandler+0x296>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a8a      	ldr	r2, [pc, #552]	@ (8002590 <HAL_ADC_IRQHandler+0x4b0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d002      	beq.n	8002372 <HAL_ADC_IRQHandler+0x292>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	e003      	b.n	800237a <HAL_ADC_IRQHandler+0x29a>
 8002372:	4b88      	ldr	r3, [pc, #544]	@ (8002594 <HAL_ADC_IRQHandler+0x4b4>)
 8002374:	e001      	b.n	800237a <HAL_ADC_IRQHandler+0x29a>
 8002376:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800237a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d047      	beq.n	8002418 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d007      	beq.n	80023a2 <HAL_ADC_IRQHandler+0x2c2>
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d03f      	beq.n	8002418 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d13a      	bne.n	8002418 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ac:	2b40      	cmp	r3, #64	@ 0x40
 80023ae:	d133      	bne.n	8002418 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d12e      	bne.n	8002418 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fcbe 	bl	8001d40 <LL_ADC_INJ_IsConversionOngoing>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d11a      	bne.n	8002400 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80023d8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d112      	bne.n	8002418 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f6:	f043 0201 	orr.w	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023fe:	e00b      	b.n	8002418 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002404:	f043 0210 	orr.w	r2, r3, #16
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002410:	f043 0201 	orr.w	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 fd45 	bl	8002ea8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2260      	movs	r2, #96	@ 0x60
 8002424:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800242c:	2b00      	cmp	r3, #0
 800242e:	d011      	beq.n	8002454 <HAL_ADC_IRQHandler+0x374>
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00c      	beq.n	8002454 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800243e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f8b4 	bl	80025b4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2280      	movs	r2, #128	@ 0x80
 8002452:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245a:	2b00      	cmp	r3, #0
 800245c:	d012      	beq.n	8002484 <HAL_ADC_IRQHandler+0x3a4>
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00d      	beq.n	8002484 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fd2b 	bl	8002ed0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002482:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800248a:	2b00      	cmp	r3, #0
 800248c:	d012      	beq.n	80024b4 <HAL_ADC_IRQHandler+0x3d4>
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00d      	beq.n	80024b4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 fd1d 	bl	8002ee4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d043      	beq.n	8002546 <HAL_ADC_IRQHandler+0x466>
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d03e      	beq.n	8002546 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d102      	bne.n	80024d6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80024d0:	2301      	movs	r3, #1
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024d4:	e021      	b.n	800251a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d015      	beq.n	8002508 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024e4:	d004      	beq.n	80024f0 <HAL_ADC_IRQHandler+0x410>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a28      	ldr	r2, [pc, #160]	@ (800258c <HAL_ADC_IRQHandler+0x4ac>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d101      	bne.n	80024f4 <HAL_ADC_IRQHandler+0x414>
 80024f0:	4b29      	ldr	r3, [pc, #164]	@ (8002598 <HAL_ADC_IRQHandler+0x4b8>)
 80024f2:	e000      	b.n	80024f6 <HAL_ADC_IRQHandler+0x416>
 80024f4:	4b29      	ldr	r3, [pc, #164]	@ (800259c <HAL_ADC_IRQHandler+0x4bc>)
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fba0 	bl	8001c3c <LL_ADC_GetMultiDMATransfer>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002502:	2301      	movs	r3, #1
 8002504:	627b      	str	r3, [r7, #36]	@ 0x24
 8002506:	e008      	b.n	800251a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002516:	2301      	movs	r3, #1
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	2b01      	cmp	r3, #1
 800251e:	d10e      	bne.n	800253e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002524:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002530:	f043 0202 	orr.w	r2, r3, #2
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f845 	bl	80025c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2210      	movs	r2, #16
 8002544:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800254c:	2b00      	cmp	r3, #0
 800254e:	d018      	beq.n	8002582 <HAL_ADC_IRQHandler+0x4a2>
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002556:	2b00      	cmp	r3, #0
 8002558:	d013      	beq.n	8002582 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800255e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256a:	f043 0208 	orr.w	r2, r3, #8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800257a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 fc9d 	bl	8002ebc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002582:	bf00      	nop
 8002584:	3728      	adds	r7, #40	@ 0x28
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	50000100 	.word	0x50000100
 8002590:	50000500 	.word	0x50000500
 8002594:	50000400 	.word	0x50000400
 8002598:	50000300 	.word	0x50000300
 800259c:	50000700 	.word	0x50000700

080025a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b0b6      	sub	sp, #216	@ 0xd8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d102      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x24>
 80025fa:	2302      	movs	r3, #2
 80025fc:	f000 bc13 	b.w	8002e26 <HAL_ADC_ConfigChannel+0x84a>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fb84 	bl	8001d1a <LL_ADC_REG_IsConversionOngoing>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	f040 83f3 	bne.w	8002e00 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6859      	ldr	r1, [r3, #4]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	f7ff fa6b 	bl	8001b02 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fb72 	bl	8001d1a <LL_ADC_REG_IsConversionOngoing>
 8002636:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fb7e 	bl	8001d40 <LL_ADC_INJ_IsConversionOngoing>
 8002644:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002648:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800264c:	2b00      	cmp	r3, #0
 800264e:	f040 81d9 	bne.w	8002a04 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002652:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002656:	2b00      	cmp	r3, #0
 8002658:	f040 81d4 	bne.w	8002a04 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002664:	d10f      	bne.n	8002686 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2200      	movs	r2, #0
 8002670:	4619      	mov	r1, r3
 8002672:	f7ff fa85 	bl	8001b80 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fa19 	bl	8001ab6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002684:	e00e      	b.n	80026a4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6819      	ldr	r1, [r3, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	461a      	mov	r2, r3
 8002694:	f7ff fa74 	bl	8001b80 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2100      	movs	r1, #0
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff fa09 	bl	8001ab6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	08db      	lsrs	r3, r3, #3
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d022      	beq.n	800270c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6919      	ldr	r1, [r3, #16]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80026d6:	f7ff f963 	bl	80019a0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6919      	ldr	r1, [r3, #16]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f7ff f9af 	bl	8001a4a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d102      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x126>
 80026fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002700:	e000      	b.n	8002704 <HAL_ADC_ConfigChannel+0x128>
 8002702:	2300      	movs	r3, #0
 8002704:	461a      	mov	r2, r3
 8002706:	f7ff f9bb 	bl	8001a80 <LL_ADC_SetOffsetSaturation>
 800270a:	e17b      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff f968 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 8002718:	4603      	mov	r3, r0
 800271a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10a      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x15c>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff f95d 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 800272e:	4603      	mov	r3, r0
 8002730:	0e9b      	lsrs	r3, r3, #26
 8002732:	f003 021f 	and.w	r2, r3, #31
 8002736:	e01e      	b.n	8002776 <HAL_ADC_ConfigChannel+0x19a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff f952 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 8002744:	4603      	mov	r3, r0
 8002746:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800275a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800275e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002766:	2320      	movs	r3, #32
 8002768:	e004      	b.n	8002774 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800276a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277e:	2b00      	cmp	r3, #0
 8002780:	d105      	bne.n	800278e <HAL_ADC_ConfigChannel+0x1b2>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	0e9b      	lsrs	r3, r3, #26
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	e018      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x1e4>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80027a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80027aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80027b2:	2320      	movs	r3, #32
 80027b4:	e004      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80027b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d106      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2200      	movs	r2, #0
 80027ca:	2100      	movs	r1, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff f921 	bl	8001a14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2101      	movs	r1, #1
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff f905 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 80027de:	4603      	mov	r3, r0
 80027e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10a      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x222>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2101      	movs	r1, #1
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff f8fa 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 80027f4:	4603      	mov	r3, r0
 80027f6:	0e9b      	lsrs	r3, r3, #26
 80027f8:	f003 021f 	and.w	r2, r3, #31
 80027fc:	e01e      	b.n	800283c <HAL_ADC_ConfigChannel+0x260>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2101      	movs	r1, #1
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff f8ef 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 800280a:	4603      	mov	r3, r0
 800280c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800281c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002820:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002824:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800282c:	2320      	movs	r3, #32
 800282e:	e004      	b.n	800283a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002830:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x278>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0e9b      	lsrs	r3, r3, #26
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	e018      	b.n	8002886 <HAL_ADC_ConfigChannel+0x2aa>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002868:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800286c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002870:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002878:	2320      	movs	r3, #32
 800287a:	e004      	b.n	8002886 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800287c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002880:	fab3 f383 	clz	r3, r3
 8002884:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002886:	429a      	cmp	r2, r3
 8002888:	d106      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2200      	movs	r2, #0
 8002890:	2101      	movs	r1, #1
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff f8be 	bl	8001a14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2102      	movs	r1, #2
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff f8a2 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10a      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x2e8>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2102      	movs	r1, #2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff f897 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 80028ba:	4603      	mov	r3, r0
 80028bc:	0e9b      	lsrs	r3, r3, #26
 80028be:	f003 021f 	and.w	r2, r3, #31
 80028c2:	e01e      	b.n	8002902 <HAL_ADC_ConfigChannel+0x326>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2102      	movs	r1, #2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff f88c 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80028e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80028ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80028f2:	2320      	movs	r3, #32
 80028f4:	e004      	b.n	8002900 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80028f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290a:	2b00      	cmp	r3, #0
 800290c:	d105      	bne.n	800291a <HAL_ADC_ConfigChannel+0x33e>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	0e9b      	lsrs	r3, r3, #26
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	e016      	b.n	8002948 <HAL_ADC_ConfigChannel+0x36c>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800292c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800292e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002932:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800293a:	2320      	movs	r3, #32
 800293c:	e004      	b.n	8002948 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800293e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002942:	fab3 f383 	clz	r3, r3
 8002946:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002948:	429a      	cmp	r2, r3
 800294a:	d106      	bne.n	800295a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2200      	movs	r2, #0
 8002952:	2102      	movs	r1, #2
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff f85d 	bl	8001a14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2103      	movs	r1, #3
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff f841 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 8002966:	4603      	mov	r3, r0
 8002968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10a      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x3aa>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2103      	movs	r1, #3
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff f836 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 800297c:	4603      	mov	r3, r0
 800297e:	0e9b      	lsrs	r3, r3, #26
 8002980:	f003 021f 	and.w	r2, r3, #31
 8002984:	e017      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x3da>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2103      	movs	r1, #3
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff f82b 	bl	80019e8 <LL_ADC_GetOffsetChannel>
 8002992:	4603      	mov	r3, r0
 8002994:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800299e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029a0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80029a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80029a8:	2320      	movs	r3, #32
 80029aa:	e003      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80029ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029ae:	fab3 f383 	clz	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d105      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x3f2>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	0e9b      	lsrs	r3, r3, #26
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	e011      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x416>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80029dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80029e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80029e6:	2320      	movs	r3, #32
 80029e8:	e003      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80029ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029ec:	fab3 f383 	clz	r3, r3
 80029f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d106      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2200      	movs	r2, #0
 80029fc:	2103      	movs	r1, #3
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff f808 	bl	8001a14 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff f973 	bl	8001cf4 <LL_ADC_IsEnabled>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f040 813d 	bne.w	8002c90 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6819      	ldr	r1, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	461a      	mov	r2, r3
 8002a24:	f7ff f8d8 	bl	8001bd8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4aa2      	ldr	r2, [pc, #648]	@ (8002cb8 <HAL_ADC_ConfigChannel+0x6dc>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	f040 812e 	bne.w	8002c90 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10b      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x480>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	0e9b      	lsrs	r3, r3, #26
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	2b09      	cmp	r3, #9
 8002a52:	bf94      	ite	ls
 8002a54:	2301      	movls	r3, #1
 8002a56:	2300      	movhi	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	e019      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x4b4>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002a6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a6c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002a6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002a74:	2320      	movs	r3, #32
 8002a76:	e003      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002a78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	3301      	adds	r3, #1
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	2b09      	cmp	r3, #9
 8002a88:	bf94      	ite	ls
 8002a8a:	2301      	movls	r3, #1
 8002a8c:	2300      	movhi	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d079      	beq.n	8002b88 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d107      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x4d4>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	0e9b      	lsrs	r3, r3, #26
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	069b      	lsls	r3, r3, #26
 8002aaa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002aae:	e015      	b.n	8002adc <HAL_ADC_ConfigChannel+0x500>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ac0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002ac8:	2320      	movs	r3, #32
 8002aca:	e003      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	069b      	lsls	r3, r3, #26
 8002ad8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d109      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x520>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0e9b      	lsrs	r3, r3, #26
 8002aee:	3301      	adds	r3, #1
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	2101      	movs	r1, #1
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	e017      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x550>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002b0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002b14:	2320      	movs	r3, #32
 8002b16:	e003      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002b18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	3301      	adds	r3, #1
 8002b22:	f003 031f 	and.w	r3, r3, #31
 8002b26:	2101      	movs	r1, #1
 8002b28:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2c:	ea42 0103 	orr.w	r1, r2, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x576>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	0e9b      	lsrs	r3, r3, #26
 8002b42:	3301      	adds	r3, #1
 8002b44:	f003 021f 	and.w	r2, r3, #31
 8002b48:	4613      	mov	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	051b      	lsls	r3, r3, #20
 8002b50:	e018      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x5a8>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002b6a:	2320      	movs	r3, #32
 8002b6c:	e003      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	3301      	adds	r3, #1
 8002b78:	f003 021f 	and.w	r2, r3, #31
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4413      	add	r3, r2
 8002b82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b84:	430b      	orrs	r3, r1
 8002b86:	e07e      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d107      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x5c8>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	0e9b      	lsrs	r3, r3, #26
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	069b      	lsls	r3, r3, #26
 8002b9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ba2:	e015      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x5f4>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bac:	fa93 f3a3 	rbit	r3, r3
 8002bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002bbc:	2320      	movs	r3, #32
 8002bbe:	e003      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	3301      	adds	r3, #1
 8002bca:	069b      	lsls	r3, r3, #26
 8002bcc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d109      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x614>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	0e9b      	lsrs	r3, r3, #26
 8002be2:	3301      	adds	r3, #1
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	2101      	movs	r1, #1
 8002bea:	fa01 f303 	lsl.w	r3, r1, r3
 8002bee:	e017      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x644>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	61fb      	str	r3, [r7, #28]
  return result;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	e003      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	3301      	adds	r3, #1
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c20:	ea42 0103 	orr.w	r1, r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10d      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x670>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	0e9b      	lsrs	r3, r3, #26
 8002c36:	3301      	adds	r3, #1
 8002c38:	f003 021f 	and.w	r2, r3, #31
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4413      	add	r3, r2
 8002c42:	3b1e      	subs	r3, #30
 8002c44:	051b      	lsls	r3, r3, #20
 8002c46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c4a:	e01b      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x6a8>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	613b      	str	r3, [r7, #16]
  return result;
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002c64:	2320      	movs	r3, #32
 8002c66:	e003      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	3301      	adds	r3, #1
 8002c72:	f003 021f 	and.w	r2, r3, #31
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3b1e      	subs	r3, #30
 8002c7e:	051b      	lsls	r3, r3, #20
 8002c80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c84:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	f7fe ff78 	bl	8001b80 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4b09      	ldr	r3, [pc, #36]	@ (8002cbc <HAL_ADC_ConfigChannel+0x6e0>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80be 	beq.w	8002e1a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ca6:	d004      	beq.n	8002cb2 <HAL_ADC_ConfigChannel+0x6d6>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a04      	ldr	r2, [pc, #16]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x6e4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d10a      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x6ec>
 8002cb2:	4b04      	ldr	r3, [pc, #16]	@ (8002cc4 <HAL_ADC_ConfigChannel+0x6e8>)
 8002cb4:	e009      	b.n	8002cca <HAL_ADC_ConfigChannel+0x6ee>
 8002cb6:	bf00      	nop
 8002cb8:	407f0000 	.word	0x407f0000
 8002cbc:	80080000 	.word	0x80080000
 8002cc0:	50000100 	.word	0x50000100
 8002cc4:	50000300 	.word	0x50000300
 8002cc8:	4b59      	ldr	r3, [pc, #356]	@ (8002e30 <HAL_ADC_ConfigChannel+0x854>)
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe fe5a 	bl	8001984 <LL_ADC_GetCommonPathInternalCh>
 8002cd0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a56      	ldr	r2, [pc, #344]	@ (8002e34 <HAL_ADC_ConfigChannel+0x858>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d004      	beq.n	8002ce8 <HAL_ADC_ConfigChannel+0x70c>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a55      	ldr	r2, [pc, #340]	@ (8002e38 <HAL_ADC_ConfigChannel+0x85c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d13a      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ce8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d134      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cfc:	d005      	beq.n	8002d0a <HAL_ADC_ConfigChannel+0x72e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a4e      	ldr	r2, [pc, #312]	@ (8002e3c <HAL_ADC_ConfigChannel+0x860>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	f040 8085 	bne.w	8002e14 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d12:	d004      	beq.n	8002d1e <HAL_ADC_ConfigChannel+0x742>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a49      	ldr	r2, [pc, #292]	@ (8002e40 <HAL_ADC_ConfigChannel+0x864>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d101      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x746>
 8002d1e:	4a49      	ldr	r2, [pc, #292]	@ (8002e44 <HAL_ADC_ConfigChannel+0x868>)
 8002d20:	e000      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x748>
 8002d22:	4a43      	ldr	r2, [pc, #268]	@ (8002e30 <HAL_ADC_ConfigChannel+0x854>)
 8002d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4610      	mov	r0, r2
 8002d30:	f7fe fe15 	bl	800195e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d34:	4b44      	ldr	r3, [pc, #272]	@ (8002e48 <HAL_ADC_ConfigChannel+0x86c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	099b      	lsrs	r3, r3, #6
 8002d3a:	4a44      	ldr	r2, [pc, #272]	@ (8002e4c <HAL_ADC_ConfigChannel+0x870>)
 8002d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d40:	099b      	lsrs	r3, r3, #6
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	4613      	mov	r3, r2
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d4e:	e002      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1f9      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d5c:	e05a      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a3b      	ldr	r2, [pc, #236]	@ (8002e50 <HAL_ADC_ConfigChannel+0x874>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d125      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d11f      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a31      	ldr	r2, [pc, #196]	@ (8002e40 <HAL_ADC_ConfigChannel+0x864>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d104      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x7ac>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a34      	ldr	r2, [pc, #208]	@ (8002e54 <HAL_ADC_ConfigChannel+0x878>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d047      	beq.n	8002e18 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d90:	d004      	beq.n	8002d9c <HAL_ADC_ConfigChannel+0x7c0>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a2a      	ldr	r2, [pc, #168]	@ (8002e40 <HAL_ADC_ConfigChannel+0x864>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x7c4>
 8002d9c:	4a29      	ldr	r2, [pc, #164]	@ (8002e44 <HAL_ADC_ConfigChannel+0x868>)
 8002d9e:	e000      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x7c6>
 8002da0:	4a23      	ldr	r2, [pc, #140]	@ (8002e30 <HAL_ADC_ConfigChannel+0x854>)
 8002da2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002da6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002daa:	4619      	mov	r1, r3
 8002dac:	4610      	mov	r0, r2
 8002dae:	f7fe fdd6 	bl	800195e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002db2:	e031      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a27      	ldr	r2, [pc, #156]	@ (8002e58 <HAL_ADC_ConfigChannel+0x87c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d12d      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d127      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a1c      	ldr	r2, [pc, #112]	@ (8002e40 <HAL_ADC_ConfigChannel+0x864>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d022      	beq.n	8002e1a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ddc:	d004      	beq.n	8002de8 <HAL_ADC_ConfigChannel+0x80c>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a17      	ldr	r2, [pc, #92]	@ (8002e40 <HAL_ADC_ConfigChannel+0x864>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x810>
 8002de8:	4a16      	ldr	r2, [pc, #88]	@ (8002e44 <HAL_ADC_ConfigChannel+0x868>)
 8002dea:	e000      	b.n	8002dee <HAL_ADC_ConfigChannel+0x812>
 8002dec:	4a10      	ldr	r2, [pc, #64]	@ (8002e30 <HAL_ADC_ConfigChannel+0x854>)
 8002dee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002df2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002df6:	4619      	mov	r1, r3
 8002df8:	4610      	mov	r0, r2
 8002dfa:	f7fe fdb0 	bl	800195e <LL_ADC_SetCommonPathInternalCh>
 8002dfe:	e00c      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e04:	f043 0220 	orr.w	r2, r3, #32
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002e12:	e002      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e14:	bf00      	nop
 8002e16:	e000      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e22:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	37d8      	adds	r7, #216	@ 0xd8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	50000700 	.word	0x50000700
 8002e34:	c3210000 	.word	0xc3210000
 8002e38:	90c00010 	.word	0x90c00010
 8002e3c:	50000600 	.word	0x50000600
 8002e40:	50000100 	.word	0x50000100
 8002e44:	50000300 	.word	0x50000300
 8002e48:	20000000 	.word	0x20000000
 8002e4c:	053e2d63 	.word	0x053e2d63
 8002e50:	c7520000 	.word	0xc7520000
 8002e54:	50000500 	.word	0x50000500
 8002e58:	cb840000 	.word	0xcb840000

08002e5c <LL_ADC_IsEnabled>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <LL_ADC_IsEnabled+0x18>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <LL_ADC_IsEnabled+0x1a>
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d101      	bne.n	8002e9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002f0c:	b590      	push	{r4, r7, lr}
 8002f0e:	b0a1      	sub	sp, #132	@ 0x84
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e0e7      	b.n	80030fa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002f32:	2300      	movs	r3, #0
 8002f34:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002f36:	2300      	movs	r3, #0
 8002f38:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f42:	d102      	bne.n	8002f4a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f44:	4b6f      	ldr	r3, [pc, #444]	@ (8003104 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	e009      	b.n	8002f5e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a6e      	ldr	r2, [pc, #440]	@ (8003108 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d102      	bne.n	8002f5a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002f54:	4b6d      	ldr	r3, [pc, #436]	@ (800310c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	e001      	b.n	8002f5e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10b      	bne.n	8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f68:	f043 0220 	orr.w	r2, r3, #32
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0be      	b.n	80030fa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff ff7f 	bl	8002e82 <LL_ADC_REG_IsConversionOngoing>
 8002f84:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff ff79 	bl	8002e82 <LL_ADC_REG_IsConversionOngoing>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f040 80a0 	bne.w	80030d8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f040 809c 	bne.w	80030d8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fa8:	d004      	beq.n	8002fb4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a55      	ldr	r2, [pc, #340]	@ (8003104 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002fb4:	4b56      	ldr	r3, [pc, #344]	@ (8003110 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002fb6:	e000      	b.n	8002fba <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002fb8:	4b56      	ldr	r3, [pc, #344]	@ (8003114 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002fba:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d04b      	beq.n	800305c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002fc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	6859      	ldr	r1, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002fd6:	035b      	lsls	r3, r3, #13
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fde:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fe8:	d004      	beq.n	8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a45      	ldr	r2, [pc, #276]	@ (8003104 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d10f      	bne.n	8003014 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002ff4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ff8:	f7ff ff30 	bl	8002e5c <LL_ADC_IsEnabled>
 8002ffc:	4604      	mov	r4, r0
 8002ffe:	4841      	ldr	r0, [pc, #260]	@ (8003104 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003000:	f7ff ff2c 	bl	8002e5c <LL_ADC_IsEnabled>
 8003004:	4603      	mov	r3, r0
 8003006:	4323      	orrs	r3, r4
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf0c      	ite	eq
 800300c:	2301      	moveq	r3, #1
 800300e:	2300      	movne	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	e012      	b.n	800303a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003014:	483c      	ldr	r0, [pc, #240]	@ (8003108 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003016:	f7ff ff21 	bl	8002e5c <LL_ADC_IsEnabled>
 800301a:	4604      	mov	r4, r0
 800301c:	483b      	ldr	r0, [pc, #236]	@ (800310c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800301e:	f7ff ff1d 	bl	8002e5c <LL_ADC_IsEnabled>
 8003022:	4603      	mov	r3, r0
 8003024:	431c      	orrs	r4, r3
 8003026:	483c      	ldr	r0, [pc, #240]	@ (8003118 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003028:	f7ff ff18 	bl	8002e5c <LL_ADC_IsEnabled>
 800302c:	4603      	mov	r3, r0
 800302e:	4323      	orrs	r3, r4
 8003030:	2b00      	cmp	r3, #0
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d056      	beq.n	80030ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800303e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003046:	f023 030f 	bic.w	r3, r3, #15
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	6811      	ldr	r1, [r2, #0]
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	6892      	ldr	r2, [r2, #8]
 8003052:	430a      	orrs	r2, r1
 8003054:	431a      	orrs	r2, r3
 8003056:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003058:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800305a:	e047      	b.n	80030ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800305c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003064:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003066:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003070:	d004      	beq.n	800307c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a23      	ldr	r2, [pc, #140]	@ (8003104 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d10f      	bne.n	800309c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800307c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003080:	f7ff feec 	bl	8002e5c <LL_ADC_IsEnabled>
 8003084:	4604      	mov	r4, r0
 8003086:	481f      	ldr	r0, [pc, #124]	@ (8003104 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003088:	f7ff fee8 	bl	8002e5c <LL_ADC_IsEnabled>
 800308c:	4603      	mov	r3, r0
 800308e:	4323      	orrs	r3, r4
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	e012      	b.n	80030c2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800309c:	481a      	ldr	r0, [pc, #104]	@ (8003108 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800309e:	f7ff fedd 	bl	8002e5c <LL_ADC_IsEnabled>
 80030a2:	4604      	mov	r4, r0
 80030a4:	4819      	ldr	r0, [pc, #100]	@ (800310c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80030a6:	f7ff fed9 	bl	8002e5c <LL_ADC_IsEnabled>
 80030aa:	4603      	mov	r3, r0
 80030ac:	431c      	orrs	r4, r3
 80030ae:	481a      	ldr	r0, [pc, #104]	@ (8003118 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80030b0:	f7ff fed4 	bl	8002e5c <LL_ADC_IsEnabled>
 80030b4:	4603      	mov	r3, r0
 80030b6:	4323      	orrs	r3, r4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d012      	beq.n	80030ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80030ce:	f023 030f 	bic.w	r3, r3, #15
 80030d2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80030d4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030d6:	e009      	b.n	80030ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030dc:	f043 0220 	orr.w	r2, r3, #32
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80030ea:	e000      	b.n	80030ee <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80030f6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3784      	adds	r7, #132	@ 0x84
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd90      	pop	{r4, r7, pc}
 8003102:	bf00      	nop
 8003104:	50000100 	.word	0x50000100
 8003108:	50000400 	.word	0x50000400
 800310c:	50000500 	.word	0x50000500
 8003110:	50000300 	.word	0x50000300
 8003114:	50000700 	.word	0x50000700
 8003118:	50000600 	.word	0x50000600

0800311c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003124:	4b05      	ldr	r3, [pc, #20]	@ (800313c <LL_EXTI_EnableIT_0_31+0x20>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4904      	ldr	r1, [pc, #16]	@ (800313c <LL_EXTI_EnableIT_0_31+0x20>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4313      	orrs	r3, r2
 800312e:	600b      	str	r3, [r1, #0]
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	40010400 	.word	0x40010400

08003140 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003148:	4b05      	ldr	r3, [pc, #20]	@ (8003160 <LL_EXTI_EnableIT_32_63+0x20>)
 800314a:	6a1a      	ldr	r2, [r3, #32]
 800314c:	4904      	ldr	r1, [pc, #16]	@ (8003160 <LL_EXTI_EnableIT_32_63+0x20>)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4313      	orrs	r3, r2
 8003152:	620b      	str	r3, [r1, #32]
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	40010400 	.word	0x40010400

08003164 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800316c:	4b06      	ldr	r3, [pc, #24]	@ (8003188 <LL_EXTI_DisableIT_0_31+0x24>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	43db      	mvns	r3, r3
 8003174:	4904      	ldr	r1, [pc, #16]	@ (8003188 <LL_EXTI_DisableIT_0_31+0x24>)
 8003176:	4013      	ands	r3, r2
 8003178:	600b      	str	r3, [r1, #0]
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40010400 	.word	0x40010400

0800318c <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003194:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <LL_EXTI_DisableIT_32_63+0x24>)
 8003196:	6a1a      	ldr	r2, [r3, #32]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	43db      	mvns	r3, r3
 800319c:	4904      	ldr	r1, [pc, #16]	@ (80031b0 <LL_EXTI_DisableIT_32_63+0x24>)
 800319e:	4013      	ands	r3, r2
 80031a0:	620b      	str	r3, [r1, #32]
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40010400 	.word	0x40010400

080031b4 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80031bc:	4b05      	ldr	r3, [pc, #20]	@ (80031d4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	4904      	ldr	r1, [pc, #16]	@ (80031d4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	604b      	str	r3, [r1, #4]

}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	40010400 	.word	0x40010400

080031d8 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80031e0:	4b05      	ldr	r3, [pc, #20]	@ (80031f8 <LL_EXTI_EnableEvent_32_63+0x20>)
 80031e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031e4:	4904      	ldr	r1, [pc, #16]	@ (80031f8 <LL_EXTI_EnableEvent_32_63+0x20>)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	40010400 	.word	0x40010400

080031fc <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003204:	4b06      	ldr	r3, [pc, #24]	@ (8003220 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	43db      	mvns	r3, r3
 800320c:	4904      	ldr	r1, [pc, #16]	@ (8003220 <LL_EXTI_DisableEvent_0_31+0x24>)
 800320e:	4013      	ands	r3, r2
 8003210:	604b      	str	r3, [r1, #4]
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40010400 	.word	0x40010400

08003224 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800322c:	4b06      	ldr	r3, [pc, #24]	@ (8003248 <LL_EXTI_DisableEvent_32_63+0x24>)
 800322e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	43db      	mvns	r3, r3
 8003234:	4904      	ldr	r1, [pc, #16]	@ (8003248 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003236:	4013      	ands	r3, r2
 8003238:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40010400 	.word	0x40010400

0800324c <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003254:	4b05      	ldr	r3, [pc, #20]	@ (800326c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	4904      	ldr	r1, [pc, #16]	@ (800326c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4313      	orrs	r3, r2
 800325e:	608b      	str	r3, [r1, #8]

}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	40010400 	.word	0x40010400

08003270 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003278:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800327a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800327c:	4904      	ldr	r1, [pc, #16]	@ (8003290 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4313      	orrs	r3, r2
 8003282:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40010400 	.word	0x40010400

08003294 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800329c:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	4904      	ldr	r1, [pc, #16]	@ (80032b8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]

}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40010400 	.word	0x40010400

080032bc <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80032c4:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80032c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	4904      	ldr	r1, [pc, #16]	@ (80032e0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40010400 	.word	0x40010400

080032e4 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80032ec:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	4904      	ldr	r1, [pc, #16]	@ (8003304 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60cb      	str	r3, [r1, #12]
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	40010400 	.word	0x40010400

08003308 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003310:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003314:	4904      	ldr	r1, [pc, #16]	@ (8003328 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4313      	orrs	r3, r2
 800331a:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	40010400 	.word	0x40010400

0800332c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003334:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	43db      	mvns	r3, r3
 800333c:	4904      	ldr	r1, [pc, #16]	@ (8003350 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800333e:	4013      	ands	r3, r2
 8003340:	60cb      	str	r3, [r1, #12]
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40010400 	.word	0x40010400

08003354 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800335c:	4b06      	ldr	r3, [pc, #24]	@ (8003378 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800335e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	43db      	mvns	r3, r3
 8003364:	4904      	ldr	r1, [pc, #16]	@ (8003378 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003366:	4013      	ands	r3, r2
 8003368:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40010400 	.word	0x40010400

0800337c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003384:	4a04      	ldr	r2, [pc, #16]	@ (8003398 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6153      	str	r3, [r2, #20]
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40010400 	.word	0x40010400

0800339c <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80033a4:	4a04      	ldr	r2, [pc, #16]	@ (80033b8 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40010400 	.word	0x40010400

080033bc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d102      	bne.n	80033d8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	77fb      	strb	r3, [r7, #31]
 80033d6:	e181      	b.n	80036dc <HAL_COMP_Init+0x320>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80033e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033e6:	d102      	bne.n	80033ee <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	77fb      	strb	r3, [r7, #31]
 80033ec:	e176      	b.n	80036dc <HAL_COMP_Init+0x320>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	7f5b      	ldrb	r3, [r3, #29]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d108      	bne.n	800340a <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7fd ff19 	bl	800123c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003414:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (hcomp->Init.InputMinus
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b90      	ldr	r3, [pc, #576]	@ (800367c <HAL_COMP_Init+0x2c0>)
 800343c:	4013      	ands	r3, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	6979      	ldr	r1, [r7, #20]
 8003444:	430b      	orrs	r3, r1
 8003446:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d016      	beq.n	8003484 <HAL_COMP_Init+0xc8>
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d113      	bne.n	8003484 <HAL_COMP_Init+0xc8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800345c:	4b88      	ldr	r3, [pc, #544]	@ (8003680 <HAL_COMP_Init+0x2c4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	099b      	lsrs	r3, r3, #6
 8003462:	4a88      	ldr	r2, [pc, #544]	@ (8003684 <HAL_COMP_Init+0x2c8>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	099b      	lsrs	r3, r3, #6
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8003476:	e002      	b.n	800347e <HAL_COMP_Init+0xc2>
      {
        wait_loop_index--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	3b01      	subs	r3, #1
 800347c:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f9      	bne.n	8003478 <HAL_COMP_Init+0xbc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a7f      	ldr	r2, [pc, #508]	@ (8003688 <HAL_COMP_Init+0x2cc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d028      	beq.n	80034e0 <HAL_COMP_Init+0x124>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a7e      	ldr	r2, [pc, #504]	@ (800368c <HAL_COMP_Init+0x2d0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d020      	beq.n	80034da <HAL_COMP_Init+0x11e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a7c      	ldr	r2, [pc, #496]	@ (8003690 <HAL_COMP_Init+0x2d4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d018      	beq.n	80034d4 <HAL_COMP_Init+0x118>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a7b      	ldr	r2, [pc, #492]	@ (8003694 <HAL_COMP_Init+0x2d8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d010      	beq.n	80034ce <HAL_COMP_Init+0x112>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a79      	ldr	r2, [pc, #484]	@ (8003698 <HAL_COMP_Init+0x2dc>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d008      	beq.n	80034c8 <HAL_COMP_Init+0x10c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a78      	ldr	r2, [pc, #480]	@ (800369c <HAL_COMP_Init+0x2e0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d101      	bne.n	80034c4 <HAL_COMP_Init+0x108>
 80034c0:	2301      	movs	r3, #1
 80034c2:	e00f      	b.n	80034e4 <HAL_COMP_Init+0x128>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e00d      	b.n	80034e4 <HAL_COMP_Init+0x128>
 80034c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80034cc:	e00a      	b.n	80034e4 <HAL_COMP_Init+0x128>
 80034ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80034d2:	e007      	b.n	80034e4 <HAL_COMP_Init+0x128>
 80034d4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80034d8:	e004      	b.n	80034e4 <HAL_COMP_Init+0x128>
 80034da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80034de:	e001      	b.n	80034e4 <HAL_COMP_Init+0x128>
 80034e0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80034e4:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80b6 	beq.w	8003660 <HAL_COMP_Init+0x2a4>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	f003 0310 	and.w	r3, r3, #16
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d011      	beq.n	8003524 <HAL_COMP_Init+0x168>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a65      	ldr	r2, [pc, #404]	@ (800369c <HAL_COMP_Init+0x2e0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d004      	beq.n	8003514 <HAL_COMP_Init+0x158>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a64      	ldr	r2, [pc, #400]	@ (80036a0 <HAL_COMP_Init+0x2e4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d103      	bne.n	800351c <HAL_COMP_Init+0x160>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8003514:	6938      	ldr	r0, [r7, #16]
 8003516:	f7ff feab 	bl	8003270 <LL_EXTI_EnableRisingTrig_32_63>
 800351a:	e014      	b.n	8003546 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800351c:	6938      	ldr	r0, [r7, #16]
 800351e:	f7ff fe95 	bl	800324c <LL_EXTI_EnableRisingTrig_0_31>
 8003522:	e010      	b.n	8003546 <HAL_COMP_Init+0x18a>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a5c      	ldr	r2, [pc, #368]	@ (800369c <HAL_COMP_Init+0x2e0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d004      	beq.n	8003538 <HAL_COMP_Init+0x17c>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a5b      	ldr	r2, [pc, #364]	@ (80036a0 <HAL_COMP_Init+0x2e4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d103      	bne.n	8003540 <HAL_COMP_Init+0x184>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8003538:	6938      	ldr	r0, [r7, #16]
 800353a:	f7ff febf 	bl	80032bc <LL_EXTI_DisableRisingTrig_32_63>
 800353e:	e002      	b.n	8003546 <HAL_COMP_Init+0x18a>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003540:	6938      	ldr	r0, [r7, #16]
 8003542:	f7ff fea7 	bl	8003294 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b00      	cmp	r3, #0
 8003550:	d011      	beq.n	8003576 <HAL_COMP_Init+0x1ba>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a51      	ldr	r2, [pc, #324]	@ (800369c <HAL_COMP_Init+0x2e0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d004      	beq.n	8003566 <HAL_COMP_Init+0x1aa>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a4f      	ldr	r2, [pc, #316]	@ (80036a0 <HAL_COMP_Init+0x2e4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d103      	bne.n	800356e <HAL_COMP_Init+0x1b2>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8003566:	6938      	ldr	r0, [r7, #16]
 8003568:	f7ff fece 	bl	8003308 <LL_EXTI_EnableFallingTrig_32_63>
 800356c:	e014      	b.n	8003598 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800356e:	6938      	ldr	r0, [r7, #16]
 8003570:	f7ff feb8 	bl	80032e4 <LL_EXTI_EnableFallingTrig_0_31>
 8003574:	e010      	b.n	8003598 <HAL_COMP_Init+0x1dc>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a48      	ldr	r2, [pc, #288]	@ (800369c <HAL_COMP_Init+0x2e0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d004      	beq.n	800358a <HAL_COMP_Init+0x1ce>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a46      	ldr	r2, [pc, #280]	@ (80036a0 <HAL_COMP_Init+0x2e4>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d103      	bne.n	8003592 <HAL_COMP_Init+0x1d6>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800358a:	6938      	ldr	r0, [r7, #16]
 800358c:	f7ff fee2 	bl	8003354 <LL_EXTI_DisableFallingTrig_32_63>
 8003590:	e002      	b.n	8003598 <HAL_COMP_Init+0x1dc>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003592:	6938      	ldr	r0, [r7, #16]
 8003594:	f7ff feca 	bl	800332c <LL_EXTI_DisableFallingTrig_0_31>
#endif /* COMP7 */
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a3f      	ldr	r2, [pc, #252]	@ (800369c <HAL_COMP_Init+0x2e0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d004      	beq.n	80035ac <HAL_COMP_Init+0x1f0>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a3e      	ldr	r2, [pc, #248]	@ (80036a0 <HAL_COMP_Init+0x2e4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d103      	bne.n	80035b4 <HAL_COMP_Init+0x1f8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80035ac:	6938      	ldr	r0, [r7, #16]
 80035ae:	f7ff fef5 	bl	800339c <LL_EXTI_ClearFlag_32_63>
 80035b2:	e002      	b.n	80035ba <HAL_COMP_Init+0x1fe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80035b4:	6938      	ldr	r0, [r7, #16]
 80035b6:	f7ff fee1 	bl	800337c <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d011      	beq.n	80035ea <HAL_COMP_Init+0x22e>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a34      	ldr	r2, [pc, #208]	@ (800369c <HAL_COMP_Init+0x2e0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d004      	beq.n	80035da <HAL_COMP_Init+0x21e>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a32      	ldr	r2, [pc, #200]	@ (80036a0 <HAL_COMP_Init+0x2e4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d103      	bne.n	80035e2 <HAL_COMP_Init+0x226>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80035da:	6938      	ldr	r0, [r7, #16]
 80035dc:	f7ff fdfc 	bl	80031d8 <LL_EXTI_EnableEvent_32_63>
 80035e0:	e014      	b.n	800360c <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 80035e2:	6938      	ldr	r0, [r7, #16]
 80035e4:	f7ff fde6 	bl	80031b4 <LL_EXTI_EnableEvent_0_31>
 80035e8:	e010      	b.n	800360c <HAL_COMP_Init+0x250>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a2b      	ldr	r2, [pc, #172]	@ (800369c <HAL_COMP_Init+0x2e0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d004      	beq.n	80035fe <HAL_COMP_Init+0x242>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a29      	ldr	r2, [pc, #164]	@ (80036a0 <HAL_COMP_Init+0x2e4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d103      	bne.n	8003606 <HAL_COMP_Init+0x24a>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80035fe:	6938      	ldr	r0, [r7, #16]
 8003600:	f7ff fe10 	bl	8003224 <LL_EXTI_DisableEvent_32_63>
 8003604:	e002      	b.n	800360c <HAL_COMP_Init+0x250>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8003606:	6938      	ldr	r0, [r7, #16]
 8003608:	f7ff fdf8 	bl	80031fc <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d011      	beq.n	800363c <HAL_COMP_Init+0x280>
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1f      	ldr	r2, [pc, #124]	@ (800369c <HAL_COMP_Init+0x2e0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d004      	beq.n	800362c <HAL_COMP_Init+0x270>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1e      	ldr	r2, [pc, #120]	@ (80036a0 <HAL_COMP_Init+0x2e4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d103      	bne.n	8003634 <HAL_COMP_Init+0x278>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800362c:	6938      	ldr	r0, [r7, #16]
 800362e:	f7ff fd87 	bl	8003140 <LL_EXTI_EnableIT_32_63>
 8003632:	e04b      	b.n	80036cc <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8003634:	6938      	ldr	r0, [r7, #16]
 8003636:	f7ff fd71 	bl	800311c <LL_EXTI_EnableIT_0_31>
 800363a:	e047      	b.n	80036cc <HAL_COMP_Init+0x310>
#endif /* COMP7 */
      }
      else
      {
#if defined(COMP7)
        if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a16      	ldr	r2, [pc, #88]	@ (800369c <HAL_COMP_Init+0x2e0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d004      	beq.n	8003650 <HAL_COMP_Init+0x294>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a15      	ldr	r2, [pc, #84]	@ (80036a0 <HAL_COMP_Init+0x2e4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d103      	bne.n	8003658 <HAL_COMP_Init+0x29c>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8003650:	6938      	ldr	r0, [r7, #16]
 8003652:	f7ff fd9b 	bl	800318c <LL_EXTI_DisableIT_32_63>
 8003656:	e039      	b.n	80036cc <HAL_COMP_Init+0x310>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8003658:	6938      	ldr	r0, [r7, #16]
 800365a:	f7ff fd83 	bl	8003164 <LL_EXTI_DisableIT_0_31>
 800365e:	e035      	b.n	80036cc <HAL_COMP_Init+0x310>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a0d      	ldr	r2, [pc, #52]	@ (800369c <HAL_COMP_Init+0x2e0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d004      	beq.n	8003674 <HAL_COMP_Init+0x2b8>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a0c      	ldr	r2, [pc, #48]	@ (80036a0 <HAL_COMP_Init+0x2e4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d117      	bne.n	80036a4 <HAL_COMP_Init+0x2e8>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8003674:	6938      	ldr	r0, [r7, #16]
 8003676:	f7ff fdd5 	bl	8003224 <LL_EXTI_DisableEvent_32_63>
 800367a:	e016      	b.n	80036aa <HAL_COMP_Init+0x2ee>
 800367c:	ff007e0f 	.word	0xff007e0f
 8003680:	20000000 	.word	0x20000000
 8003684:	053e2d63 	.word	0x053e2d63
 8003688:	40010200 	.word	0x40010200
 800368c:	40010204 	.word	0x40010204
 8003690:	40010208 	.word	0x40010208
 8003694:	4001020c 	.word	0x4001020c
 8003698:	40010210 	.word	0x40010210
 800369c:	40010214 	.word	0x40010214
 80036a0:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80036a4:	6938      	ldr	r0, [r7, #16]
 80036a6:	f7ff fda9 	bl	80031fc <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */

      /* Disable EXTI interrupt mode */
#if defined(COMP7)
      if ((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a0e      	ldr	r2, [pc, #56]	@ (80036e8 <HAL_COMP_Init+0x32c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d004      	beq.n	80036be <HAL_COMP_Init+0x302>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a0c      	ldr	r2, [pc, #48]	@ (80036ec <HAL_COMP_Init+0x330>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d103      	bne.n	80036c6 <HAL_COMP_Init+0x30a>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80036be:	6938      	ldr	r0, [r7, #16]
 80036c0:	f7ff fd64 	bl	800318c <LL_EXTI_DisableIT_32_63>
 80036c4:	e002      	b.n	80036cc <HAL_COMP_Init+0x310>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80036c6:	6938      	ldr	r0, [r7, #16]
 80036c8:	f7ff fd4c 	bl	8003164 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	7f5b      	ldrb	r3, [r3, #29]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d102      	bne.n	80036dc <HAL_COMP_Init+0x320>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80036dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3720      	adds	r7, #32
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40010214 	.word	0x40010214
 80036ec:	40010218 	.word	0x40010218

080036f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003700:	4b0c      	ldr	r3, [pc, #48]	@ (8003734 <__NVIC_SetPriorityGrouping+0x44>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800370c:	4013      	ands	r3, r2
 800370e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003718:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800371c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003722:	4a04      	ldr	r2, [pc, #16]	@ (8003734 <__NVIC_SetPriorityGrouping+0x44>)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	60d3      	str	r3, [r2, #12]
}
 8003728:	bf00      	nop
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800373c:	4b04      	ldr	r3, [pc, #16]	@ (8003750 <__NVIC_GetPriorityGrouping+0x18>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	0a1b      	lsrs	r3, r3, #8
 8003742:	f003 0307 	and.w	r3, r3, #7
}
 8003746:	4618      	mov	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	e000ed00 	.word	0xe000ed00

08003754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	2b00      	cmp	r3, #0
 8003764:	db0b      	blt.n	800377e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	f003 021f 	and.w	r2, r3, #31
 800376c:	4907      	ldr	r1, [pc, #28]	@ (800378c <__NVIC_EnableIRQ+0x38>)
 800376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	2001      	movs	r0, #1
 8003776:	fa00 f202 	lsl.w	r2, r0, r2
 800377a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	e000e100 	.word	0xe000e100

08003790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	6039      	str	r1, [r7, #0]
 800379a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	db0a      	blt.n	80037ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	490c      	ldr	r1, [pc, #48]	@ (80037dc <__NVIC_SetPriority+0x4c>)
 80037aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ae:	0112      	lsls	r2, r2, #4
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	440b      	add	r3, r1
 80037b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b8:	e00a      	b.n	80037d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	4908      	ldr	r1, [pc, #32]	@ (80037e0 <__NVIC_SetPriority+0x50>)
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	3b04      	subs	r3, #4
 80037c8:	0112      	lsls	r2, r2, #4
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	440b      	add	r3, r1
 80037ce:	761a      	strb	r2, [r3, #24]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000e100 	.word	0xe000e100
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b089      	sub	sp, #36	@ 0x24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f1c3 0307 	rsb	r3, r3, #7
 80037fe:	2b04      	cmp	r3, #4
 8003800:	bf28      	it	cs
 8003802:	2304      	movcs	r3, #4
 8003804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3304      	adds	r3, #4
 800380a:	2b06      	cmp	r3, #6
 800380c:	d902      	bls.n	8003814 <NVIC_EncodePriority+0x30>
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3b03      	subs	r3, #3
 8003812:	e000      	b.n	8003816 <NVIC_EncodePriority+0x32>
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003818:	f04f 32ff 	mov.w	r2, #4294967295
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43da      	mvns	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	401a      	ands	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800382c:	f04f 31ff 	mov.w	r1, #4294967295
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	fa01 f303 	lsl.w	r3, r1, r3
 8003836:	43d9      	mvns	r1, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800383c:	4313      	orrs	r3, r2
         );
}
 800383e:	4618      	mov	r0, r3
 8003840:	3724      	adds	r7, #36	@ 0x24
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
	...

0800384c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3b01      	subs	r3, #1
 8003858:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800385c:	d301      	bcc.n	8003862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800385e:	2301      	movs	r3, #1
 8003860:	e00f      	b.n	8003882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003862:	4a0a      	ldr	r2, [pc, #40]	@ (800388c <SysTick_Config+0x40>)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3b01      	subs	r3, #1
 8003868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800386a:	210f      	movs	r1, #15
 800386c:	f04f 30ff 	mov.w	r0, #4294967295
 8003870:	f7ff ff8e 	bl	8003790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003874:	4b05      	ldr	r3, [pc, #20]	@ (800388c <SysTick_Config+0x40>)
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800387a:	4b04      	ldr	r3, [pc, #16]	@ (800388c <SysTick_Config+0x40>)
 800387c:	2207      	movs	r2, #7
 800387e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	e000e010 	.word	0xe000e010

08003890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ff29 	bl	80036f0 <__NVIC_SetPriorityGrouping>
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b086      	sub	sp, #24
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	4603      	mov	r3, r0
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038b4:	f7ff ff40 	bl	8003738 <__NVIC_GetPriorityGrouping>
 80038b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	6978      	ldr	r0, [r7, #20]
 80038c0:	f7ff ff90 	bl	80037e4 <NVIC_EncodePriority>
 80038c4:	4602      	mov	r2, r0
 80038c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ca:	4611      	mov	r1, r2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff ff5f 	bl	8003790 <__NVIC_SetPriority>
}
 80038d2:	bf00      	nop
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	4603      	mov	r3, r0
 80038e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff ff33 	bl	8003754 <__NVIC_EnableIRQ>
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff ffa4 	bl	800384c <SysTick_Config>
 8003904:	4603      	mov	r3, r0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e014      	b.n	800394a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	791b      	ldrb	r3, [r3, #4]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d105      	bne.n	8003936 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7fd fd19 	bl	8001368 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2202      	movs	r2, #2
 800393a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08a      	sub	sp, #40	@ 0x28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_DAC_ConfigChannel+0x1c>
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e1a1      	b.n	8003cb8 <HAL_DAC_ConfigChannel+0x364>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	795b      	ldrb	r3, [r3, #5]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_DAC_ConfigChannel+0x32>
 8003982:	2302      	movs	r3, #2
 8003984:	e198      	b.n	8003cb8 <HAL_DAC_ConfigChannel+0x364>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2202      	movs	r2, #2
 8003990:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b04      	cmp	r3, #4
 8003998:	d17a      	bne.n	8003a90 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800399a:	f7fd ff9f 	bl	80018dc <HAL_GetTick>
 800399e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d13d      	bne.n	8003a22 <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80039a6:	e018      	b.n	80039da <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80039a8:	f7fd ff98 	bl	80018dc <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d911      	bls.n	80039da <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f043 0208 	orr.w	r2, r3, #8
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2203      	movs	r2, #3
 80039d4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e16e      	b.n	8003cb8 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1df      	bne.n	80039a8 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80039f2:	e020      	b.n	8003a36 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80039f4:	f7fd ff72 	bl	80018dc <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d90f      	bls.n	8003a22 <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	da0a      	bge.n	8003a22 <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f043 0208 	orr.w	r2, r3, #8
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e14a      	b.n	8003cb8 <HAL_DAC_ConfigChannel+0x364>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	dbe3      	blt.n	80039f4 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a34:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f003 0310 	and.w	r3, r3, #16
 8003a42:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003a46:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	ea02 0103 	and.w	r1, r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f003 0310 	and.w	r3, r3, #16
 8003a70:	21ff      	movs	r1, #255	@ 0xff
 8003a72:	fa01 f303 	lsl.w	r3, r1, r3
 8003a76:	43db      	mvns	r3, r3
 8003a78:	ea02 0103 	and.w	r1, r2, r3
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f003 0310 	and.w	r3, r3, #16
 8003a86:	409a      	lsls	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d11d      	bne.n	8003ad4 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	221f      	movs	r2, #31
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	43db      	mvns	r3, r3
 8003aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ada:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f003 0310 	and.w	r3, r3, #16
 8003ae2:	2207      	movs	r2, #7
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aec:	4013      	ands	r3, r2
 8003aee:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d102      	bne.n	8003afe <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	623b      	str	r3, [r7, #32]
 8003afc:	e00f      	b.n	8003b1e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d102      	bne.n	8003b0c <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003b06:	2301      	movs	r3, #1
 8003b08:	623b      	str	r3, [r7, #32]
 8003b0a:	e008      	b.n	8003b1e <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d102      	bne.n	8003b1a <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003b14:	2301      	movs	r3, #1
 8003b16:	623b      	str	r3, [r7, #32]
 8003b18:	e001      	b.n	8003b1e <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	6a3a      	ldr	r2, [r7, #32]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b40:	4013      	ands	r3, r2
 8003b42:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	791b      	ldrb	r3, [r3, #4]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d102      	bne.n	8003b52 <HAL_DAC_ConfigChannel+0x1fe>
 8003b4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b50:	e000      	b.n	8003b54 <HAL_DAC_ConfigChannel+0x200>
 8003b52:	2300      	movs	r3, #0
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	795b      	ldrb	r3, [r3, #5]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d102      	bne.n	8003b7e <HAL_DAC_ConfigChannel+0x22a>
 8003b78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b7c:	e000      	b.n	8003b80 <HAL_DAC_ConfigChannel+0x22c>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d114      	bne.n	8003bc0 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003b96:	f003 fe41 	bl	800781c <HAL_RCC_GetHCLKFreq>
 8003b9a:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4a48      	ldr	r2, [pc, #288]	@ (8003cc0 <HAL_DAC_ConfigChannel+0x36c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d904      	bls.n	8003bae <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bac:	e00f      	b.n	8003bce <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4a44      	ldr	r2, [pc, #272]	@ (8003cc4 <HAL_DAC_ConfigChannel+0x370>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d90a      	bls.n	8003bcc <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bbe:	e006      	b.n	8003bce <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bca:	e000      	b.n	8003bce <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003bcc:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003be6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6819      	ldr	r1, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43da      	mvns	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	400a      	ands	r2, r1
 8003c04:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c20:	4013      	ands	r3, r2
 8003c22:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c42:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6819      	ldr	r1, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f003 0310 	and.w	r3, r3, #16
 8003c50:	22c0      	movs	r2, #192	@ 0xc0
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43da      	mvns	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	400a      	ands	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	089b      	lsrs	r3, r3, #2
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	089b      	lsrs	r3, r3, #2
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8003c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c92:	43db      	mvns	r3, r3
 8003c94:	ea02 0103 	and.w	r1, r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f003 0310 	and.w	r3, r3, #16
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003cb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3728      	adds	r7, #40	@ 0x28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	09896800 	.word	0x09896800
 8003cc4:	04c4b400 	.word	0x04c4b400

08003cc8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d005      	beq.n	8003cec <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	73fb      	strb	r3, [r7, #15]
 8003cea:	e037      	b.n	8003d5c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 020e 	bic.w	r2, r2, #14
 8003cfa:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d0a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0201 	bic.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d20:	f003 021f 	and.w	r2, r3, #31
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d28:	2101      	movs	r1, #1
 8003d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d2e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d38:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00c      	beq.n	8003d5c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d50:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d5a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d00d      	beq.n	8003dae <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2204      	movs	r2, #4
 8003d96:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
 8003dac:	e047      	b.n	8003e3e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 020e 	bic.w	r2, r2, #14
 8003dbc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0201 	bic.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ddc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de2:	f003 021f 	and.w	r2, r3, #31
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dea:	2101      	movs	r1, #1
 8003dec:	fa01 f202 	lsl.w	r2, r1, r2
 8003df0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003dfa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00c      	beq.n	8003e1e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e1c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	4798      	blx	r3
    }
  }
  return status;
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e56:	e15a      	b.n	800410e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	fa01 f303 	lsl.w	r3, r1, r3
 8003e64:	4013      	ands	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 814c 	beq.w	8004108 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f003 0303 	and.w	r3, r3, #3
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d005      	beq.n	8003e88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d130      	bne.n	8003eea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	2203      	movs	r2, #3
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	091b      	lsrs	r3, r3, #4
 8003ed4:	f003 0201 	and.w	r2, r3, #1
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d017      	beq.n	8003f26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	2203      	movs	r2, #3
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	43db      	mvns	r3, r3
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d123      	bne.n	8003f7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	08da      	lsrs	r2, r3, #3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3208      	adds	r2, #8
 8003f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	220f      	movs	r2, #15
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4013      	ands	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	691a      	ldr	r2, [r3, #16]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	08da      	lsrs	r2, r3, #3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3208      	adds	r2, #8
 8003f74:	6939      	ldr	r1, [r7, #16]
 8003f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	2203      	movs	r2, #3
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 0203 	and.w	r2, r3, #3
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 80a6 	beq.w	8004108 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fbc:	4b5b      	ldr	r3, [pc, #364]	@ (800412c <HAL_GPIO_Init+0x2e4>)
 8003fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fc0:	4a5a      	ldr	r2, [pc, #360]	@ (800412c <HAL_GPIO_Init+0x2e4>)
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	6613      	str	r3, [r2, #96]	@ 0x60
 8003fc8:	4b58      	ldr	r3, [pc, #352]	@ (800412c <HAL_GPIO_Init+0x2e4>)
 8003fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fd4:	4a56      	ldr	r2, [pc, #344]	@ (8004130 <HAL_GPIO_Init+0x2e8>)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	089b      	lsrs	r3, r3, #2
 8003fda:	3302      	adds	r3, #2
 8003fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	220f      	movs	r2, #15
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ffe:	d01f      	beq.n	8004040 <HAL_GPIO_Init+0x1f8>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a4c      	ldr	r2, [pc, #304]	@ (8004134 <HAL_GPIO_Init+0x2ec>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d019      	beq.n	800403c <HAL_GPIO_Init+0x1f4>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a4b      	ldr	r2, [pc, #300]	@ (8004138 <HAL_GPIO_Init+0x2f0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d013      	beq.n	8004038 <HAL_GPIO_Init+0x1f0>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a4a      	ldr	r2, [pc, #296]	@ (800413c <HAL_GPIO_Init+0x2f4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00d      	beq.n	8004034 <HAL_GPIO_Init+0x1ec>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a49      	ldr	r2, [pc, #292]	@ (8004140 <HAL_GPIO_Init+0x2f8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d007      	beq.n	8004030 <HAL_GPIO_Init+0x1e8>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a48      	ldr	r2, [pc, #288]	@ (8004144 <HAL_GPIO_Init+0x2fc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d101      	bne.n	800402c <HAL_GPIO_Init+0x1e4>
 8004028:	2305      	movs	r3, #5
 800402a:	e00a      	b.n	8004042 <HAL_GPIO_Init+0x1fa>
 800402c:	2306      	movs	r3, #6
 800402e:	e008      	b.n	8004042 <HAL_GPIO_Init+0x1fa>
 8004030:	2304      	movs	r3, #4
 8004032:	e006      	b.n	8004042 <HAL_GPIO_Init+0x1fa>
 8004034:	2303      	movs	r3, #3
 8004036:	e004      	b.n	8004042 <HAL_GPIO_Init+0x1fa>
 8004038:	2302      	movs	r3, #2
 800403a:	e002      	b.n	8004042 <HAL_GPIO_Init+0x1fa>
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <HAL_GPIO_Init+0x1fa>
 8004040:	2300      	movs	r3, #0
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	f002 0203 	and.w	r2, r2, #3
 8004048:	0092      	lsls	r2, r2, #2
 800404a:	4093      	lsls	r3, r2
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004052:	4937      	ldr	r1, [pc, #220]	@ (8004130 <HAL_GPIO_Init+0x2e8>)
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	089b      	lsrs	r3, r3, #2
 8004058:	3302      	adds	r3, #2
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004060:	4b39      	ldr	r3, [pc, #228]	@ (8004148 <HAL_GPIO_Init+0x300>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	43db      	mvns	r3, r3
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4013      	ands	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004084:	4a30      	ldr	r2, [pc, #192]	@ (8004148 <HAL_GPIO_Init+0x300>)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800408a:	4b2f      	ldr	r3, [pc, #188]	@ (8004148 <HAL_GPIO_Init+0x300>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	43db      	mvns	r3, r3
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4013      	ands	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040ae:	4a26      	ldr	r2, [pc, #152]	@ (8004148 <HAL_GPIO_Init+0x300>)
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80040b4:	4b24      	ldr	r3, [pc, #144]	@ (8004148 <HAL_GPIO_Init+0x300>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	43db      	mvns	r3, r3
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4013      	ands	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004148 <HAL_GPIO_Init+0x300>)
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80040de:	4b1a      	ldr	r3, [pc, #104]	@ (8004148 <HAL_GPIO_Init+0x300>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	43db      	mvns	r3, r3
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4013      	ands	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004102:	4a11      	ldr	r2, [pc, #68]	@ (8004148 <HAL_GPIO_Init+0x300>)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	3301      	adds	r3, #1
 800410c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	fa22 f303 	lsr.w	r3, r2, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	f47f ae9d 	bne.w	8003e58 <HAL_GPIO_Init+0x10>
  }
}
 800411e:	bf00      	nop
 8004120:	bf00      	nop
 8004122:	371c      	adds	r7, #28
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	40021000 	.word	0x40021000
 8004130:	40010000 	.word	0x40010000
 8004134:	48000400 	.word	0x48000400
 8004138:	48000800 	.word	0x48000800
 800413c:	48000c00 	.word	0x48000c00
 8004140:	48001000 	.word	0x48001000
 8004144:	48001400 	.word	0x48001400
 8004148:	40010400 	.word	0x40010400

0800414c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	887b      	ldrh	r3, [r7, #2]
 800415e:	4013      	ands	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
 8004168:	e001      	b.n	800416e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800416a:	2300      	movs	r3, #0
 800416c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800416e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	807b      	strh	r3, [r7, #2]
 8004188:	4613      	mov	r3, r2
 800418a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800418c:	787b      	ldrb	r3, [r7, #1]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004192:	887a      	ldrh	r2, [r7, #2]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004198:	e002      	b.n	80041a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800419a:	887a      	ldrh	r2, [r7, #2]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041be:	887a      	ldrh	r2, [r7, #2]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4013      	ands	r3, r2
 80041c4:	041a      	lsls	r2, r3, #16
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	43d9      	mvns	r1, r3
 80041ca:	887b      	ldrh	r3, [r7, #2]
 80041cc:	400b      	ands	r3, r1
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	619a      	str	r2, [r3, #24]
}
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041ea:	4b08      	ldr	r3, [pc, #32]	@ (800420c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041ec:	695a      	ldr	r2, [r3, #20]
 80041ee:	88fb      	ldrh	r3, [r7, #6]
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d006      	beq.n	8004204 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041f6:	4a05      	ldr	r2, [pc, #20]	@ (800420c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041f8:	88fb      	ldrh	r3, [r7, #6]
 80041fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041fc:	88fb      	ldrh	r3, [r7, #6]
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 f806 	bl	8004210 <HAL_GPIO_EXTI_Callback>
  }
}
 8004204:	bf00      	nop
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40010400 	.word	0x40010400

08004210 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
	...

08004228 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef *hhrtim)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if (hhrtim == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e0be      	b.n	80043b8 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2202      	movs	r2, #2
 800423e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d02e      	beq.n	80042e4 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a4d      	ldr	r2, [pc, #308]	@ (80043c0 <HAL_HRTIM_Init+0x198>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d10b      	bne.n	80042a8 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8004290:	4b4c      	ldr	r3, [pc, #304]	@ (80043c4 <HAL_HRTIM_Init+0x19c>)
 8004292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004294:	4a4b      	ldr	r2, [pc, #300]	@ (80043c4 <HAL_HRTIM_Init+0x19c>)
 8004296:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800429a:	6613      	str	r3, [r2, #96]	@ 0x60
 800429c:	4b49      	ldr	r3, [pc, #292]	@ (80043c4 <HAL_HRTIM_Init+0x19c>)
 800429e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80042b6:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80042cc:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	4313      	orrs	r3, r2
 80042da:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7fd f887 	bl	80013f8 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d012      	beq.n	800431c <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004304:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800432c:	2300      	movs	r3, #0
 800432e:	75fb      	strb	r3, [r7, #23]
 8004330:	e03e      	b.n	80043b0 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8004332:	7dfa      	ldrb	r2, [r7, #23]
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	440b      	add	r3, r1
 8004340:	3318      	adds	r3, #24
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8004346:	7dfa      	ldrb	r2, [r7, #23]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	331c      	adds	r3, #28
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800435a:	7dfa      	ldrb	r2, [r7, #23]
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	3320      	adds	r3, #32
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800436e:	7dfa      	ldrb	r2, [r7, #23]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	3324      	adds	r3, #36	@ 0x24
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8004382:	7dfa      	ldrb	r2, [r7, #23]
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	1a9b      	subs	r3, r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	3328      	adds	r3, #40	@ 0x28
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8004396:	7dfa      	ldrb	r2, [r7, #23]
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	4613      	mov	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	440b      	add	r3, r1
 80043a4:	3330      	adds	r3, #48	@ 0x30
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80043aa:	7dfb      	ldrb	r3, [r7, #23]
 80043ac:	3301      	adds	r3, #1
 80043ae:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80043b0:	7dfb      	ldrb	r3, [r7, #23]
 80043b2:	2b06      	cmp	r3, #6
 80043b4:	d9bd      	bls.n	8004332 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40016800 	.word	0x40016800
 80043c4:	40021000 	.word	0x40021000

080043c8 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t CalibrationRate)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_HRTIM_DLLCalibrationStart+0x18>
 80043dc:	2302      	movs	r3, #2
 80043de:	e045      	b.n	800446c <HAL_HRTIM_DLLCalibrationStart+0xa4>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f6:	d114      	bne.n	8004422 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0202 	bic.w	r2, r2, #2
 8004408:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0201 	orr.w	r2, r2, #1
 800441c:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 8004420:	e01f      	b.n	8004462 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0202 	orr.w	r2, r2, #2
 8004432:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 800443e:	f023 010c 	bic.w	r1, r3, #12
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t Timeout)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8004482:	f7fd fa2b 	bl	80018dc <HAL_GetTick>
 8004486:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8004488:	e014      	b.n	80044b4 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004490:	d010      	beq.n	80044b4 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004492:	f7fd fa23 	bl	80018dc <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d302      	bcc.n	80044a8 <HAL_HRTIM_PollForDLLCalibration+0x30>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d105      	bne.n	80044b4 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2207      	movs	r2, #7
 80044ac:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e011      	b.n	80044d8 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80044bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044c4:	d1e1      	bne.n	800448a <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d101      	bne.n	80044fc <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
    return HAL_BUSY;
 80044f8:	2302      	movs	r3, #2
 80044fa:	e015      	b.n	8004528 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b06      	cmp	r3, #6
 8004508:	d104      	bne.n	8004514 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 fa19 	bl	8004944 <HRTIM_MasterBase_Config>
 8004512:	e004      	b.n	800451e <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	68b9      	ldr	r1, [r7, #8]
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 fa42 	bl	80049a2 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d101      	bne.n	800454c <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
    return HAL_BUSY;
 8004548:	2302      	movs	r3, #2
 800454a:	e07a      	b.n	8004642 <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8004556:	2302      	movs	r3, #2
 8004558:	e073      	b.n	8004642 <HAL_HRTIM_WaveformTimerConfig+0x112>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2202      	movs	r2, #2
 8004566:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b06      	cmp	r3, #6
 800456e:	d104      	bne.n	800457a <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 fa55 	bl	8004a22 <HRTIM_MasterWaveform_Config>
 8004578:	e004      	b.n	8004584 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	68b9      	ldr	r1, [r7, #8]
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 faec 	bl	8004b5c <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6819      	ldr	r1, [r3, #0]
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4403      	add	r3, r0
 8004596:	3320      	adds	r3, #32
 8004598:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6859      	ldr	r1, [r3, #4]
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	4613      	mov	r3, r2
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4403      	add	r3, r0
 80045ac:	3324      	adds	r3, #36	@ 0x24
 80045ae:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6899      	ldr	r1, [r3, #8]
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	4613      	mov	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4403      	add	r3, r0
 80045c2:	3328      	adds	r3, #40	@ 0x28
 80045c4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68d9      	ldr	r1, [r3, #12]
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	4613      	mov	r3, r2
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4403      	add	r3, r0
 80045d8:	332c      	adds	r3, #44	@ 0x2c
 80045da:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6919      	ldr	r1, [r3, #16]
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	4613      	mov	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	1a9b      	subs	r3, r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4403      	add	r3, r0
 80045ee:	3330      	adds	r3, #48	@ 0x30
 80045f0:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80045f2:	68b9      	ldr	r1, [r7, #8]
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 fd7f 	bl	80050f8 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b06      	cmp	r3, #6
 80045fe:	d017      	beq.n	8004630 <HAL_HRTIM_WaveformTimerConfig+0x100>
      && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d113      	bne.n	8004630 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	3301      	adds	r3, #1
 8004610:	01db      	lsls	r3, r3, #7
 8004612:	4413      	add	r3, r2
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800461e:	025b      	lsls	r3, r3, #9
 8004620:	68f9      	ldr	r1, [r7, #12]
 8004622:	6809      	ldr	r1, [r1, #0]
 8004624:	431a      	orrs	r2, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	3301      	adds	r3, #1
 800462a:	01db      	lsls	r3, r3, #7
 800462c:	440b      	add	r3, r1
 800462e:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
  assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
  assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
  assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d101      	bne.n	8004666 <HAL_HRTIM_WaveformTimerControl+0x1c>
  {
    return HAL_BUSY;
 8004662:	2302      	movs	r3, #2
 8004664:	e020      	b.n	80046a8 <HAL_HRTIM_WaveformTimerControl+0x5e>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_HRTIM_WaveformTimerControl+0x2a>
 8004670:	2302      	movs	r3, #2
 8004672:	e019      	b.n	80046a8 <HAL_HRTIM_WaveformTimerControl+0x5e>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure timing unit */
  HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 fbed 	bl	8004e68 <HRTIM_TimingUnitWaveform_Control>

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 fd31 	bl	80050f8 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 uint32_t Output,
                                                 const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d101      	bne.n	80046ce <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
    return HAL_BUSY;
 80046ca:	2302      	movs	r3, #2
 80046cc:	e01d      	b.n	800470a <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80046d8:	2302      	movs	r3, #2
 80046da:	e016      	b.n	800470a <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	68b9      	ldr	r1, [r7, #8]
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 fc18 	bl	8004f28 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef *hhrtim,
                          uint32_t TimerIdx)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2bff      	cmp	r3, #255	@ 0xff
 8004720:	d103      	bne.n	800472a <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fd56 	bl	80051d4 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8004728:	e00a      	b.n	8004740 <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b06      	cmp	r3, #6
 800472e:	d103      	bne.n	8004738 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 fddf 	bl	80052f4 <HRTIM_Master_ISR>
}
 8004736:	e003      	b.n	8004740 <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8004738:	6839      	ldr	r1, [r7, #0]
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fe9f 	bl	800547e <HRTIM_Timer_ISR>
}
 8004740:	bf00      	nop
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef *hhrtim)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_HRTIM_Fault6Callback>:
  * @brief  Callback function invoked when a fault 6 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef *hhrtim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault6Callback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef *hhrtim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_HRTIM_DLLCalibrationReadyCallback>:
  * @brief  Callback function invoked when the DLL calibration is completed
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef *hhrtim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_DLLCalibrationCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef *hhrtim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef *hhrtim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef *hhrtim,
                                              uint32_t TimerIdx)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
                                              uint32_t TimerIdx)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef *hhrtim,
                                         uint32_t TimerIdx)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef *hhrtim,
                                         uint32_t TimerIdx)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f023 0307 	bic.w	r3, r3, #7
 800495c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0318 	bic.w	r3, r3, #24
 800496e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	6812      	ldr	r2, [r2, #0]
 800498a:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	6852      	ldr	r2, [r2, #4]
 8004994:	619a      	str	r2, [r3, #24]
}
 8004996:	bf00      	nop
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                        uint32_t TimerIdx,
                                        const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b087      	sub	sp, #28
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	3301      	adds	r3, #1
 80049b6:	01db      	lsls	r3, r3, #7
 80049b8:	4413      	add	r3, r2
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f023 0307 	bic.w	r3, r3, #7
 80049c4:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f023 0318 	bic.w	r3, r3, #24
 80049d6:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	3301      	adds	r3, #1
 80049ea:	01db      	lsls	r3, r3, #7
 80049ec:	4413      	add	r3, r2
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6819      	ldr	r1, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	01db      	lsls	r3, r3, #7
 80049fe:	440b      	add	r3, r1
 8004a00:	3394      	adds	r3, #148	@ 0x94
 8004a02:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6819      	ldr	r1, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	01db      	lsls	r3, r3, #7
 8004a10:	440b      	add	r3, r1
 8004a12:	3398      	adds	r3, #152	@ 0x98
 8004a14:	601a      	str	r2, [r3, #0]
}
 8004a16:	bf00      	nop
 8004a18:	371c      	adds	r7, #28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                        const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b085      	sub	sp, #20
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004a3c:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f023 0320 	bic.w	r3, r3, #32
 8004a44:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004a56:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	d003      	beq.n	8004a68 <HRTIM_MasterWaveform_Config+0x46>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d108      	bne.n	8004a7a <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004a6e:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f043 0320 	orr.w	r3, r3, #32
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	e021      	b.n	8004abe <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d108      	bne.n	8004a94 <HRTIM_MasterWaveform_Config+0x72>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a88:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	e014      	b.n	8004abe <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d108      	bne.n	8004aae <HRTIM_MasterWaveform_Config+0x8c>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aa2:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	e007      	b.n	8004abe <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
    hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f023 0320 	bic.w	r3, r3, #32
 8004ab4:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004abc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ac4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ad6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ae8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004afa:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004b0c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004b20:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b32:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8004b50:	bf00      	nop
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b08b      	sub	sp, #44	@ 0x2c
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	01db      	lsls	r3, r3, #7
 8004b72:	4413      	add	r3, r2
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	6811      	ldr	r1, [r2, #0]
 8004b7a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	3301      	adds	r3, #1
 8004b82:	01db      	lsls	r3, r3, #7
 8004b84:	440b      	add	r3, r1
 8004b86:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	01db      	lsls	r3, r3, #7
 8004b92:	4413      	add	r3, r2
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	01db      	lsls	r3, r3, #7
 8004ba0:	4413      	add	r3, r2
 8004ba2:	33e8      	adds	r3, #232	@ 0xe8
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	01db      	lsls	r3, r3, #7
 8004bb0:	4413      	add	r3, r2
 8004bb2:	33e4      	adds	r3, #228	@ 0xe4
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8004bc0:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc4:	f023 0320 	bic.w	r3, r3, #32
 8004bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d003      	beq.n	8004be4 <HRTIM_TimingUnitWaveform_Config+0x88>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d108      	bne.n	8004bf6 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8004be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be6:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8004bea:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8004bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bee:	f043 0320 	orr.w	r3, r3, #32
 8004bf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bf4:	e021      	b.n	8004c3a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d108      	bne.n	8004c10 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c04:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c0e:	e014      	b.n	8004c3a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d108      	bne.n	8004c2a <HRTIM_TimingUnitWaveform_Config+0xce>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8004c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8004c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c28:	e007      	b.n	8004c3a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
    hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2c:	f023 0320 	bic.w	r3, r3, #32
 8004c30:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8004c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c34:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8004c38:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c40:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c52:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c64:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8004c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c72:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004c76:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8004c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c84:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004c88:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c90:	4313      	orrs	r3, r2
 8004c92:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8004c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c96:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ca4:	d103      	bne.n	8004cae <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cac:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8004cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd4:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8004cd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004cee:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d04:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	61bb      	str	r3, [r7, #24]

  /* Enable/Disable dead time insertion at timer level */
  hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d16:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1c:	6a3a      	ldr	r2, [r7, #32]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if (((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d26:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8004d2a:	d004      	beq.n	8004d36 <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d30:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8004d34:	d103      	bne.n	8004d3e <HRTIM_TimingUnitWaveform_Config+0x1e2>
      || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3a:	2b40      	cmp	r3, #64	@ 0x40
 8004d3c:	d108      	bne.n	8004d50 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT | HRTIM_OUTR_DLYPRTEN);
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8004d44:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d4a:	6a3a      	ldr	r2, [r7, #32]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d56:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d5c:	6a3a      	ldr	r2, [r7, #32]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d66:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2b05      	cmp	r3, #5
 8004d6c:	d850      	bhi.n	8004e10 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8004d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d74 <HRTIM_TimingUnitWaveform_Config+0x218>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004d8d 	.word	0x08004d8d
 8004d78:	08004da3 	.word	0x08004da3
 8004d7c:	08004db9 	.word	0x08004db9
 8004d80:	08004dcf 	.word	0x08004dcf
 8004d84:	08004de5 	.word	0x08004de5
 8004d88:	08004dfb 	.word	0x08004dfb
  {
    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004d92:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 1U);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	61fb      	str	r3, [r7, #28]
      break;
 8004da0:	e037      	b.n	8004e12 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004da8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 2U);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	61fb      	str	r3, [r7, #28]
      break;
 8004db6:	e02c      	b.n	8004e12 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004dbe:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 3U);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	61fb      	str	r3, [r7, #28]
      break;
 8004dcc:	e021      	b.n	8004e12 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004dd4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 4U);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	69fa      	ldr	r2, [r7, #28]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	61fb      	str	r3, [r7, #28]
      break;
 8004de2:	e016      	b.n	8004e12 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004dea:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 5U);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df0:	015b      	lsls	r3, r3, #5
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	61fb      	str	r3, [r7, #28]
      break;
 8004df8:	e00b      	b.n	8004e12 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004e00:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 6U);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e06:	019b      	lsls	r3, r3, #6
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	61fb      	str	r3, [r7, #28]
      break;
 8004e0e:	e000      	b.n	8004e12 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    default:
      break;
 8004e10:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	01db      	lsls	r3, r3, #7
 8004e1c:	4413      	add	r3, r2
 8004e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e20:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	01db      	lsls	r3, r3, #7
 8004e2a:	4413      	add	r3, r2
 8004e2c:	33e8      	adds	r3, #232	@ 0xe8
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	01db      	lsls	r3, r3, #7
 8004e3a:	4413      	add	r3, r2
 8004e3c:	33e4      	adds	r3, #228	@ 0xe4
 8004e3e:	6a3a      	ldr	r2, [r7, #32]
 8004e40:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	01db      	lsls	r3, r3, #7
 8004e4a:	4413      	add	r3, r2
 8004e4c:	33d4      	adds	r3, #212	@ 0xd4
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69fa      	ldr	r2, [r7, #28]
 8004e58:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8004e5c:	bf00      	nop
 8004e5e:	372c      	adds	r7, #44	@ 0x2c
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr2;

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	01db      	lsls	r3, r3, #7
 8004e7c:	4413      	add	r3, r2
 8004e7e:	33ec      	adds	r3, #236	@ 0xec
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	617b      	str	r3, [r7, #20]

  /* Set the UpDown counting Mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f023 0310 	bic.w	r3, r3, #16
 8004e8a:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]

  /* Set the TrigHalf Mode : requires the counter to be disabled */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004e9e:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eb0:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004ec2:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]

  if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d11a      	bne.n	8004f0c <HRTIM_TimingUnitWaveform_Control+0xa4>
  {
    /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f023 0304 	bic.w	r3, r3, #4
 8004edc:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]

    /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f023 0302 	bic.w	r3, r3, #2
 8004eee:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]

    /* Enable the DualChannel DAC trigger */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f023 0301 	bic.w	r3, r3, #1
 8004f00:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]
  }
  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	01db      	lsls	r3, r3, #7
 8004f14:	4413      	add	r3, r2
 8004f16:	33ec      	adds	r3, #236	@ 0xec
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	601a      	str	r2, [r3, #0]

}
 8004f1c:	bf00      	nop
 8004f1e:	371c      	adds	r7, #28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b089      	sub	sp, #36	@ 0x24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	01db      	lsls	r3, r3, #7
 8004f42:	4413      	add	r3, r2
 8004f44:	33e4      	adds	r3, #228	@ 0xe4
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	01db      	lsls	r3, r3, #7
 8004f52:	4413      	add	r3, r2
 8004f54:	33b8      	adds	r3, #184	@ 0xb8
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	617b      	str	r3, [r7, #20]

  switch (Output)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f60:	d05d      	beq.n	800501e <HRTIM_OutputConfig+0xf6>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f68:	d86e      	bhi.n	8005048 <HRTIM_OutputConfig+0x120>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f70:	d042      	beq.n	8004ff8 <HRTIM_OutputConfig+0xd0>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f78:	d866      	bhi.n	8005048 <HRTIM_OutputConfig+0x120>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f80:	d04d      	beq.n	800501e <HRTIM_OutputConfig+0xf6>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f88:	d85e      	bhi.n	8005048 <HRTIM_OutputConfig+0x120>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f90:	d032      	beq.n	8004ff8 <HRTIM_OutputConfig+0xd0>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f98:	d856      	bhi.n	8005048 <HRTIM_OutputConfig+0x120>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b80      	cmp	r3, #128	@ 0x80
 8004f9e:	d03e      	beq.n	800501e <HRTIM_OutputConfig+0xf6>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b80      	cmp	r3, #128	@ 0x80
 8004fa4:	d850      	bhi.n	8005048 <HRTIM_OutputConfig+0x120>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b40      	cmp	r3, #64	@ 0x40
 8004faa:	d025      	beq.n	8004ff8 <HRTIM_OutputConfig+0xd0>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b40      	cmp	r3, #64	@ 0x40
 8004fb0:	d84a      	bhi.n	8005048 <HRTIM_OutputConfig+0x120>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d01f      	beq.n	8004ff8 <HRTIM_OutputConfig+0xd0>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d044      	beq.n	8005048 <HRTIM_OutputConfig+0x120>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	d841      	bhi.n	8005048 <HRTIM_OutputConfig+0x120>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d33e      	bcc.n	8005048 <HRTIM_OutputConfig+0x120>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3b02      	subs	r3, #2
 8004fce:	2201      	movs	r2, #1
 8004fd0:	409a      	lsls	r2, r3
 8004fd2:	4b48      	ldr	r3, [pc, #288]	@ (80050f4 <HRTIM_OutputConfig+0x1cc>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	bf14      	ite	ne
 8004fda:	2301      	movne	r3, #1
 8004fdc:	2300      	moveq	r3, #0
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d11c      	bne.n	800501e <HRTIM_OutputConfig+0xf6>
 8004fe4:	f244 0304 	movw	r3, #16388	@ 0x4004
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	bf14      	ite	ne
 8004fee:	2301      	movne	r3, #1
 8004ff0:	2300      	moveq	r3, #0
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d027      	beq.n	8005048 <HRTIM_OutputConfig+0x120>
    case HRTIM_OUTPUT_TD1:
    case HRTIM_OUTPUT_TE1:
    case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6819      	ldr	r1, [r3, #0]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	01db      	lsls	r3, r3, #7
 8005004:	440b      	add	r3, r1
 8005006:	33bc      	adds	r3, #188	@ 0xbc
 8005008:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6819      	ldr	r1, [r3, #0]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	01db      	lsls	r3, r3, #7
 8005016:	440b      	add	r3, r1
 8005018:	33c0      	adds	r3, #192	@ 0xc0
 800501a:	601a      	str	r2, [r3, #0]
      break;
 800501c:	e015      	b.n	800504a <HRTIM_OutputConfig+0x122>
    case HRTIM_OUTPUT_TD2:
    case HRTIM_OUTPUT_TE2:
    case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6819      	ldr	r1, [r3, #0]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	01db      	lsls	r3, r3, #7
 800502a:	440b      	add	r3, r1
 800502c:	33c4      	adds	r3, #196	@ 0xc4
 800502e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6819      	ldr	r1, [r3, #0]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	01db      	lsls	r3, r3, #7
 800503c:	440b      	add	r3, r1
 800503e:	33c8      	adds	r3, #200	@ 0xc8
 8005040:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8005042:	2310      	movs	r3, #16
 8005044:	61bb      	str	r3, [r7, #24]
      break;
 8005046:	e000      	b.n	800504a <HRTIM_OutputConfig+0x122>
    }

    default:
      break;
 8005048:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1 |
                   HRTIM_OUTR_FAULT1 |
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 800504a:	22fe      	movs	r2, #254	@ 0xfe
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8005052:	43db      	mvns	r3, r3
 8005054:	69fa      	ldr	r2, [r7, #28]
 8005056:	4013      	ands	r3, r2
 8005058:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	69fa      	ldr	r2, [r7, #28]
 8005066:	4313      	orrs	r3, r2
 8005068:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	69fa      	ldr	r2, [r7, #28]
 8005076:	4313      	orrs	r3, r2
 8005078:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	69fa      	ldr	r2, [r7, #28]
 8005086:	4313      	orrs	r3, r2
 8005088:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	695a      	ldr	r2, [r3, #20]
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	69fa      	ldr	r2, [r7, #28]
 8005096:	4313      	orrs	r3, r2
 8005098:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	699a      	ldr	r2, [r3, #24]
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	d111      	bne.n	80050d6 <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10c      	bne.n	80050d6 <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d107      	bne.n	80050d6 <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	69da      	ldr	r2, [r3, #28]
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	69fa      	ldr	r2, [r7, #28]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	01db      	lsls	r3, r3, #7
 80050de:	4413      	add	r3, r2
 80050e0:	33e4      	adds	r3, #228	@ 0xe4
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	601a      	str	r2, [r3, #0]
}
 80050e6:	bf00      	nop
 80050e8:	3724      	adds	r7, #36	@ 0x24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	40000041 	.word	0x40000041

080050f8 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef *hhrtim,
                                       uint32_t TimerIdx)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b06      	cmp	r3, #6
 8005106:	d85e      	bhi.n	80051c6 <HRTIM_ForceRegistersUpdate+0xce>
 8005108:	a201      	add	r2, pc, #4	@ (adr r2, 8005110 <HRTIM_ForceRegistersUpdate+0x18>)
 800510a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510e:	bf00      	nop
 8005110:	08005143 	.word	0x08005143
 8005114:	08005159 	.word	0x08005159
 8005118:	0800516f 	.word	0x0800516f
 800511c:	08005185 	.word	0x08005185
 8005120:	0800519b 	.word	0x0800519b
 8005124:	080051b1 	.word	0x080051b1
 8005128:	0800512d 	.word	0x0800512d
  {
    case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0201 	orr.w	r2, r2, #1
 800513c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005140:	e042      	b.n	80051c8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0202 	orr.w	r2, r2, #2
 8005152:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005156:	e037      	b.n	80051c8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0204 	orr.w	r2, r2, #4
 8005168:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800516c:	e02c      	b.n	80051c8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0208 	orr.w	r2, r2, #8
 800517e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005182:	e021      	b.n	80051c8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0210 	orr.w	r2, r2, #16
 8005194:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8005198:	e016      	b.n	80051c8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0220 	orr.w	r2, r2, #32
 80051aa:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80051ae:	e00b      	b.n	80051c8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051c0:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80051c4:	e000      	b.n	80051c8 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    default:
      break;
 80051c6:	bf00      	nop
  }
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef *hhrtim)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80051e4:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80051ee:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00c      	beq.n	8005214 <HRTIM_HRTIM_ISR+0x40>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d007      	beq.n	8005214 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2201      	movs	r2, #1
 800520a:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff fa9a 	bl	8004748 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00c      	beq.n	8005238 <HRTIM_HRTIM_ISR+0x64>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d007      	beq.n	8005238 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2202      	movs	r2, #2
 800522e:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff fa92 	bl	800475c <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00c      	beq.n	800525c <HRTIM_HRTIM_ISR+0x88>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	d007      	beq.n	800525c <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2204      	movs	r2, #4
 8005252:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7ff fa8a 	bl	8004770 <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00c      	beq.n	8005280 <HRTIM_HRTIM_ISR+0xac>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f003 0308 	and.w	r3, r3, #8
 800526c:	2b00      	cmp	r3, #0
 800526e:	d007      	beq.n	8005280 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2208      	movs	r2, #8
 8005276:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7ff fa82 	bl	8004784 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 0310 	and.w	r3, r3, #16
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00c      	beq.n	80052a4 <HRTIM_HRTIM_ISR+0xd0>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	2b00      	cmp	r3, #0
 8005292:	d007      	beq.n	80052a4 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2210      	movs	r2, #16
 800529a:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7ff fa7a 	bl	8004798 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 6 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00c      	beq.n	80052c8 <HRTIM_HRTIM_ISR+0xf4>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT6) != (uint32_t)RESET)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d007      	beq.n	80052c8 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2240      	movs	r2, #64	@ 0x40
 80052be:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 6 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault6Callback(hhrtim);
#else
      HAL_HRTIM_Fault6Callback(hhrtim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7ff fa72 	bl	80047ac <HAL_HRTIM_Fault6Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00c      	beq.n	80052ec <HRTIM_HRTIM_ISR+0x118>
  {
    if ((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f003 0320 	and.w	r3, r3, #32
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d007      	beq.n	80052ec <HRTIM_HRTIM_ISR+0x118>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7ff fa6a 	bl	80047c0 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80052ec:	bf00      	nop
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HRTIM_Master_ISR>:
  * @brief  Master timer interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef *hhrtim)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8005304:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 800530e:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	60bb      	str	r3, [r7, #8]

  /* DLL calibration ready event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d015      	beq.n	8005356 <HRTIM_Master_ISR+0x62>
  {
    if ((uint32_t)(ierits & HRTIM_IT_DLLRDY) != (uint32_t)RESET)
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d010      	beq.n	8005356 <HRTIM_Master_ISR+0x62>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800533c:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Set HRTIM State */
      hhrtim->State = HAL_HRTIM_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process unlocked */
      __HAL_UNLOCK(hhrtim);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DLLCalibrationReadyCallback(hhrtim);
#else
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7ff fa3f 	bl	80047d4 <HAL_HRTIM_DLLCalibrationReadyCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Burst mode period event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00d      	beq.n	800537c <HRTIM_Master_ISR+0x88>
  {
    if ((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d008      	beq.n	800537c <HRTIM_Master_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005372:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff fa36 	bl	80047e8 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00c      	beq.n	80053a0 <HRTIM_Master_ISR+0xac>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d007      	beq.n	80053a0 <HRTIM_Master_ISR+0xac>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2201      	movs	r2, #1
 8005396:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005398:	2106      	movs	r1, #6
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff fa4e 	bl	800483c <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00c      	beq.n	80053c4 <HRTIM_Master_ISR+0xd0>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <HRTIM_Master_ISR+0xd0>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2202      	movs	r2, #2
 80053ba:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80053bc:	2106      	movs	r1, #6
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7ff fa47 	bl	8004852 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00c      	beq.n	80053e8 <HRTIM_Master_ISR+0xf4>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d007      	beq.n	80053e8 <HRTIM_Master_ISR+0xf4>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2204      	movs	r2, #4
 80053de:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80053e0:	2106      	movs	r1, #6
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7ff fa40 	bl	8004868 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00c      	beq.n	800540c <HRTIM_Master_ISR+0x118>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d007      	beq.n	800540c <HRTIM_Master_ISR+0x118>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2208      	movs	r2, #8
 8005402:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005404:	2106      	movs	r1, #6
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff fa39 	bl	800487e <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f003 0310 	and.w	r3, r3, #16
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00c      	beq.n	8005430 <HRTIM_Master_ISR+0x13c>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f003 0310 	and.w	r3, r3, #16
 800541c:	2b00      	cmp	r3, #0
 800541e:	d007      	beq.n	8005430 <HRTIM_Master_ISR+0x13c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2210      	movs	r2, #16
 8005426:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8005428:	2106      	movs	r1, #6
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7ff f9fb 	bl	8004826 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f003 0320 	and.w	r3, r3, #32
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00b      	beq.n	8005452 <HRTIM_Master_ISR+0x15e>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f003 0320 	and.w	r3, r3, #32
 8005440:	2b00      	cmp	r3, #0
 8005442:	d006      	beq.n	8005452 <HRTIM_Master_ISR+0x15e>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2220      	movs	r2, #32
 800544a:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff f9d5 	bl	80047fc <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00c      	beq.n	8005476 <HRTIM_Master_ISR+0x182>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <HRTIM_Master_ISR+0x182>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2240      	movs	r2, #64	@ 0x40
 800546c:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800546e:	2106      	movs	r1, #6
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff f9cd 	bl	8004810 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8005476:	bf00      	nop
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef *hhrtim,
                            uint32_t TimerIdx)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b084      	sub	sp, #16
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
 8005486:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	3301      	adds	r3, #1
 8005490:	01db      	lsls	r3, r3, #7
 8005492:	4413      	add	r3, r2
 8005494:	3304      	adds	r3, #4
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	01db      	lsls	r3, r3, #7
 80054a2:	4413      	add	r3, r2
 80054a4:	338c      	adds	r3, #140	@ 0x8c
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d010      	beq.n	80054d6 <HRTIM_Timer_ISR+0x58>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00b      	beq.n	80054d6 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	01db      	lsls	r3, r3, #7
 80054c6:	4413      	add	r3, r2
 80054c8:	3388      	adds	r3, #136	@ 0x88
 80054ca:	2201      	movs	r2, #1
 80054cc:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 80054ce:	6839      	ldr	r1, [r7, #0]
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7ff f9b3 	bl	800483c <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d010      	beq.n	8005502 <HRTIM_Timer_ISR+0x84>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00b      	beq.n	8005502 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	01db      	lsls	r3, r3, #7
 80054f2:	4413      	add	r3, r2
 80054f4:	3388      	adds	r3, #136	@ 0x88
 80054f6:	2202      	movs	r2, #2
 80054f8:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 80054fa:	6839      	ldr	r1, [r7, #0]
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff f9a8 	bl	8004852 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d010      	beq.n	800552e <HRTIM_Timer_ISR+0xb0>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00b      	beq.n	800552e <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	01db      	lsls	r3, r3, #7
 800551e:	4413      	add	r3, r2
 8005520:	3388      	adds	r3, #136	@ 0x88
 8005522:	2204      	movs	r2, #4
 8005524:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8005526:	6839      	ldr	r1, [r7, #0]
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff f99d 	bl	8004868 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f003 0308 	and.w	r3, r3, #8
 8005534:	2b00      	cmp	r3, #0
 8005536:	d010      	beq.n	800555a <HRTIM_Timer_ISR+0xdc>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00b      	beq.n	800555a <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	01db      	lsls	r3, r3, #7
 800554a:	4413      	add	r3, r2
 800554c:	3388      	adds	r3, #136	@ 0x88
 800554e:	2208      	movs	r2, #8
 8005550:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8005552:	6839      	ldr	r1, [r7, #0]
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7ff f992 	bl	800487e <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f003 0310 	and.w	r3, r3, #16
 8005560:	2b00      	cmp	r3, #0
 8005562:	d010      	beq.n	8005586 <HRTIM_Timer_ISR+0x108>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f003 0310 	and.w	r3, r3, #16
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	01db      	lsls	r3, r3, #7
 8005576:	4413      	add	r3, r2
 8005578:	3388      	adds	r3, #136	@ 0x88
 800557a:	2210      	movs	r2, #16
 800557c:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 800557e:	6839      	ldr	r1, [r7, #0]
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7ff f950 	bl	8004826 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800558c:	2b00      	cmp	r3, #0
 800558e:	d010      	beq.n	80055b2 <HRTIM_Timer_ISR+0x134>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00b      	beq.n	80055b2 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	01db      	lsls	r3, r3, #7
 80055a2:	4413      	add	r3, r2
 80055a4:	3388      	adds	r3, #136	@ 0x88
 80055a6:	2240      	movs	r2, #64	@ 0x40
 80055a8:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 80055aa:	6839      	ldr	r1, [r7, #0]
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff f92f 	bl	8004810 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d010      	beq.n	80055de <HRTIM_Timer_ISR+0x160>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00b      	beq.n	80055de <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	01db      	lsls	r3, r3, #7
 80055ce:	4413      	add	r3, r2
 80055d0:	3388      	adds	r3, #136	@ 0x88
 80055d2:	2280      	movs	r2, #128	@ 0x80
 80055d4:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7ff f95b 	bl	8004894 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d011      	beq.n	800560c <HRTIM_Timer_ISR+0x18e>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00c      	beq.n	800560c <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	01db      	lsls	r3, r3, #7
 80055fa:	4413      	add	r3, r2
 80055fc:	3388      	adds	r3, #136	@ 0x88
 80055fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005602:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8005604:	6839      	ldr	r1, [r7, #0]
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7ff f94f 	bl	80048aa <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005612:	2b00      	cmp	r3, #0
 8005614:	d011      	beq.n	800563a <HRTIM_Timer_ISR+0x1bc>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00c      	beq.n	800563a <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	01db      	lsls	r3, r3, #7
 8005628:	4413      	add	r3, r2
 800562a:	3388      	adds	r3, #136	@ 0x88
 800562c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005630:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8005632:	6839      	ldr	r1, [r7, #0]
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff f959 	bl	80048ec <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005640:	2b00      	cmp	r3, #0
 8005642:	d011      	beq.n	8005668 <HRTIM_Timer_ISR+0x1ea>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00c      	beq.n	8005668 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	01db      	lsls	r3, r3, #7
 8005656:	4413      	add	r3, r2
 8005658:	3388      	adds	r3, #136	@ 0x88
 800565a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800565e:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8005660:	6839      	ldr	r1, [r7, #0]
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7ff f94d 	bl	8004902 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800566e:	2b00      	cmp	r3, #0
 8005670:	d011      	beq.n	8005696 <HRTIM_Timer_ISR+0x218>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00c      	beq.n	8005696 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	01db      	lsls	r3, r3, #7
 8005684:	4413      	add	r3, r2
 8005686:	3388      	adds	r3, #136	@ 0x88
 8005688:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800568c:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff f941 	bl	8004918 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d011      	beq.n	80056c4 <HRTIM_Timer_ISR+0x246>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00c      	beq.n	80056c4 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	01db      	lsls	r3, r3, #7
 80056b2:	4413      	add	r3, r2
 80056b4:	3388      	adds	r3, #136	@ 0x88
 80056b6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80056ba:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 80056bc:	6839      	ldr	r1, [r7, #0]
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff f935 	bl	800492e <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d011      	beq.n	80056f2 <HRTIM_Timer_ISR+0x274>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00c      	beq.n	80056f2 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	01db      	lsls	r3, r3, #7
 80056e0:	4413      	add	r3, r2
 80056e2:	3388      	adds	r3, #136	@ 0x88
 80056e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80056e8:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 80056ea:	6839      	ldr	r1, [r7, #0]
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7ff f8f2 	bl	80048d6 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d011      	beq.n	8005720 <HRTIM_Timer_ISR+0x2a2>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00c      	beq.n	8005720 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	01db      	lsls	r3, r3, #7
 800570e:	4413      	add	r3, r2
 8005710:	3388      	adds	r3, #136	@ 0x88
 8005712:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005716:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8005718:	6839      	ldr	r1, [r7, #0]
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7ff f8d0 	bl	80048c0 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8005720:	bf00      	nop
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e0c0      	b.n	80058bc <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d106      	bne.n	8005754 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fb ff68 	bl	8001624 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2203      	movs	r2, #3
 8005758:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4618      	mov	r0, r3
 8005762:	f003 ff0c 	bl	800957e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005766:	2300      	movs	r3, #0
 8005768:	73fb      	strb	r3, [r7, #15]
 800576a:	e03e      	b.n	80057ea <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800576c:	7bfa      	ldrb	r2, [r7, #15]
 800576e:	6879      	ldr	r1, [r7, #4]
 8005770:	4613      	mov	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	440b      	add	r3, r1
 800577a:	3311      	adds	r3, #17
 800577c:	2201      	movs	r2, #1
 800577e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005780:	7bfa      	ldrb	r2, [r7, #15]
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	440b      	add	r3, r1
 800578e:	3310      	adds	r3, #16
 8005790:	7bfa      	ldrb	r2, [r7, #15]
 8005792:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005794:	7bfa      	ldrb	r2, [r7, #15]
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	440b      	add	r3, r1
 80057a2:	3313      	adds	r3, #19
 80057a4:	2200      	movs	r2, #0
 80057a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80057a8:	7bfa      	ldrb	r2, [r7, #15]
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	4613      	mov	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	440b      	add	r3, r1
 80057b6:	3320      	adds	r3, #32
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80057bc:	7bfa      	ldrb	r2, [r7, #15]
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	440b      	add	r3, r1
 80057ca:	3324      	adds	r3, #36	@ 0x24
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	4613      	mov	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	440b      	add	r3, r1
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	3301      	adds	r3, #1
 80057e8:	73fb      	strb	r3, [r7, #15]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	791b      	ldrb	r3, [r3, #4]
 80057ee:	7bfa      	ldrb	r2, [r7, #15]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d3bb      	bcc.n	800576c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057f4:	2300      	movs	r3, #0
 80057f6:	73fb      	strb	r3, [r7, #15]
 80057f8:	e044      	b.n	8005884 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80057fa:	7bfa      	ldrb	r2, [r7, #15]
 80057fc:	6879      	ldr	r1, [r7, #4]
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	440b      	add	r3, r1
 8005808:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800580c:	2200      	movs	r2, #0
 800580e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005810:	7bfa      	ldrb	r2, [r7, #15]
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	440b      	add	r3, r1
 800581e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005822:	7bfa      	ldrb	r2, [r7, #15]
 8005824:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005826:	7bfa      	ldrb	r2, [r7, #15]
 8005828:	6879      	ldr	r1, [r7, #4]
 800582a:	4613      	mov	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	440b      	add	r3, r1
 8005834:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8005838:	2200      	movs	r2, #0
 800583a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800583c:	7bfa      	ldrb	r2, [r7, #15]
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	4613      	mov	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	440b      	add	r3, r1
 800584a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005852:	7bfa      	ldrb	r2, [r7, #15]
 8005854:	6879      	ldr	r1, [r7, #4]
 8005856:	4613      	mov	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	440b      	add	r3, r1
 8005860:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005868:	7bfa      	ldrb	r2, [r7, #15]
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	4613      	mov	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	440b      	add	r3, r1
 8005876:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800587e:	7bfb      	ldrb	r3, [r7, #15]
 8005880:	3301      	adds	r3, #1
 8005882:	73fb      	strb	r3, [r7, #15]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	791b      	ldrb	r3, [r3, #4]
 8005888:	7bfa      	ldrb	r2, [r7, #15]
 800588a:	429a      	cmp	r2, r3
 800588c:	d3b5      	bcc.n	80057fa <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6818      	ldr	r0, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3304      	adds	r3, #4
 8005896:	e893 0006 	ldmia.w	r3, {r1, r2}
 800589a:	f003 fe8b 	bl	80095b4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	7a9b      	ldrb	r3, [r3, #10]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d102      	bne.n	80058ba <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f001 fa26 	bl	8006d06 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f004 fc50 	bl	800a176 <USB_ReadInterrupts>
 80058d6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f983 	bl	8005bee <PCD_EP_ISR_Handler>

    return;
 80058e8:	e110      	b.n	8005b0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d013      	beq.n	800591c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005906:	b292      	uxth	r2, r2
 8005908:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f92c 	bl	8005b6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005912:	2100      	movs	r1, #0
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f946 	bl	8005ba6 <HAL_PCD_SetAddress>

    return;
 800591a:	e0f7      	b.n	8005b0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00c      	beq.n	8005940 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800592e:	b29a      	uxth	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005938:	b292      	uxth	r2, r2
 800593a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800593e:	e0e5      	b.n	8005b0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00c      	beq.n	8005964 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005952:	b29a      	uxth	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800595c:	b292      	uxth	r2, r2
 800595e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005962:	e0d3      	b.n	8005b0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d034      	beq.n	80059d8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005976:	b29a      	uxth	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0204 	bic.w	r2, r2, #4
 8005980:	b292      	uxth	r2, r2
 8005982:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800598e:	b29a      	uxth	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0208 	bic.w	r2, r2, #8
 8005998:	b292      	uxth	r2, r2
 800599a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d107      	bne.n	80059b8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80059b0:	2100      	movs	r1, #0
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f001 f9d1 	bl	8006d5a <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f8ea 	bl	8005b92 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80059d0:	b292      	uxth	r2, r2
 80059d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80059d6:	e099      	b.n	8005b0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d027      	beq.n	8005a32 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f042 0208 	orr.w	r2, r2, #8
 80059f4:	b292      	uxth	r2, r2
 80059f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a0c:	b292      	uxth	r2, r2
 8005a0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 0204 	orr.w	r2, r2, #4
 8005a24:	b292      	uxth	r2, r2
 8005a26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f8a7 	bl	8005b7e <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005a30:	e06c      	b.n	8005b0c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d040      	beq.n	8005abe <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a4e:	b292      	uxth	r2, r2
 8005a50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d12b      	bne.n	8005ab6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f042 0204 	orr.w	r2, r2, #4
 8005a70:	b292      	uxth	r2, r2
 8005a72:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 0208 	orr.w	r2, r2, #8
 8005a88:	b292      	uxth	r2, r2
 8005a8a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	089b      	lsrs	r3, r3, #2
 8005aa2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005aac:	2101      	movs	r1, #1
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f001 f953 	bl	8006d5a <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005ab4:	e02a      	b.n	8005b0c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f861 	bl	8005b7e <HAL_PCD_SuspendCallback>
    return;
 8005abc:	e026      	b.n	8005b0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00f      	beq.n	8005ae8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005ada:	b292      	uxth	r2, r2
 8005adc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f838 	bl	8005b56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005ae6:	e011      	b.n	8005b0c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00c      	beq.n	8005b0c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b04:	b292      	uxth	r2, r2
 8005b06:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005b0a:	bf00      	nop
  }
}
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	460b      	mov	r3, r1
 8005b34:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8005b36:	bf00      	nop
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b082      	sub	sp, #8
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	460b      	mov	r3, r1
 8005bb0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <HAL_PCD_SetAddress+0x1a>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e012      	b.n	8005be6 <HAL_PCD_SetAddress+0x40>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	78fa      	ldrb	r2, [r7, #3]
 8005bcc:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	78fa      	ldrb	r2, [r7, #3]
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f004 fab9 	bl	800a14e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b092      	sub	sp, #72	@ 0x48
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005bf6:	e333      	b.n	8006260 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c00:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005c02:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8005c0e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f040 8108 	bne.w	8005e28 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005c18:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005c1a:	f003 0310 	and.w	r3, r3, #16
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d14c      	bne.n	8005cbc <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c32:	813b      	strh	r3, [r7, #8]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	893b      	ldrh	r3, [r7, #8]
 8005c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	3310      	adds	r3, #16
 8005c4a:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	461a      	mov	r2, r3
 8005c58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	4413      	add	r3, r2
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6812      	ldr	r2, [r2, #0]
 8005c64:	4413      	add	r3, r2
 8005c66:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c72:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005c74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c76:	695a      	ldr	r2, [r3, #20]
 8005c78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	441a      	add	r2, r3
 8005c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c80:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005c82:	2100      	movs	r1, #0
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7ff ff50 	bl	8005b2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	7b1b      	ldrb	r3, [r3, #12]
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 82e5 	beq.w	8006260 <PCD_EP_ISR_Handler+0x672>
 8005c96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f040 82e0 	bne.w	8006260 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	7b1b      	ldrb	r3, [r3, #12]
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	731a      	strb	r2, [r3, #12]
 8005cba:	e2d1      	b.n	8006260 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005cc2:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005ccc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005cce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d032      	beq.n	8005d3c <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	4413      	add	r3, r2
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6812      	ldr	r2, [r2, #0]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005cfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cfc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6818      	ldr	r0, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005d08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d0a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005d0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d0e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	f004 fa82 	bl	800a21a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005d22:	4013      	ands	r3, r2
 8005d24:	817b      	strh	r3, [r7, #10]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	897a      	ldrh	r2, [r7, #10]
 8005d2c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d30:	b292      	uxth	r2, r2
 8005d32:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7ff ff04 	bl	8005b42 <HAL_PCD_SetupStageCallback>
 8005d3a:	e291      	b.n	8006260 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005d3c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f280 828d 	bge.w	8006260 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005d52:	4013      	ands	r3, r2
 8005d54:	81fb      	strh	r3, [r7, #14]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	89fa      	ldrh	r2, [r7, #14]
 8005d5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d60:	b292      	uxth	r2, r2
 8005d62:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	461a      	mov	r2, r3
 8005d70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	4413      	add	r3, r2
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6812      	ldr	r2, [r2, #0]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d8a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d8e:	69db      	ldr	r3, [r3, #28]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d019      	beq.n	8005dc8 <PCD_EP_ISR_Handler+0x1da>
 8005d94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d015      	beq.n	8005dc8 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6818      	ldr	r0, [r3, #0]
 8005da0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005da2:	6959      	ldr	r1, [r3, #20]
 8005da4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005da6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005daa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	f004 fa34 	bl	800a21a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005db2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005db4:	695a      	ldr	r2, [r3, #20]
 8005db6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	441a      	add	r2, r3
 8005dbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dbe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff fea5 	bl	8005b12 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005dd0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005dd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f040 8242 	bne.w	8006260 <PCD_EP_ISR_Handler+0x672>
 8005ddc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005dde:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005de2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005de6:	f000 823b 	beq.w	8006260 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dfa:	81bb      	strh	r3, [r7, #12]
 8005dfc:	89bb      	ldrh	r3, [r7, #12]
 8005dfe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005e02:	81bb      	strh	r3, [r7, #12]
 8005e04:	89bb      	ldrh	r3, [r7, #12]
 8005e06:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e0a:	81bb      	strh	r3, [r7, #12]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	89bb      	ldrh	r3, [r7, #12]
 8005e12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	8013      	strh	r3, [r2, #0]
 8005e26:	e21b      	b.n	8006260 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005e3a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f280 80f1 	bge.w	8006026 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005e6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005e72:	b292      	uxth	r2, r2
 8005e74:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005e76:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	4413      	add	r3, r2
 8005e8a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005e8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e8e:	7b1b      	ldrb	r3, [r3, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d123      	bne.n	8005edc <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	4413      	add	r3, r2
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6812      	ldr	r2, [r2, #0]
 8005eac:	4413      	add	r3, r2
 8005eae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eb8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8005ebc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 808b 	beq.w	8005fdc <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ecc:	6959      	ldr	r1, [r3, #20]
 8005ece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ed0:	88da      	ldrh	r2, [r3, #6]
 8005ed2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005ed6:	f004 f9a0 	bl	800a21a <USB_ReadPMA>
 8005eda:	e07f      	b.n	8005fdc <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005edc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ede:	78db      	ldrb	r3, [r3, #3]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d109      	bne.n	8005ef8 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005ee4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f9c6 	bl	800627c <HAL_PCD_EP_DB_Receive>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005ef6:	e071      	b.n	8005fdc <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	461a      	mov	r2, r3
 8005efe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f12:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	441a      	add	r2, r3
 8005f22:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005f24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d022      	beq.n	8005f98 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	4413      	add	r3, r2
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	6812      	ldr	r2, [r2, #0]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f76:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8005f7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d02c      	beq.n	8005fdc <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f88:	6959      	ldr	r1, [r3, #20]
 8005f8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f8c:	891a      	ldrh	r2, [r3, #8]
 8005f8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005f92:	f004 f942 	bl	800a21a <USB_ReadPMA>
 8005f96:	e021      	b.n	8005fdc <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	00db      	lsls	r3, r3, #3
 8005faa:	4413      	add	r3, r2
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6812      	ldr	r2, [r2, #0]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fbc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8005fc0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d009      	beq.n	8005fdc <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6818      	ldr	r0, [r3, #0]
 8005fcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fce:	6959      	ldr	r1, [r3, #20]
 8005fd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fd2:	895a      	ldrh	r2, [r3, #10]
 8005fd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005fd8:	f004 f91f 	bl	800a21a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fde:	69da      	ldr	r2, [r3, #28]
 8005fe0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005fe4:	441a      	add	r2, r3
 8005fe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fe8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fec:	695a      	ldr	r2, [r3, #20]
 8005fee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005ff2:	441a      	add	r2, r3
 8005ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ff6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005ff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d005      	beq.n	800600c <PCD_EP_ISR_Handler+0x41e>
 8006000:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8006004:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	429a      	cmp	r2, r3
 800600a:	d206      	bcs.n	800601a <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800600c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	4619      	mov	r1, r3
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff fd7d 	bl	8005b12 <HAL_PCD_DataOutStageCallback>
 8006018:	e005      	b.n	8006026 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006020:	4618      	mov	r0, r3
 8006022:	f003 fae5 	bl	80095f0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006026:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 8117 	beq.w	8006260 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8006032:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006036:	4613      	mov	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	3310      	adds	r3, #16
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	4413      	add	r3, r2
 8006044:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	b29b      	uxth	r3, r3
 8006058:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800605c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006060:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	441a      	add	r2, r3
 8006070:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800607a:	b29b      	uxth	r3, r3
 800607c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800607e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006080:	78db      	ldrb	r3, [r3, #3]
 8006082:	2b01      	cmp	r3, #1
 8006084:	f040 80a1 	bne.w	80061ca <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8006088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800608a:	2200      	movs	r2, #0
 800608c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800608e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006090:	7b1b      	ldrb	r3, [r3, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 8092 	beq.w	80061bc <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006098:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800609a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d046      	beq.n	8006130 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80060a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060a4:	785b      	ldrb	r3, [r3, #1]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d126      	bne.n	80060f8 <PCD_EP_ISR_Handler+0x50a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	461a      	mov	r2, r3
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	4413      	add	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	00da      	lsls	r2, r3, #3
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	4413      	add	r3, r2
 80060cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80060d0:	613b      	str	r3, [r7, #16]
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060dc:	b29a      	uxth	r2, r3
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	801a      	strh	r2, [r3, #0]
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	801a      	strh	r2, [r3, #0]
 80060f6:	e061      	b.n	80061bc <PCD_EP_ISR_Handler+0x5ce>
 80060f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060fa:	785b      	ldrb	r3, [r3, #1]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d15d      	bne.n	80061bc <PCD_EP_ISR_Handler+0x5ce>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	61fb      	str	r3, [r7, #28]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800610e:	b29b      	uxth	r3, r3
 8006110:	461a      	mov	r2, r3
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	4413      	add	r3, r2
 8006116:	61fb      	str	r3, [r7, #28]
 8006118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	00da      	lsls	r2, r3, #3
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	4413      	add	r3, r2
 8006122:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006126:	61bb      	str	r3, [r7, #24]
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	2200      	movs	r2, #0
 800612c:	801a      	strh	r2, [r3, #0]
 800612e:	e045      	b.n	80061bc <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006138:	785b      	ldrb	r3, [r3, #1]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d126      	bne.n	800618c <PCD_EP_ISR_Handler+0x59e>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	627b      	str	r3, [r7, #36]	@ 0x24
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800614c:	b29b      	uxth	r3, r3
 800614e:	461a      	mov	r2, r3
 8006150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006152:	4413      	add	r3, r2
 8006154:	627b      	str	r3, [r7, #36]	@ 0x24
 8006156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	00da      	lsls	r2, r3, #3
 800615c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615e:	4413      	add	r3, r2
 8006160:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006164:	623b      	str	r3, [r7, #32]
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006170:	b29a      	uxth	r2, r3
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	801a      	strh	r2, [r3, #0]
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006184:	b29a      	uxth	r2, r3
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	801a      	strh	r2, [r3, #0]
 800618a:	e017      	b.n	80061bc <PCD_EP_ISR_Handler+0x5ce>
 800618c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800618e:	785b      	ldrb	r3, [r3, #1]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d113      	bne.n	80061bc <PCD_EP_ISR_Handler+0x5ce>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800619c:	b29b      	uxth	r3, r3
 800619e:	461a      	mov	r2, r3
 80061a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a2:	4413      	add	r3, r2
 80061a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	00da      	lsls	r2, r3, #3
 80061ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ae:	4413      	add	r3, r2
 80061b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80061b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b8:	2200      	movs	r2, #0
 80061ba:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80061bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	4619      	mov	r1, r3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff fcb1 	bl	8005b2a <HAL_PCD_DataInStageCallback>
 80061c8:	e04a      	b.n	8006260 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80061ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80061cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d13f      	bne.n	8006254 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061dc:	b29b      	uxth	r3, r3
 80061de:	461a      	mov	r2, r3
 80061e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	00db      	lsls	r3, r3, #3
 80061e6:	4413      	add	r3, r2
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6812      	ldr	r2, [r2, #0]
 80061ec:	4413      	add	r3, r2
 80061ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80061f2:	881b      	ldrh	r3, [r3, #0]
 80061f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061f8:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 80061fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061fc:	699a      	ldr	r2, [r3, #24]
 80061fe:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006200:	429a      	cmp	r2, r3
 8006202:	d906      	bls.n	8006212 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8006204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006206:	699a      	ldr	r2, [r3, #24]
 8006208:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800620a:	1ad2      	subs	r2, r2, r3
 800620c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800620e:	619a      	str	r2, [r3, #24]
 8006210:	e002      	b.n	8006218 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8006212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006214:	2200      	movs	r2, #0
 8006216:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d106      	bne.n	800622e <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	4619      	mov	r1, r3
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7ff fc7f 	bl	8005b2a <HAL_PCD_DataInStageCallback>
 800622c:	e018      	b.n	8006260 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800622e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006230:	695a      	ldr	r2, [r3, #20]
 8006232:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006234:	441a      	add	r2, r3
 8006236:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006238:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800623a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800623c:	69da      	ldr	r2, [r3, #28]
 800623e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006240:	441a      	add	r2, r3
 8006242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006244:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800624c:	4618      	mov	r0, r3
 800624e:	f003 f9cf 	bl	80095f0 <USB_EPStartXfer>
 8006252:	e005      	b.n	8006260 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006254:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006256:	461a      	mov	r2, r3
 8006258:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f917 	bl	800648e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006268:	b29b      	uxth	r3, r3
 800626a:	b21b      	sxth	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	f6ff acc3 	blt.w	8005bf8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3748      	adds	r7, #72	@ 0x48
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	4613      	mov	r3, r2
 8006288:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800628a:	88fb      	ldrh	r3, [r7, #6]
 800628c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d07c      	beq.n	800638e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800629c:	b29b      	uxth	r3, r3
 800629e:	461a      	mov	r2, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	4413      	add	r3, r2
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	6812      	ldr	r2, [r2, #0]
 80062ac:	4413      	add	r3, r2
 80062ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062b8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	699a      	ldr	r2, [r3, #24]
 80062be:	8b7b      	ldrh	r3, [r7, #26]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d306      	bcc.n	80062d2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	699a      	ldr	r2, [r3, #24]
 80062c8:	8b7b      	ldrh	r3, [r7, #26]
 80062ca:	1ad2      	subs	r2, r2, r3
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	619a      	str	r2, [r3, #24]
 80062d0:	e002      	b.n	80062d8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2200      	movs	r2, #0
 80062d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d123      	bne.n	8006328 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062fa:	833b      	strh	r3, [r7, #24]
 80062fc:	8b3b      	ldrh	r3, [r7, #24]
 80062fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006302:	833b      	strh	r3, [r7, #24]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	461a      	mov	r2, r3
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	441a      	add	r2, r3
 8006312:	8b3b      	ldrh	r3, [r7, #24]
 8006314:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006318:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800631c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006324:	b29b      	uxth	r3, r3
 8006326:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006328:	88fb      	ldrh	r3, [r7, #6]
 800632a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800632e:	2b00      	cmp	r3, #0
 8006330:	d01f      	beq.n	8006372 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	b29b      	uxth	r3, r3
 8006344:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006348:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800634c:	82fb      	strh	r3, [r7, #22]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	441a      	add	r2, r3
 800635c:	8afb      	ldrh	r3, [r7, #22]
 800635e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006362:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800636a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800636e:	b29b      	uxth	r3, r3
 8006370:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006372:	8b7b      	ldrh	r3, [r7, #26]
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 8085 	beq.w	8006484 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6818      	ldr	r0, [r3, #0]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	6959      	ldr	r1, [r3, #20]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	891a      	ldrh	r2, [r3, #8]
 8006386:	8b7b      	ldrh	r3, [r7, #26]
 8006388:	f003 ff47 	bl	800a21a <USB_ReadPMA>
 800638c:	e07a      	b.n	8006484 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006396:	b29b      	uxth	r3, r3
 8006398:	461a      	mov	r2, r3
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	4413      	add	r3, r2
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	6812      	ldr	r2, [r2, #0]
 80063a6:	4413      	add	r3, r2
 80063a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063b2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	699a      	ldr	r2, [r3, #24]
 80063b8:	8b7b      	ldrh	r3, [r7, #26]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d306      	bcc.n	80063cc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	699a      	ldr	r2, [r3, #24]
 80063c2:	8b7b      	ldrh	r3, [r7, #26]
 80063c4:	1ad2      	subs	r2, r2, r3
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	619a      	str	r2, [r3, #24]
 80063ca:	e002      	b.n	80063d2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2200      	movs	r2, #0
 80063d0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d123      	bne.n	8006422 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	461a      	mov	r2, r3
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f4:	83fb      	strh	r3, [r7, #30]
 80063f6:	8bfb      	ldrh	r3, [r7, #30]
 80063f8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80063fc:	83fb      	strh	r3, [r7, #30]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	461a      	mov	r2, r3
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	441a      	add	r2, r3
 800640c:	8bfb      	ldrh	r3, [r7, #30]
 800640e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006412:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006416:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800641a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800641e:	b29b      	uxth	r3, r3
 8006420:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006422:	88fb      	ldrh	r3, [r7, #6]
 8006424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006428:	2b00      	cmp	r3, #0
 800642a:	d11f      	bne.n	800646c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	881b      	ldrh	r3, [r3, #0]
 800643c:	b29b      	uxth	r3, r3
 800643e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006446:	83bb      	strh	r3, [r7, #28]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	461a      	mov	r2, r3
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	441a      	add	r2, r3
 8006456:	8bbb      	ldrh	r3, [r7, #28]
 8006458:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800645c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006460:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006464:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006468:	b29b      	uxth	r3, r3
 800646a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800646c:	8b7b      	ldrh	r3, [r7, #26]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d008      	beq.n	8006484 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6818      	ldr	r0, [r3, #0]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	6959      	ldr	r1, [r3, #20]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	895a      	ldrh	r2, [r3, #10]
 800647e:	8b7b      	ldrh	r3, [r7, #26]
 8006480:	f003 fecb 	bl	800a21a <USB_ReadPMA>
    }
  }

  return count;
 8006484:	8b7b      	ldrh	r3, [r7, #26]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3720      	adds	r7, #32
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b0a6      	sub	sp, #152	@ 0x98
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	4613      	mov	r3, r2
 800649a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800649c:	88fb      	ldrh	r3, [r7, #6]
 800649e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 81f7 	beq.w	8006896 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	461a      	mov	r2, r3
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	4413      	add	r3, r2
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	6812      	ldr	r2, [r2, #0]
 80064c0:	4413      	add	r3, r2
 80064c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064cc:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	699a      	ldr	r2, [r3, #24]
 80064d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80064d8:	429a      	cmp	r2, r3
 80064da:	d907      	bls.n	80064ec <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	699a      	ldr	r2, [r3, #24]
 80064e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80064e4:	1ad2      	subs	r2, r2, r3
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	619a      	str	r2, [r3, #24]
 80064ea:	e002      	b.n	80064f2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2200      	movs	r2, #0
 80064f0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f040 80e1 	bne.w	80066be <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	785b      	ldrb	r3, [r3, #1]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d126      	bne.n	8006552 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	633b      	str	r3, [r7, #48]	@ 0x30
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006512:	b29b      	uxth	r3, r3
 8006514:	461a      	mov	r2, r3
 8006516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006518:	4413      	add	r3, r2
 800651a:	633b      	str	r3, [r7, #48]	@ 0x30
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	00da      	lsls	r2, r3, #3
 8006522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006524:	4413      	add	r3, r2
 8006526:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800652a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800652c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	b29b      	uxth	r3, r3
 8006532:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006536:	b29a      	uxth	r2, r3
 8006538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800653a:	801a      	strh	r2, [r3, #0]
 800653c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	b29b      	uxth	r3, r3
 8006542:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006546:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800654a:	b29a      	uxth	r2, r3
 800654c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800654e:	801a      	strh	r2, [r3, #0]
 8006550:	e01a      	b.n	8006588 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	785b      	ldrb	r3, [r3, #1]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d116      	bne.n	8006588 <HAL_PCD_EP_DB_Transmit+0xfa>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006568:	b29b      	uxth	r3, r3
 800656a:	461a      	mov	r2, r3
 800656c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656e:	4413      	add	r3, r2
 8006570:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	00da      	lsls	r2, r3, #3
 8006578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657a:	4413      	add	r3, r2
 800657c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006580:	637b      	str	r3, [r7, #52]	@ 0x34
 8006582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006584:	2200      	movs	r2, #0
 8006586:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	785b      	ldrb	r3, [r3, #1]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d126      	bne.n	80065e4 <HAL_PCD_EP_DB_Transmit+0x156>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	623b      	str	r3, [r7, #32]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	461a      	mov	r2, r3
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	4413      	add	r3, r2
 80065ac:	623b      	str	r3, [r7, #32]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	00da      	lsls	r2, r3, #3
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	4413      	add	r3, r2
 80065b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80065bc:	61fb      	str	r3, [r7, #28]
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	801a      	strh	r2, [r3, #0]
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065dc:	b29a      	uxth	r2, r3
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	801a      	strh	r2, [r3, #0]
 80065e2:	e017      	b.n	8006614 <HAL_PCD_EP_DB_Transmit+0x186>
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	785b      	ldrb	r3, [r3, #1]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d113      	bne.n	8006614 <HAL_PCD_EP_DB_Transmit+0x186>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	461a      	mov	r2, r3
 80065f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fa:	4413      	add	r3, r2
 80065fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	00da      	lsls	r2, r3, #3
 8006604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006606:	4413      	add	r3, r2
 8006608:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800660c:	627b      	str	r3, [r7, #36]	@ 0x24
 800660e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006610:	2200      	movs	r2, #0
 8006612:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	78db      	ldrb	r3, [r3, #3]
 8006618:	2b02      	cmp	r3, #2
 800661a:	d123      	bne.n	8006664 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	b29b      	uxth	r3, r3
 800662e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006632:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006636:	837b      	strh	r3, [r7, #26]
 8006638:	8b7b      	ldrh	r3, [r7, #26]
 800663a:	f083 0320 	eor.w	r3, r3, #32
 800663e:	837b      	strh	r3, [r7, #26]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	441a      	add	r2, r3
 800664e:	8b7b      	ldrh	r3, [r7, #26]
 8006650:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006654:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006658:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800665c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006660:	b29b      	uxth	r3, r3
 8006662:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	4619      	mov	r1, r3
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f7ff fa5d 	bl	8005b2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006670:	88fb      	ldrh	r3, [r7, #6]
 8006672:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d01f      	beq.n	80066ba <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006690:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006694:	833b      	strh	r3, [r7, #24]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	461a      	mov	r2, r3
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	441a      	add	r2, r3
 80066a4:	8b3b      	ldrh	r3, [r7, #24]
 80066a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	e31f      	b.n	8006cfe <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80066be:	88fb      	ldrh	r3, [r7, #6]
 80066c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d021      	beq.n	800670c <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	461a      	mov	r2, r3
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	441a      	add	r2, r3
 80066f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80066f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006700:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006708:	b29b      	uxth	r3, r3
 800670a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006712:	2b01      	cmp	r3, #1
 8006714:	f040 82ca 	bne.w	8006cac <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	695a      	ldr	r2, [r3, #20]
 800671c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006720:	441a      	add	r2, r3
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	69da      	ldr	r2, [r3, #28]
 800672a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800672e:	441a      	add	r2, r3
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	6a1a      	ldr	r2, [r3, #32]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	429a      	cmp	r2, r3
 800673e:	d309      	bcc.n	8006754 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	6a1a      	ldr	r2, [r3, #32]
 800674a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800674c:	1ad2      	subs	r2, r2, r3
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	621a      	str	r2, [r3, #32]
 8006752:	e015      	b.n	8006780 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d107      	bne.n	800676c <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800675c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006760:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800676a:	e009      	b.n	8006780 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2200      	movs	r2, #0
 800677e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	785b      	ldrb	r3, [r3, #1]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d15f      	bne.n	8006848 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	643b      	str	r3, [r7, #64]	@ 0x40
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006796:	b29b      	uxth	r3, r3
 8006798:	461a      	mov	r2, r3
 800679a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800679c:	4413      	add	r3, r2
 800679e:	643b      	str	r3, [r7, #64]	@ 0x40
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	00da      	lsls	r2, r3, #3
 80067a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067a8:	4413      	add	r3, r2
 80067aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80067ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067be:	801a      	strh	r2, [r3, #0]
 80067c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10a      	bne.n	80067dc <HAL_PCD_EP_DB_Transmit+0x34e>
 80067c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067d8:	801a      	strh	r2, [r3, #0]
 80067da:	e051      	b.n	8006880 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80067dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80067de:	2b3e      	cmp	r3, #62	@ 0x3e
 80067e0:	d816      	bhi.n	8006810 <HAL_PCD_EP_DB_Transmit+0x382>
 80067e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80067e4:	085b      	lsrs	r3, r3, #1
 80067e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80067e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <HAL_PCD_EP_DB_Transmit+0x36a>
 80067f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067f4:	3301      	adds	r3, #1
 80067f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80067f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006800:	b29b      	uxth	r3, r3
 8006802:	029b      	lsls	r3, r3, #10
 8006804:	b29b      	uxth	r3, r3
 8006806:	4313      	orrs	r3, r2
 8006808:	b29a      	uxth	r2, r3
 800680a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800680c:	801a      	strh	r2, [r3, #0]
 800680e:	e037      	b.n	8006880 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006810:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006812:	095b      	lsrs	r3, r3, #5
 8006814:	653b      	str	r3, [r7, #80]	@ 0x50
 8006816:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006818:	f003 031f 	and.w	r3, r3, #31
 800681c:	2b00      	cmp	r3, #0
 800681e:	d102      	bne.n	8006826 <HAL_PCD_EP_DB_Transmit+0x398>
 8006820:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006822:	3b01      	subs	r3, #1
 8006824:	653b      	str	r3, [r7, #80]	@ 0x50
 8006826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	b29a      	uxth	r2, r3
 800682c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800682e:	b29b      	uxth	r3, r3
 8006830:	029b      	lsls	r3, r3, #10
 8006832:	b29b      	uxth	r3, r3
 8006834:	4313      	orrs	r3, r2
 8006836:	b29b      	uxth	r3, r3
 8006838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800683c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006840:	b29a      	uxth	r2, r3
 8006842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006844:	801a      	strh	r2, [r3, #0]
 8006846:	e01b      	b.n	8006880 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	785b      	ldrb	r3, [r3, #1]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d117      	bne.n	8006880 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800685e:	b29b      	uxth	r3, r3
 8006860:	461a      	mov	r2, r3
 8006862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006864:	4413      	add	r3, r2
 8006866:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	00da      	lsls	r2, r3, #3
 800686e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006870:	4413      	add	r3, r2
 8006872:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006876:	647b      	str	r3, [r7, #68]	@ 0x44
 8006878:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800687a:	b29a      	uxth	r2, r3
 800687c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800687e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6818      	ldr	r0, [r3, #0]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	6959      	ldr	r1, [r3, #20]
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	891a      	ldrh	r2, [r3, #8]
 800688c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800688e:	b29b      	uxth	r3, r3
 8006890:	f003 fc81 	bl	800a196 <USB_WritePMA>
 8006894:	e20a      	b.n	8006cac <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800689e:	b29b      	uxth	r3, r3
 80068a0:	461a      	mov	r2, r3
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	4413      	add	r3, r2
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	6812      	ldr	r2, [r2, #0]
 80068ae:	4413      	add	r3, r2
 80068b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068ba:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	699a      	ldr	r2, [r3, #24]
 80068c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d307      	bcc.n	80068da <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	699a      	ldr	r2, [r3, #24]
 80068ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80068d2:	1ad2      	subs	r2, r2, r3
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	619a      	str	r2, [r3, #24]
 80068d8:	e002      	b.n	80068e0 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2200      	movs	r2, #0
 80068de:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f040 80f6 	bne.w	8006ad6 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	785b      	ldrb	r3, [r3, #1]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d126      	bne.n	8006940 <HAL_PCD_EP_DB_Transmit+0x4b2>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006900:	b29b      	uxth	r3, r3
 8006902:	461a      	mov	r2, r3
 8006904:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006906:	4413      	add	r3, r2
 8006908:	677b      	str	r3, [r7, #116]	@ 0x74
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	00da      	lsls	r2, r3, #3
 8006910:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006912:	4413      	add	r3, r2
 8006914:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006918:	673b      	str	r3, [r7, #112]	@ 0x70
 800691a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	b29b      	uxth	r3, r3
 8006920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006924:	b29a      	uxth	r2, r3
 8006926:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006928:	801a      	strh	r2, [r3, #0]
 800692a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	b29b      	uxth	r3, r3
 8006930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006938:	b29a      	uxth	r2, r3
 800693a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800693c:	801a      	strh	r2, [r3, #0]
 800693e:	e01a      	b.n	8006976 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	785b      	ldrb	r3, [r3, #1]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d116      	bne.n	8006976 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006956:	b29b      	uxth	r3, r3
 8006958:	461a      	mov	r2, r3
 800695a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800695c:	4413      	add	r3, r2
 800695e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	00da      	lsls	r2, r3, #3
 8006966:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006968:	4413      	add	r3, r2
 800696a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800696e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006970:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006972:	2200      	movs	r2, #0
 8006974:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	785b      	ldrb	r3, [r3, #1]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d12f      	bne.n	80069e6 <HAL_PCD_EP_DB_Transmit+0x558>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006996:	b29b      	uxth	r3, r3
 8006998:	461a      	mov	r2, r3
 800699a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800699e:	4413      	add	r3, r2
 80069a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	00da      	lsls	r2, r3, #3
 80069aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069ae:	4413      	add	r3, r2
 80069b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80069b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80069b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80069ca:	801a      	strh	r2, [r3, #0]
 80069cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069dc:	b29a      	uxth	r2, r3
 80069de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80069e2:	801a      	strh	r2, [r3, #0]
 80069e4:	e01c      	b.n	8006a20 <HAL_PCD_EP_DB_Transmit+0x592>
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	785b      	ldrb	r3, [r3, #1]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d118      	bne.n	8006a20 <HAL_PCD_EP_DB_Transmit+0x592>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	461a      	mov	r2, r3
 80069fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069fe:	4413      	add	r3, r2
 8006a00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	00da      	lsls	r2, r3, #3
 8006a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a0e:	4413      	add	r3, r2
 8006a10:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	78db      	ldrb	r3, [r3, #3]
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d127      	bne.n	8006a78 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a42:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006a46:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006a4a:	f083 0320 	eor.w	r3, r3, #32
 8006a4e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	441a      	add	r2, r3
 8006a60:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006a64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f7ff f853 	bl	8005b2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006a84:	88fb      	ldrh	r3, [r7, #6]
 8006a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d121      	bne.n	8006ad2 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	461a      	mov	r2, r3
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	881b      	ldrh	r3, [r3, #0]
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aa8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	441a      	add	r2, r3
 8006aba:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006abe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ac2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ac6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	e113      	b.n	8006cfe <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006ad6:	88fb      	ldrh	r3, [r7, #6]
 8006ad8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d121      	bne.n	8006b24 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006afa:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	441a      	add	r2, r3
 8006b0c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006b10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	f040 80be 	bne.w	8006cac <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	695a      	ldr	r2, [r3, #20]
 8006b34:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006b38:	441a      	add	r2, r3
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	69da      	ldr	r2, [r3, #28]
 8006b42:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006b46:	441a      	add	r2, r3
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	6a1a      	ldr	r2, [r3, #32]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d309      	bcc.n	8006b6c <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	6a1a      	ldr	r2, [r3, #32]
 8006b62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b64:	1ad2      	subs	r2, r2, r3
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	621a      	str	r2, [r3, #32]
 8006b6a:	e015      	b.n	8006b98 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d107      	bne.n	8006b84 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8006b74:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006b78:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006b82:	e009      	b.n	8006b98 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	785b      	ldrb	r3, [r3, #1]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d15f      	bne.n	8006c66 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bba:	4413      	add	r3, r2
 8006bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	00da      	lsls	r2, r3, #3
 8006bc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006bcc:	667b      	str	r3, [r7, #100]	@ 0x64
 8006bce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bdc:	801a      	strh	r2, [r3, #0]
 8006bde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10a      	bne.n	8006bfa <HAL_PCD_EP_DB_Transmit+0x76c>
 8006be4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bf6:	801a      	strh	r2, [r3, #0]
 8006bf8:	e04e      	b.n	8006c98 <HAL_PCD_EP_DB_Transmit+0x80a>
 8006bfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006bfc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bfe:	d816      	bhi.n	8006c2e <HAL_PCD_EP_DB_Transmit+0x7a0>
 8006c00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c02:	085b      	lsrs	r3, r3, #1
 8006c04:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <HAL_PCD_EP_DB_Transmit+0x788>
 8006c10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c12:	3301      	adds	r3, #1
 8006c14:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	029b      	lsls	r3, r3, #10
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	4313      	orrs	r3, r2
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c2a:	801a      	strh	r2, [r3, #0]
 8006c2c:	e034      	b.n	8006c98 <HAL_PCD_EP_DB_Transmit+0x80a>
 8006c2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c30:	095b      	lsrs	r3, r3, #5
 8006c32:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c36:	f003 031f 	and.w	r3, r3, #31
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d102      	bne.n	8006c44 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8006c3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c40:	3b01      	subs	r3, #1
 8006c42:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	029b      	lsls	r3, r3, #10
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	4313      	orrs	r3, r2
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c62:	801a      	strh	r2, [r3, #0]
 8006c64:	e018      	b.n	8006c98 <HAL_PCD_EP_DB_Transmit+0x80a>
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	785b      	ldrb	r3, [r3, #1]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d114      	bne.n	8006c98 <HAL_PCD_EP_DB_Transmit+0x80a>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	461a      	mov	r2, r3
 8006c7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c7c:	4413      	add	r3, r2
 8006c7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	00da      	lsls	r2, r3, #3
 8006c86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c88:	4413      	add	r3, r2
 8006c8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006c8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c96:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6818      	ldr	r0, [r3, #0]
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	6959      	ldr	r1, [r3, #20]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	895a      	ldrh	r2, [r3, #10]
 8006ca4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	f003 fa75 	bl	800a196 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cc6:	82fb      	strh	r3, [r7, #22]
 8006cc8:	8afb      	ldrh	r3, [r7, #22]
 8006cca:	f083 0310 	eor.w	r3, r3, #16
 8006cce:	82fb      	strh	r3, [r7, #22]
 8006cd0:	8afb      	ldrh	r3, [r7, #22]
 8006cd2:	f083 0320 	eor.w	r3, r3, #32
 8006cd6:	82fb      	strh	r3, [r7, #22]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	441a      	add	r2, r3
 8006ce6:	8afb      	ldrh	r3, [r7, #22]
 8006ce8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3798      	adds	r7, #152	@ 0x98
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b085      	sub	sp, #20
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	f043 0301 	orr.w	r3, r3, #1
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	f043 0302 	orr.w	r3, r3, #2
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	460b      	mov	r3, r1
 8006d64:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006d66:	bf00      	nop
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
	...

08006d74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d141      	bne.n	8006e06 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d82:	4b4b      	ldr	r3, [pc, #300]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006d8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d8e:	d131      	bne.n	8006df4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d90:	4b47      	ldr	r3, [pc, #284]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d96:	4a46      	ldr	r2, [pc, #280]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006da0:	4b43      	ldr	r3, [pc, #268]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006da8:	4a41      	ldr	r2, [pc, #260]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006daa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006dae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006db0:	4b40      	ldr	r3, [pc, #256]	@ (8006eb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2232      	movs	r2, #50	@ 0x32
 8006db6:	fb02 f303 	mul.w	r3, r2, r3
 8006dba:	4a3f      	ldr	r2, [pc, #252]	@ (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc0:	0c9b      	lsrs	r3, r3, #18
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006dc6:	e002      	b.n	8006dce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006dce:	4b38      	ldr	r3, [pc, #224]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dda:	d102      	bne.n	8006de2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1f2      	bne.n	8006dc8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006de2:	4b33      	ldr	r3, [pc, #204]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dee:	d158      	bne.n	8006ea2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e057      	b.n	8006ea4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006df4:	4b2e      	ldr	r3, [pc, #184]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dfa:	4a2d      	ldr	r2, [pc, #180]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006e04:	e04d      	b.n	8006ea2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e0c:	d141      	bne.n	8006e92 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e0e:	4b28      	ldr	r3, [pc, #160]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e1a:	d131      	bne.n	8006e80 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e1c:	4b24      	ldr	r3, [pc, #144]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e22:	4a23      	ldr	r2, [pc, #140]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e2c:	4b20      	ldr	r3, [pc, #128]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006e34:	4a1e      	ldr	r2, [pc, #120]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8006eb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2232      	movs	r2, #50	@ 0x32
 8006e42:	fb02 f303 	mul.w	r3, r2, r3
 8006e46:	4a1c      	ldr	r2, [pc, #112]	@ (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e48:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4c:	0c9b      	lsrs	r3, r3, #18
 8006e4e:	3301      	adds	r3, #1
 8006e50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e52:	e002      	b.n	8006e5a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e5a:	4b15      	ldr	r3, [pc, #84]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e66:	d102      	bne.n	8006e6e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1f2      	bne.n	8006e54 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e6e:	4b10      	ldr	r3, [pc, #64]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e7a:	d112      	bne.n	8006ea2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e011      	b.n	8006ea4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e80:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e86:	4a0a      	ldr	r2, [pc, #40]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006e90:	e007      	b.n	8006ea2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e92:	4b07      	ldr	r3, [pc, #28]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006e9a:	4a05      	ldr	r2, [pc, #20]	@ (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006ea0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	40007000 	.word	0x40007000
 8006eb4:	20000000 	.word	0x20000000
 8006eb8:	431bde83 	.word	0x431bde83

08006ebc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b088      	sub	sp, #32
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e2fe      	b.n	80074cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d075      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eda:	4b97      	ldr	r3, [pc, #604]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f003 030c 	and.w	r3, r3, #12
 8006ee2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ee4:	4b94      	ldr	r3, [pc, #592]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	f003 0303 	and.w	r3, r3, #3
 8006eec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	2b0c      	cmp	r3, #12
 8006ef2:	d102      	bne.n	8006efa <HAL_RCC_OscConfig+0x3e>
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d002      	beq.n	8006f00 <HAL_RCC_OscConfig+0x44>
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d10b      	bne.n	8006f18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f00:	4b8d      	ldr	r3, [pc, #564]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d05b      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x108>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d157      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e2d9      	b.n	80074cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f20:	d106      	bne.n	8006f30 <HAL_RCC_OscConfig+0x74>
 8006f22:	4b85      	ldr	r3, [pc, #532]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a84      	ldr	r2, [pc, #528]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8006f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	e01d      	b.n	8006f6c <HAL_RCC_OscConfig+0xb0>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f38:	d10c      	bne.n	8006f54 <HAL_RCC_OscConfig+0x98>
 8006f3a:	4b7f      	ldr	r3, [pc, #508]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a7e      	ldr	r2, [pc, #504]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8006f40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	4b7c      	ldr	r3, [pc, #496]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a7b      	ldr	r2, [pc, #492]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8006f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f50:	6013      	str	r3, [r2, #0]
 8006f52:	e00b      	b.n	8006f6c <HAL_RCC_OscConfig+0xb0>
 8006f54:	4b78      	ldr	r3, [pc, #480]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a77      	ldr	r2, [pc, #476]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8006f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f5e:	6013      	str	r3, [r2, #0]
 8006f60:	4b75      	ldr	r3, [pc, #468]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a74      	ldr	r2, [pc, #464]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8006f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d013      	beq.n	8006f9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f74:	f7fa fcb2 	bl	80018dc <HAL_GetTick>
 8006f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f7a:	e008      	b.n	8006f8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f7c:	f7fa fcae 	bl	80018dc <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b64      	cmp	r3, #100	@ 0x64
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e29e      	b.n	80074cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f8e:	4b6a      	ldr	r3, [pc, #424]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d0f0      	beq.n	8006f7c <HAL_RCC_OscConfig+0xc0>
 8006f9a:	e014      	b.n	8006fc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f9c:	f7fa fc9e 	bl	80018dc <HAL_GetTick>
 8006fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fa4:	f7fa fc9a 	bl	80018dc <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b64      	cmp	r3, #100	@ 0x64
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e28a      	b.n	80074cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006fb6:	4b60      	ldr	r3, [pc, #384]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1f0      	bne.n	8006fa4 <HAL_RCC_OscConfig+0xe8>
 8006fc2:	e000      	b.n	8006fc6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d075      	beq.n	80070be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fd2:	4b59      	ldr	r3, [pc, #356]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f003 030c 	and.w	r3, r3, #12
 8006fda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fdc:	4b56      	ldr	r3, [pc, #344]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f003 0303 	and.w	r3, r3, #3
 8006fe4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	2b0c      	cmp	r3, #12
 8006fea:	d102      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x136>
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d002      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x13c>
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	d11f      	bne.n	8007038 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ff8:	4b4f      	ldr	r3, [pc, #316]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007000:	2b00      	cmp	r3, #0
 8007002:	d005      	beq.n	8007010 <HAL_RCC_OscConfig+0x154>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e25d      	b.n	80074cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007010:	4b49      	ldr	r3, [pc, #292]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	061b      	lsls	r3, r3, #24
 800701e:	4946      	ldr	r1, [pc, #280]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8007020:	4313      	orrs	r3, r2
 8007022:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007024:	4b45      	ldr	r3, [pc, #276]	@ (800713c <HAL_RCC_OscConfig+0x280>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4618      	mov	r0, r3
 800702a:	f7fa fc0b 	bl	8001844 <HAL_InitTick>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d043      	beq.n	80070bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e249      	b.n	80074cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d023      	beq.n	8007088 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007040:	4b3d      	ldr	r3, [pc, #244]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a3c      	ldr	r2, [pc, #240]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8007046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800704a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800704c:	f7fa fc46 	bl	80018dc <HAL_GetTick>
 8007050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007052:	e008      	b.n	8007066 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007054:	f7fa fc42 	bl	80018dc <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	2b02      	cmp	r3, #2
 8007060:	d901      	bls.n	8007066 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e232      	b.n	80074cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007066:	4b34      	ldr	r3, [pc, #208]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800706e:	2b00      	cmp	r3, #0
 8007070:	d0f0      	beq.n	8007054 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007072:	4b31      	ldr	r3, [pc, #196]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	061b      	lsls	r3, r3, #24
 8007080:	492d      	ldr	r1, [pc, #180]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8007082:	4313      	orrs	r3, r2
 8007084:	604b      	str	r3, [r1, #4]
 8007086:	e01a      	b.n	80070be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007088:	4b2b      	ldr	r3, [pc, #172]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a2a      	ldr	r2, [pc, #168]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 800708e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007094:	f7fa fc22 	bl	80018dc <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800709a:	e008      	b.n	80070ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800709c:	f7fa fc1e 	bl	80018dc <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e20e      	b.n	80074cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80070ae:	4b22      	ldr	r3, [pc, #136]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1f0      	bne.n	800709c <HAL_RCC_OscConfig+0x1e0>
 80070ba:	e000      	b.n	80070be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0308 	and.w	r3, r3, #8
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d041      	beq.n	800714e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d01c      	beq.n	800710c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070d2:	4b19      	ldr	r3, [pc, #100]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 80070d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070d8:	4a17      	ldr	r2, [pc, #92]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 80070da:	f043 0301 	orr.w	r3, r3, #1
 80070de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070e2:	f7fa fbfb 	bl	80018dc <HAL_GetTick>
 80070e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070e8:	e008      	b.n	80070fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070ea:	f7fa fbf7 	bl	80018dc <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d901      	bls.n	80070fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e1e7      	b.n	80074cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070fc:	4b0e      	ldr	r3, [pc, #56]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 80070fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0ef      	beq.n	80070ea <HAL_RCC_OscConfig+0x22e>
 800710a:	e020      	b.n	800714e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800710c:	4b0a      	ldr	r3, [pc, #40]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 800710e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007112:	4a09      	ldr	r2, [pc, #36]	@ (8007138 <HAL_RCC_OscConfig+0x27c>)
 8007114:	f023 0301 	bic.w	r3, r3, #1
 8007118:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800711c:	f7fa fbde 	bl	80018dc <HAL_GetTick>
 8007120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007122:	e00d      	b.n	8007140 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007124:	f7fa fbda 	bl	80018dc <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b02      	cmp	r3, #2
 8007130:	d906      	bls.n	8007140 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e1ca      	b.n	80074cc <HAL_RCC_OscConfig+0x610>
 8007136:	bf00      	nop
 8007138:	40021000 	.word	0x40021000
 800713c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007140:	4b8c      	ldr	r3, [pc, #560]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 8007142:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1ea      	bne.n	8007124 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0304 	and.w	r3, r3, #4
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 80a6 	beq.w	80072a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800715c:	2300      	movs	r3, #0
 800715e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007160:	4b84      	ldr	r3, [pc, #528]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 8007162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <HAL_RCC_OscConfig+0x2b4>
 800716c:	2301      	movs	r3, #1
 800716e:	e000      	b.n	8007172 <HAL_RCC_OscConfig+0x2b6>
 8007170:	2300      	movs	r3, #0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00d      	beq.n	8007192 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007176:	4b7f      	ldr	r3, [pc, #508]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 8007178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800717a:	4a7e      	ldr	r2, [pc, #504]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 800717c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007180:	6593      	str	r3, [r2, #88]	@ 0x58
 8007182:	4b7c      	ldr	r3, [pc, #496]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 8007184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800718e:	2301      	movs	r3, #1
 8007190:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007192:	4b79      	ldr	r3, [pc, #484]	@ (8007378 <HAL_RCC_OscConfig+0x4bc>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800719a:	2b00      	cmp	r3, #0
 800719c:	d118      	bne.n	80071d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800719e:	4b76      	ldr	r3, [pc, #472]	@ (8007378 <HAL_RCC_OscConfig+0x4bc>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a75      	ldr	r2, [pc, #468]	@ (8007378 <HAL_RCC_OscConfig+0x4bc>)
 80071a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071aa:	f7fa fb97 	bl	80018dc <HAL_GetTick>
 80071ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071b0:	e008      	b.n	80071c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071b2:	f7fa fb93 	bl	80018dc <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d901      	bls.n	80071c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e183      	b.n	80074cc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071c4:	4b6c      	ldr	r3, [pc, #432]	@ (8007378 <HAL_RCC_OscConfig+0x4bc>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0f0      	beq.n	80071b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d108      	bne.n	80071ea <HAL_RCC_OscConfig+0x32e>
 80071d8:	4b66      	ldr	r3, [pc, #408]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 80071da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071de:	4a65      	ldr	r2, [pc, #404]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 80071e0:	f043 0301 	orr.w	r3, r3, #1
 80071e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80071e8:	e024      	b.n	8007234 <HAL_RCC_OscConfig+0x378>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	2b05      	cmp	r3, #5
 80071f0:	d110      	bne.n	8007214 <HAL_RCC_OscConfig+0x358>
 80071f2:	4b60      	ldr	r3, [pc, #384]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 80071f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071f8:	4a5e      	ldr	r2, [pc, #376]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 80071fa:	f043 0304 	orr.w	r3, r3, #4
 80071fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007202:	4b5c      	ldr	r3, [pc, #368]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 8007204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007208:	4a5a      	ldr	r2, [pc, #360]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 800720a:	f043 0301 	orr.w	r3, r3, #1
 800720e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007212:	e00f      	b.n	8007234 <HAL_RCC_OscConfig+0x378>
 8007214:	4b57      	ldr	r3, [pc, #348]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 8007216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800721a:	4a56      	ldr	r2, [pc, #344]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 800721c:	f023 0301 	bic.w	r3, r3, #1
 8007220:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007224:	4b53      	ldr	r3, [pc, #332]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 8007226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800722a:	4a52      	ldr	r2, [pc, #328]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 800722c:	f023 0304 	bic.w	r3, r3, #4
 8007230:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d016      	beq.n	800726a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800723c:	f7fa fb4e 	bl	80018dc <HAL_GetTick>
 8007240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007242:	e00a      	b.n	800725a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007244:	f7fa fb4a 	bl	80018dc <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007252:	4293      	cmp	r3, r2
 8007254:	d901      	bls.n	800725a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e138      	b.n	80074cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800725a:	4b46      	ldr	r3, [pc, #280]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 800725c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b00      	cmp	r3, #0
 8007266:	d0ed      	beq.n	8007244 <HAL_RCC_OscConfig+0x388>
 8007268:	e015      	b.n	8007296 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800726a:	f7fa fb37 	bl	80018dc <HAL_GetTick>
 800726e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007270:	e00a      	b.n	8007288 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007272:	f7fa fb33 	bl	80018dc <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007280:	4293      	cmp	r3, r2
 8007282:	d901      	bls.n	8007288 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e121      	b.n	80074cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007288:	4b3a      	ldr	r3, [pc, #232]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 800728a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1ed      	bne.n	8007272 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007296:	7ffb      	ldrb	r3, [r7, #31]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d105      	bne.n	80072a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800729c:	4b35      	ldr	r3, [pc, #212]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 800729e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072a0:	4a34      	ldr	r2, [pc, #208]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 80072a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0320 	and.w	r3, r3, #32
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d03c      	beq.n	800732e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d01c      	beq.n	80072f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80072bc:	4b2d      	ldr	r3, [pc, #180]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 80072be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80072c2:	4a2c      	ldr	r2, [pc, #176]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 80072c4:	f043 0301 	orr.w	r3, r3, #1
 80072c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072cc:	f7fa fb06 	bl	80018dc <HAL_GetTick>
 80072d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80072d2:	e008      	b.n	80072e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072d4:	f7fa fb02 	bl	80018dc <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d901      	bls.n	80072e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e0f2      	b.n	80074cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80072e6:	4b23      	ldr	r3, [pc, #140]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 80072e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0ef      	beq.n	80072d4 <HAL_RCC_OscConfig+0x418>
 80072f4:	e01b      	b.n	800732e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80072f6:	4b1f      	ldr	r3, [pc, #124]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 80072f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80072fc:	4a1d      	ldr	r2, [pc, #116]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 80072fe:	f023 0301 	bic.w	r3, r3, #1
 8007302:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007306:	f7fa fae9 	bl	80018dc <HAL_GetTick>
 800730a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800730c:	e008      	b.n	8007320 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800730e:	f7fa fae5 	bl	80018dc <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	2b02      	cmp	r3, #2
 800731a:	d901      	bls.n	8007320 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e0d5      	b.n	80074cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007320:	4b14      	ldr	r3, [pc, #80]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 8007322:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007326:	f003 0302 	and.w	r3, r3, #2
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1ef      	bne.n	800730e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 80c9 	beq.w	80074ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007338:	4b0e      	ldr	r3, [pc, #56]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f003 030c 	and.w	r3, r3, #12
 8007340:	2b0c      	cmp	r3, #12
 8007342:	f000 8083 	beq.w	800744c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	2b02      	cmp	r3, #2
 800734c:	d15e      	bne.n	800740c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800734e:	4b09      	ldr	r3, [pc, #36]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a08      	ldr	r2, [pc, #32]	@ (8007374 <HAL_RCC_OscConfig+0x4b8>)
 8007354:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800735a:	f7fa fabf 	bl	80018dc <HAL_GetTick>
 800735e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007360:	e00c      	b.n	800737c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007362:	f7fa fabb 	bl	80018dc <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	2b02      	cmp	r3, #2
 800736e:	d905      	bls.n	800737c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e0ab      	b.n	80074cc <HAL_RCC_OscConfig+0x610>
 8007374:	40021000 	.word	0x40021000
 8007378:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800737c:	4b55      	ldr	r3, [pc, #340]	@ (80074d4 <HAL_RCC_OscConfig+0x618>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1ec      	bne.n	8007362 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007388:	4b52      	ldr	r3, [pc, #328]	@ (80074d4 <HAL_RCC_OscConfig+0x618>)
 800738a:	68da      	ldr	r2, [r3, #12]
 800738c:	4b52      	ldr	r3, [pc, #328]	@ (80074d8 <HAL_RCC_OscConfig+0x61c>)
 800738e:	4013      	ands	r3, r2
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	6a11      	ldr	r1, [r2, #32]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007398:	3a01      	subs	r2, #1
 800739a:	0112      	lsls	r2, r2, #4
 800739c:	4311      	orrs	r1, r2
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80073a2:	0212      	lsls	r2, r2, #8
 80073a4:	4311      	orrs	r1, r2
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80073aa:	0852      	lsrs	r2, r2, #1
 80073ac:	3a01      	subs	r2, #1
 80073ae:	0552      	lsls	r2, r2, #21
 80073b0:	4311      	orrs	r1, r2
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80073b6:	0852      	lsrs	r2, r2, #1
 80073b8:	3a01      	subs	r2, #1
 80073ba:	0652      	lsls	r2, r2, #25
 80073bc:	4311      	orrs	r1, r2
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80073c2:	06d2      	lsls	r2, r2, #27
 80073c4:	430a      	orrs	r2, r1
 80073c6:	4943      	ldr	r1, [pc, #268]	@ (80074d4 <HAL_RCC_OscConfig+0x618>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073cc:	4b41      	ldr	r3, [pc, #260]	@ (80074d4 <HAL_RCC_OscConfig+0x618>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a40      	ldr	r2, [pc, #256]	@ (80074d4 <HAL_RCC_OscConfig+0x618>)
 80073d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80073d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80073d8:	4b3e      	ldr	r3, [pc, #248]	@ (80074d4 <HAL_RCC_OscConfig+0x618>)
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	4a3d      	ldr	r2, [pc, #244]	@ (80074d4 <HAL_RCC_OscConfig+0x618>)
 80073de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80073e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e4:	f7fa fa7a 	bl	80018dc <HAL_GetTick>
 80073e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073ea:	e008      	b.n	80073fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073ec:	f7fa fa76 	bl	80018dc <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d901      	bls.n	80073fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e066      	b.n	80074cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073fe:	4b35      	ldr	r3, [pc, #212]	@ (80074d4 <HAL_RCC_OscConfig+0x618>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d0f0      	beq.n	80073ec <HAL_RCC_OscConfig+0x530>
 800740a:	e05e      	b.n	80074ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800740c:	4b31      	ldr	r3, [pc, #196]	@ (80074d4 <HAL_RCC_OscConfig+0x618>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a30      	ldr	r2, [pc, #192]	@ (80074d4 <HAL_RCC_OscConfig+0x618>)
 8007412:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007418:	f7fa fa60 	bl	80018dc <HAL_GetTick>
 800741c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800741e:	e008      	b.n	8007432 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007420:	f7fa fa5c 	bl	80018dc <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	2b02      	cmp	r3, #2
 800742c:	d901      	bls.n	8007432 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e04c      	b.n	80074cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007432:	4b28      	ldr	r3, [pc, #160]	@ (80074d4 <HAL_RCC_OscConfig+0x618>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1f0      	bne.n	8007420 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800743e:	4b25      	ldr	r3, [pc, #148]	@ (80074d4 <HAL_RCC_OscConfig+0x618>)
 8007440:	68da      	ldr	r2, [r3, #12]
 8007442:	4924      	ldr	r1, [pc, #144]	@ (80074d4 <HAL_RCC_OscConfig+0x618>)
 8007444:	4b25      	ldr	r3, [pc, #148]	@ (80074dc <HAL_RCC_OscConfig+0x620>)
 8007446:	4013      	ands	r3, r2
 8007448:	60cb      	str	r3, [r1, #12]
 800744a:	e03e      	b.n	80074ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d101      	bne.n	8007458 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e039      	b.n	80074cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007458:	4b1e      	ldr	r3, [pc, #120]	@ (80074d4 <HAL_RCC_OscConfig+0x618>)
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f003 0203 	and.w	r2, r3, #3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	429a      	cmp	r2, r3
 800746a:	d12c      	bne.n	80074c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007476:	3b01      	subs	r3, #1
 8007478:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800747a:	429a      	cmp	r2, r3
 800747c:	d123      	bne.n	80074c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007488:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800748a:	429a      	cmp	r2, r3
 800748c:	d11b      	bne.n	80074c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007498:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800749a:	429a      	cmp	r2, r3
 800749c:	d113      	bne.n	80074c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074a8:	085b      	lsrs	r3, r3, #1
 80074aa:	3b01      	subs	r3, #1
 80074ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d109      	bne.n	80074c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074bc:	085b      	lsrs	r3, r3, #1
 80074be:	3b01      	subs	r3, #1
 80074c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d001      	beq.n	80074ca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e000      	b.n	80074cc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3720      	adds	r7, #32
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	40021000 	.word	0x40021000
 80074d8:	019f800c 	.word	0x019f800c
 80074dc:	feeefffc 	.word	0xfeeefffc

080074e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80074ea:	2300      	movs	r3, #0
 80074ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e11e      	b.n	8007736 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074f8:	4b91      	ldr	r3, [pc, #580]	@ (8007740 <HAL_RCC_ClockConfig+0x260>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 030f 	and.w	r3, r3, #15
 8007500:	683a      	ldr	r2, [r7, #0]
 8007502:	429a      	cmp	r2, r3
 8007504:	d910      	bls.n	8007528 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007506:	4b8e      	ldr	r3, [pc, #568]	@ (8007740 <HAL_RCC_ClockConfig+0x260>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f023 020f 	bic.w	r2, r3, #15
 800750e:	498c      	ldr	r1, [pc, #560]	@ (8007740 <HAL_RCC_ClockConfig+0x260>)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	4313      	orrs	r3, r2
 8007514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007516:	4b8a      	ldr	r3, [pc, #552]	@ (8007740 <HAL_RCC_ClockConfig+0x260>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 030f 	and.w	r3, r3, #15
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	429a      	cmp	r2, r3
 8007522:	d001      	beq.n	8007528 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e106      	b.n	8007736 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	d073      	beq.n	800761c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	2b03      	cmp	r3, #3
 800753a:	d129      	bne.n	8007590 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800753c:	4b81      	ldr	r3, [pc, #516]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e0f4      	b.n	8007736 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800754c:	f000 f99e 	bl	800788c <RCC_GetSysClockFreqFromPLLSource>
 8007550:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	4a7c      	ldr	r2, [pc, #496]	@ (8007748 <HAL_RCC_ClockConfig+0x268>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d93f      	bls.n	80075da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800755a:	4b7a      	ldr	r3, [pc, #488]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d009      	beq.n	800757a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800756e:	2b00      	cmp	r3, #0
 8007570:	d033      	beq.n	80075da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007576:	2b00      	cmp	r3, #0
 8007578:	d12f      	bne.n	80075da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800757a:	4b72      	ldr	r3, [pc, #456]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007582:	4a70      	ldr	r2, [pc, #448]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 8007584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007588:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800758a:	2380      	movs	r3, #128	@ 0x80
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	e024      	b.n	80075da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	2b02      	cmp	r3, #2
 8007596:	d107      	bne.n	80075a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007598:	4b6a      	ldr	r3, [pc, #424]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d109      	bne.n	80075b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e0c6      	b.n	8007736 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075a8:	4b66      	ldr	r3, [pc, #408]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e0be      	b.n	8007736 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80075b8:	f000 f8ce 	bl	8007758 <HAL_RCC_GetSysClockFreq>
 80075bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	4a61      	ldr	r2, [pc, #388]	@ (8007748 <HAL_RCC_ClockConfig+0x268>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d909      	bls.n	80075da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80075c6:	4b5f      	ldr	r3, [pc, #380]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075ce:	4a5d      	ldr	r2, [pc, #372]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 80075d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80075d6:	2380      	movs	r3, #128	@ 0x80
 80075d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80075da:	4b5a      	ldr	r3, [pc, #360]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f023 0203 	bic.w	r2, r3, #3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	4957      	ldr	r1, [pc, #348]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ec:	f7fa f976 	bl	80018dc <HAL_GetTick>
 80075f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075f2:	e00a      	b.n	800760a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075f4:	f7fa f972 	bl	80018dc <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007602:	4293      	cmp	r3, r2
 8007604:	d901      	bls.n	800760a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e095      	b.n	8007736 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800760a:	4b4e      	ldr	r3, [pc, #312]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f003 020c 	and.w	r2, r3, #12
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	429a      	cmp	r2, r3
 800761a:	d1eb      	bne.n	80075f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	2b00      	cmp	r3, #0
 8007626:	d023      	beq.n	8007670 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0304 	and.w	r3, r3, #4
 8007630:	2b00      	cmp	r3, #0
 8007632:	d005      	beq.n	8007640 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007634:	4b43      	ldr	r3, [pc, #268]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	4a42      	ldr	r2, [pc, #264]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 800763a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800763e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0308 	and.w	r3, r3, #8
 8007648:	2b00      	cmp	r3, #0
 800764a:	d007      	beq.n	800765c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800764c:	4b3d      	ldr	r3, [pc, #244]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007654:	4a3b      	ldr	r2, [pc, #236]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 8007656:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800765a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800765c:	4b39      	ldr	r3, [pc, #228]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	4936      	ldr	r1, [pc, #216]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 800766a:	4313      	orrs	r3, r2
 800766c:	608b      	str	r3, [r1, #8]
 800766e:	e008      	b.n	8007682 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2b80      	cmp	r3, #128	@ 0x80
 8007674:	d105      	bne.n	8007682 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007676:	4b33      	ldr	r3, [pc, #204]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	4a32      	ldr	r2, [pc, #200]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 800767c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007680:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007682:	4b2f      	ldr	r3, [pc, #188]	@ (8007740 <HAL_RCC_ClockConfig+0x260>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 030f 	and.w	r3, r3, #15
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	429a      	cmp	r2, r3
 800768e:	d21d      	bcs.n	80076cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007690:	4b2b      	ldr	r3, [pc, #172]	@ (8007740 <HAL_RCC_ClockConfig+0x260>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f023 020f 	bic.w	r2, r3, #15
 8007698:	4929      	ldr	r1, [pc, #164]	@ (8007740 <HAL_RCC_ClockConfig+0x260>)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	4313      	orrs	r3, r2
 800769e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80076a0:	f7fa f91c 	bl	80018dc <HAL_GetTick>
 80076a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076a6:	e00a      	b.n	80076be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076a8:	f7fa f918 	bl	80018dc <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d901      	bls.n	80076be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e03b      	b.n	8007736 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076be:	4b20      	ldr	r3, [pc, #128]	@ (8007740 <HAL_RCC_ClockConfig+0x260>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 030f 	and.w	r3, r3, #15
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d1ed      	bne.n	80076a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0304 	and.w	r3, r3, #4
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d008      	beq.n	80076ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	4917      	ldr	r1, [pc, #92]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0308 	and.w	r3, r3, #8
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d009      	beq.n	800770a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076f6:	4b13      	ldr	r3, [pc, #76]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	490f      	ldr	r1, [pc, #60]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 8007706:	4313      	orrs	r3, r2
 8007708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800770a:	f000 f825 	bl	8007758 <HAL_RCC_GetSysClockFreq>
 800770e:	4602      	mov	r2, r0
 8007710:	4b0c      	ldr	r3, [pc, #48]	@ (8007744 <HAL_RCC_ClockConfig+0x264>)
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	091b      	lsrs	r3, r3, #4
 8007716:	f003 030f 	and.w	r3, r3, #15
 800771a:	490c      	ldr	r1, [pc, #48]	@ (800774c <HAL_RCC_ClockConfig+0x26c>)
 800771c:	5ccb      	ldrb	r3, [r1, r3]
 800771e:	f003 031f 	and.w	r3, r3, #31
 8007722:	fa22 f303 	lsr.w	r3, r2, r3
 8007726:	4a0a      	ldr	r2, [pc, #40]	@ (8007750 <HAL_RCC_ClockConfig+0x270>)
 8007728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800772a:	4b0a      	ldr	r3, [pc, #40]	@ (8007754 <HAL_RCC_ClockConfig+0x274>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4618      	mov	r0, r3
 8007730:	f7fa f888 	bl	8001844 <HAL_InitTick>
 8007734:	4603      	mov	r3, r0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	40022000 	.word	0x40022000
 8007744:	40021000 	.word	0x40021000
 8007748:	04c4b400 	.word	0x04c4b400
 800774c:	0800a324 	.word	0x0800a324
 8007750:	20000000 	.word	0x20000000
 8007754:	20000004 	.word	0x20000004

08007758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007758:	b480      	push	{r7}
 800775a:	b087      	sub	sp, #28
 800775c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800775e:	4b2c      	ldr	r3, [pc, #176]	@ (8007810 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f003 030c 	and.w	r3, r3, #12
 8007766:	2b04      	cmp	r3, #4
 8007768:	d102      	bne.n	8007770 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800776a:	4b2a      	ldr	r3, [pc, #168]	@ (8007814 <HAL_RCC_GetSysClockFreq+0xbc>)
 800776c:	613b      	str	r3, [r7, #16]
 800776e:	e047      	b.n	8007800 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007770:	4b27      	ldr	r3, [pc, #156]	@ (8007810 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f003 030c 	and.w	r3, r3, #12
 8007778:	2b08      	cmp	r3, #8
 800777a:	d102      	bne.n	8007782 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800777c:	4b26      	ldr	r3, [pc, #152]	@ (8007818 <HAL_RCC_GetSysClockFreq+0xc0>)
 800777e:	613b      	str	r3, [r7, #16]
 8007780:	e03e      	b.n	8007800 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007782:	4b23      	ldr	r3, [pc, #140]	@ (8007810 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 030c 	and.w	r3, r3, #12
 800778a:	2b0c      	cmp	r3, #12
 800778c:	d136      	bne.n	80077fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800778e:	4b20      	ldr	r3, [pc, #128]	@ (8007810 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007798:	4b1d      	ldr	r3, [pc, #116]	@ (8007810 <HAL_RCC_GetSysClockFreq+0xb8>)
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	091b      	lsrs	r3, r3, #4
 800779e:	f003 030f 	and.w	r3, r3, #15
 80077a2:	3301      	adds	r3, #1
 80077a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2b03      	cmp	r3, #3
 80077aa:	d10c      	bne.n	80077c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077ac:	4a1a      	ldr	r2, [pc, #104]	@ (8007818 <HAL_RCC_GetSysClockFreq+0xc0>)
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b4:	4a16      	ldr	r2, [pc, #88]	@ (8007810 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077b6:	68d2      	ldr	r2, [r2, #12]
 80077b8:	0a12      	lsrs	r2, r2, #8
 80077ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80077be:	fb02 f303 	mul.w	r3, r2, r3
 80077c2:	617b      	str	r3, [r7, #20]
      break;
 80077c4:	e00c      	b.n	80077e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80077c6:	4a13      	ldr	r2, [pc, #76]	@ (8007814 <HAL_RCC_GetSysClockFreq+0xbc>)
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ce:	4a10      	ldr	r2, [pc, #64]	@ (8007810 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077d0:	68d2      	ldr	r2, [r2, #12]
 80077d2:	0a12      	lsrs	r2, r2, #8
 80077d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80077d8:	fb02 f303 	mul.w	r3, r2, r3
 80077dc:	617b      	str	r3, [r7, #20]
      break;
 80077de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80077e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007810 <HAL_RCC_GetSysClockFreq+0xb8>)
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	0e5b      	lsrs	r3, r3, #25
 80077e6:	f003 0303 	and.w	r3, r3, #3
 80077ea:	3301      	adds	r3, #1
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f8:	613b      	str	r3, [r7, #16]
 80077fa:	e001      	b.n	8007800 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80077fc:	2300      	movs	r3, #0
 80077fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007800:	693b      	ldr	r3, [r7, #16]
}
 8007802:	4618      	mov	r0, r3
 8007804:	371c      	adds	r7, #28
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	40021000 	.word	0x40021000
 8007814:	00f42400 	.word	0x00f42400
 8007818:	007a1200 	.word	0x007a1200

0800781c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800781c:	b480      	push	{r7}
 800781e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007820:	4b03      	ldr	r3, [pc, #12]	@ (8007830 <HAL_RCC_GetHCLKFreq+0x14>)
 8007822:	681b      	ldr	r3, [r3, #0]
}
 8007824:	4618      	mov	r0, r3
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	20000000 	.word	0x20000000

08007834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007838:	f7ff fff0 	bl	800781c <HAL_RCC_GetHCLKFreq>
 800783c:	4602      	mov	r2, r0
 800783e:	4b06      	ldr	r3, [pc, #24]	@ (8007858 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	0a1b      	lsrs	r3, r3, #8
 8007844:	f003 0307 	and.w	r3, r3, #7
 8007848:	4904      	ldr	r1, [pc, #16]	@ (800785c <HAL_RCC_GetPCLK1Freq+0x28>)
 800784a:	5ccb      	ldrb	r3, [r1, r3]
 800784c:	f003 031f 	and.w	r3, r3, #31
 8007850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007854:	4618      	mov	r0, r3
 8007856:	bd80      	pop	{r7, pc}
 8007858:	40021000 	.word	0x40021000
 800785c:	0800a334 	.word	0x0800a334

08007860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007864:	f7ff ffda 	bl	800781c <HAL_RCC_GetHCLKFreq>
 8007868:	4602      	mov	r2, r0
 800786a:	4b06      	ldr	r3, [pc, #24]	@ (8007884 <HAL_RCC_GetPCLK2Freq+0x24>)
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	0adb      	lsrs	r3, r3, #11
 8007870:	f003 0307 	and.w	r3, r3, #7
 8007874:	4904      	ldr	r1, [pc, #16]	@ (8007888 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007876:	5ccb      	ldrb	r3, [r1, r3]
 8007878:	f003 031f 	and.w	r3, r3, #31
 800787c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007880:	4618      	mov	r0, r3
 8007882:	bd80      	pop	{r7, pc}
 8007884:	40021000 	.word	0x40021000
 8007888:	0800a334 	.word	0x0800a334

0800788c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007892:	4b1e      	ldr	r3, [pc, #120]	@ (800790c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	f003 0303 	and.w	r3, r3, #3
 800789a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800789c:	4b1b      	ldr	r3, [pc, #108]	@ (800790c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	091b      	lsrs	r3, r3, #4
 80078a2:	f003 030f 	and.w	r3, r3, #15
 80078a6:	3301      	adds	r3, #1
 80078a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b03      	cmp	r3, #3
 80078ae:	d10c      	bne.n	80078ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078b0:	4a17      	ldr	r2, [pc, #92]	@ (8007910 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b8:	4a14      	ldr	r2, [pc, #80]	@ (800790c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078ba:	68d2      	ldr	r2, [r2, #12]
 80078bc:	0a12      	lsrs	r2, r2, #8
 80078be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80078c2:	fb02 f303 	mul.w	r3, r2, r3
 80078c6:	617b      	str	r3, [r7, #20]
    break;
 80078c8:	e00c      	b.n	80078e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078ca:	4a12      	ldr	r2, [pc, #72]	@ (8007914 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d2:	4a0e      	ldr	r2, [pc, #56]	@ (800790c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078d4:	68d2      	ldr	r2, [r2, #12]
 80078d6:	0a12      	lsrs	r2, r2, #8
 80078d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80078dc:	fb02 f303 	mul.w	r3, r2, r3
 80078e0:	617b      	str	r3, [r7, #20]
    break;
 80078e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80078e4:	4b09      	ldr	r3, [pc, #36]	@ (800790c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	0e5b      	lsrs	r3, r3, #25
 80078ea:	f003 0303 	and.w	r3, r3, #3
 80078ee:	3301      	adds	r3, #1
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80078fe:	687b      	ldr	r3, [r7, #4]
}
 8007900:	4618      	mov	r0, r3
 8007902:	371c      	adds	r7, #28
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	40021000 	.word	0x40021000
 8007910:	007a1200 	.word	0x007a1200
 8007914:	00f42400 	.word	0x00f42400

08007918 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007920:	2300      	movs	r3, #0
 8007922:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007924:	2300      	movs	r3, #0
 8007926:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 8098 	beq.w	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007936:	2300      	movs	r3, #0
 8007938:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800793a:	4b43      	ldr	r3, [pc, #268]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800793c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800793e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10d      	bne.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007946:	4b40      	ldr	r3, [pc, #256]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800794a:	4a3f      	ldr	r2, [pc, #252]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800794c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007950:	6593      	str	r3, [r2, #88]	@ 0x58
 8007952:	4b3d      	ldr	r3, [pc, #244]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800795a:	60bb      	str	r3, [r7, #8]
 800795c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800795e:	2301      	movs	r3, #1
 8007960:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007962:	4b3a      	ldr	r3, [pc, #232]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a39      	ldr	r2, [pc, #228]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800796c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800796e:	f7f9 ffb5 	bl	80018dc <HAL_GetTick>
 8007972:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007974:	e009      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007976:	f7f9 ffb1 	bl	80018dc <HAL_GetTick>
 800797a:	4602      	mov	r2, r0
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	2b02      	cmp	r3, #2
 8007982:	d902      	bls.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	74fb      	strb	r3, [r7, #19]
        break;
 8007988:	e005      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800798a:	4b30      	ldr	r3, [pc, #192]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007992:	2b00      	cmp	r3, #0
 8007994:	d0ef      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007996:	7cfb      	ldrb	r3, [r7, #19]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d159      	bne.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800799c:	4b2a      	ldr	r3, [pc, #168]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800799e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d01e      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d019      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80079b8:	4b23      	ldr	r3, [pc, #140]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80079c4:	4b20      	ldr	r3, [pc, #128]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ca:	4a1f      	ldr	r2, [pc, #124]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079d4:	4b1c      	ldr	r3, [pc, #112]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079da:	4a1b      	ldr	r2, [pc, #108]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80079e4:	4a18      	ldr	r2, [pc, #96]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d016      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f6:	f7f9 ff71 	bl	80018dc <HAL_GetTick>
 80079fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079fc:	e00b      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079fe:	f7f9 ff6d 	bl	80018dc <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d902      	bls.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	74fb      	strb	r3, [r7, #19]
            break;
 8007a14:	e006      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a16:	4b0c      	ldr	r3, [pc, #48]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a1c:	f003 0302 	and.w	r3, r3, #2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d0ec      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007a24:	7cfb      	ldrb	r3, [r7, #19]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10b      	bne.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a2a:	4b07      	ldr	r3, [pc, #28]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a38:	4903      	ldr	r1, [pc, #12]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007a40:	e008      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a42:	7cfb      	ldrb	r3, [r7, #19]
 8007a44:	74bb      	strb	r3, [r7, #18]
 8007a46:	e005      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007a48:	40021000 	.word	0x40021000
 8007a4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a50:	7cfb      	ldrb	r3, [r7, #19]
 8007a52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a54:	7c7b      	ldrb	r3, [r7, #17]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d105      	bne.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a5a:	4ba7      	ldr	r3, [pc, #668]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a5e:	4aa6      	ldr	r2, [pc, #664]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a72:	4ba1      	ldr	r3, [pc, #644]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a78:	f023 0203 	bic.w	r2, r3, #3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	499d      	ldr	r1, [pc, #628]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0302 	and.w	r3, r3, #2
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00a      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a94:	4b98      	ldr	r3, [pc, #608]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a9a:	f023 020c 	bic.w	r2, r3, #12
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	4995      	ldr	r1, [pc, #596]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0304 	and.w	r3, r3, #4
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00a      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ab6:	4b90      	ldr	r3, [pc, #576]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007abc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	498c      	ldr	r1, [pc, #560]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0308 	and.w	r3, r3, #8
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00a      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ad8:	4b87      	ldr	r3, [pc, #540]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ade:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	4984      	ldr	r1, [pc, #528]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0310 	and.w	r3, r3, #16
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00a      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007afa:	4b7f      	ldr	r3, [pc, #508]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	497b      	ldr	r1, [pc, #492]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0320 	and.w	r3, r3, #32
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00a      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b1c:	4b76      	ldr	r3, [pc, #472]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	4973      	ldr	r1, [pc, #460]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00a      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b3e:	4b6e      	ldr	r3, [pc, #440]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b44:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	69db      	ldr	r3, [r3, #28]
 8007b4c:	496a      	ldr	r1, [pc, #424]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00a      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b60:	4b65      	ldr	r3, [pc, #404]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b66:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	4962      	ldr	r1, [pc, #392]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b82:	4b5d      	ldr	r3, [pc, #372]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b90:	4959      	ldr	r1, [pc, #356]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00a      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ba4:	4b54      	ldr	r3, [pc, #336]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007baa:	f023 0203 	bic.w	r2, r3, #3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb2:	4951      	ldr	r1, [pc, #324]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00a      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007bc6:	4b4c      	ldr	r3, [pc, #304]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bcc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd4:	4948      	ldr	r1, [pc, #288]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d015      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007be8:	4b43      	ldr	r3, [pc, #268]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bf6:	4940      	ldr	r1, [pc, #256]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c06:	d105      	bne.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c08:	4b3b      	ldr	r3, [pc, #236]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	4a3a      	ldr	r2, [pc, #232]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c12:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d015      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007c20:	4b35      	ldr	r3, [pc, #212]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c26:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c2e:	4932      	ldr	r1, [pc, #200]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c3e:	d105      	bne.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c40:	4b2d      	ldr	r3, [pc, #180]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	4a2c      	ldr	r2, [pc, #176]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c4a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d015      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c58:	4b27      	ldr	r3, [pc, #156]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c5e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c66:	4924      	ldr	r1, [pc, #144]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c76:	d105      	bne.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c78:	4b1f      	ldr	r3, [pc, #124]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	4a1e      	ldr	r2, [pc, #120]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c82:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d015      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c90:	4b19      	ldr	r3, [pc, #100]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c9e:	4916      	ldr	r1, [pc, #88]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007caa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cae:	d105      	bne.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cb0:	4b11      	ldr	r3, [pc, #68]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	4a10      	ldr	r2, [pc, #64]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d019      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd6:	4908      	ldr	r1, [pc, #32]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ce6:	d109      	bne.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ce8:	4b03      	ldr	r3, [pc, #12]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	4a02      	ldr	r2, [pc, #8]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cf2:	60d3      	str	r3, [r2, #12]
 8007cf4:	e002      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007cf6:	bf00      	nop
 8007cf8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d015      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007d08:	4b29      	ldr	r3, [pc, #164]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d0e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d16:	4926      	ldr	r1, [pc, #152]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d26:	d105      	bne.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007d28:	4b21      	ldr	r3, [pc, #132]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	4a20      	ldr	r2, [pc, #128]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d32:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d015      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007d40:	4b1b      	ldr	r3, [pc, #108]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d46:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d4e:	4918      	ldr	r1, [pc, #96]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d50:	4313      	orrs	r3, r2
 8007d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d5e:	d105      	bne.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007d60:	4b13      	ldr	r3, [pc, #76]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	4a12      	ldr	r2, [pc, #72]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d6a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d015      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d78:	4b0d      	ldr	r3, [pc, #52]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d86:	490a      	ldr	r1, [pc, #40]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d96:	d105      	bne.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d98:	4b05      	ldr	r3, [pc, #20]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	4a04      	ldr	r2, [pc, #16]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007da2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007da4:	7cbb      	ldrb	r3, [r7, #18]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3718      	adds	r7, #24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	40021000 	.word	0x40021000

08007db4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e042      	b.n	8007e4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d106      	bne.n	8007dde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7f9 fbc1 	bl	8001560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2224      	movs	r2, #36	@ 0x24
 8007de2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 0201 	bic.w	r2, r2, #1
 8007df4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d002      	beq.n	8007e04 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fe86 	bl	8008b10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fb87 	bl	8008518 <UART_SetConfig>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d101      	bne.n	8007e14 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e01b      	b.n	8007e4c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685a      	ldr	r2, [r3, #4]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007e22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689a      	ldr	r2, [r3, #8]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007e32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f042 0201 	orr.w	r2, r2, #1
 8007e42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 ff05 	bl	8008c54 <UART_CheckIdleState>
 8007e4a:	4603      	mov	r3, r0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b0ba      	sub	sp, #232	@ 0xe8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	69db      	ldr	r3, [r3, #28]
 8007e62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007e7e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007e82:	4013      	ands	r3, r2
 8007e84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007e88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d11b      	bne.n	8007ec8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e94:	f003 0320 	and.w	r3, r3, #32
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d015      	beq.n	8007ec8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ea0:	f003 0320 	and.w	r3, r3, #32
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d105      	bne.n	8007eb4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007eac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d009      	beq.n	8007ec8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 8300 	beq.w	80084be <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	4798      	blx	r3
      }
      return;
 8007ec6:	e2fa      	b.n	80084be <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007ec8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 8123 	beq.w	8008118 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007ed2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007ed6:	4b8d      	ldr	r3, [pc, #564]	@ (800810c <HAL_UART_IRQHandler+0x2b8>)
 8007ed8:	4013      	ands	r3, r2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d106      	bne.n	8007eec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007ede:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007ee2:	4b8b      	ldr	r3, [pc, #556]	@ (8008110 <HAL_UART_IRQHandler+0x2bc>)
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 8116 	beq.w	8008118 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ef0:	f003 0301 	and.w	r3, r3, #1
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d011      	beq.n	8007f1c <HAL_UART_IRQHandler+0xc8>
 8007ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00b      	beq.n	8007f1c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f12:	f043 0201 	orr.w	r2, r3, #1
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d011      	beq.n	8007f4c <HAL_UART_IRQHandler+0xf8>
 8007f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00b      	beq.n	8007f4c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2202      	movs	r2, #2
 8007f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f42:	f043 0204 	orr.w	r2, r3, #4
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d011      	beq.n	8007f7c <HAL_UART_IRQHandler+0x128>
 8007f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f5c:	f003 0301 	and.w	r3, r3, #1
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00b      	beq.n	8007f7c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2204      	movs	r2, #4
 8007f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f72:	f043 0202 	orr.w	r2, r3, #2
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f80:	f003 0308 	and.w	r3, r3, #8
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d017      	beq.n	8007fb8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f8c:	f003 0320 	and.w	r3, r3, #32
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d105      	bne.n	8007fa0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007f94:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007f98:	4b5c      	ldr	r3, [pc, #368]	@ (800810c <HAL_UART_IRQHandler+0x2b8>)
 8007f9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00b      	beq.n	8007fb8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2208      	movs	r2, #8
 8007fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fae:	f043 0208 	orr.w	r2, r3, #8
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d012      	beq.n	8007fea <HAL_UART_IRQHandler+0x196>
 8007fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00c      	beq.n	8007fea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007fd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fe0:	f043 0220 	orr.w	r2, r3, #32
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f000 8266 	beq.w	80084c2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ffa:	f003 0320 	and.w	r3, r3, #32
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d013      	beq.n	800802a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008006:	f003 0320 	and.w	r3, r3, #32
 800800a:	2b00      	cmp	r3, #0
 800800c:	d105      	bne.n	800801a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800800e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008016:	2b00      	cmp	r3, #0
 8008018:	d007      	beq.n	800802a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008030:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800803e:	2b40      	cmp	r3, #64	@ 0x40
 8008040:	d005      	beq.n	800804e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008042:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008046:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800804a:	2b00      	cmp	r3, #0
 800804c:	d054      	beq.n	80080f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 ff17 	bl	8008e82 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800805e:	2b40      	cmp	r3, #64	@ 0x40
 8008060:	d146      	bne.n	80080f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3308      	adds	r3, #8
 8008068:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008070:	e853 3f00 	ldrex	r3, [r3]
 8008074:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008078:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800807c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008080:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3308      	adds	r3, #8
 800808a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800808e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008092:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008096:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800809a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800809e:	e841 2300 	strex	r3, r2, [r1]
 80080a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80080a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1d9      	bne.n	8008062 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d017      	beq.n	80080e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080be:	4a15      	ldr	r2, [pc, #84]	@ (8008114 <HAL_UART_IRQHandler+0x2c0>)
 80080c0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fb fe56 	bl	8003d7a <HAL_DMA_Abort_IT>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d019      	beq.n	8008108 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80080e2:	4610      	mov	r0, r2
 80080e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e6:	e00f      	b.n	8008108 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f9ff 	bl	80084ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ee:	e00b      	b.n	8008108 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f9fb 	bl	80084ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080f6:	e007      	b.n	8008108 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f9f7 	bl	80084ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008106:	e1dc      	b.n	80084c2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008108:	bf00      	nop
    return;
 800810a:	e1da      	b.n	80084c2 <HAL_UART_IRQHandler+0x66e>
 800810c:	10000001 	.word	0x10000001
 8008110:	04000120 	.word	0x04000120
 8008114:	08008f4f 	.word	0x08008f4f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800811c:	2b01      	cmp	r3, #1
 800811e:	f040 8170 	bne.w	8008402 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008126:	f003 0310 	and.w	r3, r3, #16
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 8169 	beq.w	8008402 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008134:	f003 0310 	and.w	r3, r3, #16
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 8162 	beq.w	8008402 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2210      	movs	r2, #16
 8008144:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008150:	2b40      	cmp	r3, #64	@ 0x40
 8008152:	f040 80d8 	bne.w	8008306 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008164:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008168:	2b00      	cmp	r3, #0
 800816a:	f000 80af 	beq.w	80082cc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008174:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008178:	429a      	cmp	r2, r3
 800817a:	f080 80a7 	bcs.w	80082cc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008184:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 0320 	and.w	r3, r3, #32
 8008196:	2b00      	cmp	r3, #0
 8008198:	f040 8087 	bne.w	80082aa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80081a8:	e853 3f00 	ldrex	r3, [r3]
 80081ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80081b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80081b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	461a      	mov	r2, r3
 80081c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80081d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80081d6:	e841 2300 	strex	r3, r2, [r1]
 80081da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80081de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1da      	bne.n	800819c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3308      	adds	r3, #8
 80081ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80081f0:	e853 3f00 	ldrex	r3, [r3]
 80081f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80081f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081f8:	f023 0301 	bic.w	r3, r3, #1
 80081fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3308      	adds	r3, #8
 8008206:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800820a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800820e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008210:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008212:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008216:	e841 2300 	strex	r3, r2, [r1]
 800821a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800821c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1e1      	bne.n	80081e6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3308      	adds	r3, #8
 8008228:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800822c:	e853 3f00 	ldrex	r3, [r3]
 8008230:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008232:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008234:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008238:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3308      	adds	r3, #8
 8008242:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008246:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008248:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800824c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800824e:	e841 2300 	strex	r3, r2, [r1]
 8008252:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008254:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1e3      	bne.n	8008222 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2220      	movs	r2, #32
 800825e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008270:	e853 3f00 	ldrex	r3, [r3]
 8008274:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008278:	f023 0310 	bic.w	r3, r3, #16
 800827c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	461a      	mov	r2, r3
 8008286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800828a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800828c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008290:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008292:	e841 2300 	strex	r3, r2, [r1]
 8008296:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008298:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1e4      	bne.n	8008268 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7fb fd0f 	bl	8003cc8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2202      	movs	r2, #2
 80082ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082bc:	b29b      	uxth	r3, r3
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	4619      	mov	r1, r3
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f91b 	bl	8008500 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80082ca:	e0fc      	b.n	80084c6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80082d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082d6:	429a      	cmp	r2, r3
 80082d8:	f040 80f5 	bne.w	80084c6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0320 	and.w	r3, r3, #32
 80082ea:	2b20      	cmp	r3, #32
 80082ec:	f040 80eb 	bne.w	80084c6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2202      	movs	r2, #2
 80082f4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f8fe 	bl	8008500 <HAL_UARTEx_RxEventCallback>
      return;
 8008304:	e0df      	b.n	80084c6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008312:	b29b      	uxth	r3, r3
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008320:	b29b      	uxth	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	f000 80d1 	beq.w	80084ca <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008328:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800832c:	2b00      	cmp	r3, #0
 800832e:	f000 80cc 	beq.w	80084ca <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833a:	e853 3f00 	ldrex	r3, [r3]
 800833e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008342:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008346:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008354:	647b      	str	r3, [r7, #68]	@ 0x44
 8008356:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008358:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800835a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800835c:	e841 2300 	strex	r3, r2, [r1]
 8008360:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1e4      	bne.n	8008332 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3308      	adds	r3, #8
 800836e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008372:	e853 3f00 	ldrex	r3, [r3]
 8008376:	623b      	str	r3, [r7, #32]
   return(result);
 8008378:	6a3b      	ldr	r3, [r7, #32]
 800837a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800837e:	f023 0301 	bic.w	r3, r3, #1
 8008382:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	3308      	adds	r3, #8
 800838c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008390:	633a      	str	r2, [r7, #48]	@ 0x30
 8008392:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008394:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008398:	e841 2300 	strex	r3, r2, [r1]
 800839c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800839e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1e1      	bne.n	8008368 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2220      	movs	r2, #32
 80083a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	e853 3f00 	ldrex	r3, [r3]
 80083c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f023 0310 	bic.w	r3, r3, #16
 80083cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	461a      	mov	r2, r3
 80083d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80083da:	61fb      	str	r3, [r7, #28]
 80083dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083de:	69b9      	ldr	r1, [r7, #24]
 80083e0:	69fa      	ldr	r2, [r7, #28]
 80083e2:	e841 2300 	strex	r3, r2, [r1]
 80083e6:	617b      	str	r3, [r7, #20]
   return(result);
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1e4      	bne.n	80083b8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2202      	movs	r2, #2
 80083f2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f880 	bl	8008500 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008400:	e063      	b.n	80084ca <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008406:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00e      	beq.n	800842c <HAL_UART_IRQHandler+0x5d8>
 800840e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d008      	beq.n	800842c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008422:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fdcf 	bl	8008fc8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800842a:	e051      	b.n	80084d0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800842c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008434:	2b00      	cmp	r3, #0
 8008436:	d014      	beq.n	8008462 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800843c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008440:	2b00      	cmp	r3, #0
 8008442:	d105      	bne.n	8008450 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008448:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d008      	beq.n	8008462 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008454:	2b00      	cmp	r3, #0
 8008456:	d03a      	beq.n	80084ce <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	4798      	blx	r3
    }
    return;
 8008460:	e035      	b.n	80084ce <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800846a:	2b00      	cmp	r3, #0
 800846c:	d009      	beq.n	8008482 <HAL_UART_IRQHandler+0x62e>
 800846e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fd79 	bl	8008f72 <UART_EndTransmit_IT>
    return;
 8008480:	e026      	b.n	80084d0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008486:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d009      	beq.n	80084a2 <HAL_UART_IRQHandler+0x64e>
 800848e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008492:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d003      	beq.n	80084a2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fda8 	bl	8008ff0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084a0:	e016      	b.n	80084d0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80084a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d010      	beq.n	80084d0 <HAL_UART_IRQHandler+0x67c>
 80084ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	da0c      	bge.n	80084d0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fd90 	bl	8008fdc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084bc:	e008      	b.n	80084d0 <HAL_UART_IRQHandler+0x67c>
      return;
 80084be:	bf00      	nop
 80084c0:	e006      	b.n	80084d0 <HAL_UART_IRQHandler+0x67c>
    return;
 80084c2:	bf00      	nop
 80084c4:	e004      	b.n	80084d0 <HAL_UART_IRQHandler+0x67c>
      return;
 80084c6:	bf00      	nop
 80084c8:	e002      	b.n	80084d0 <HAL_UART_IRQHandler+0x67c>
      return;
 80084ca:	bf00      	nop
 80084cc:	e000      	b.n	80084d0 <HAL_UART_IRQHandler+0x67c>
    return;
 80084ce:	bf00      	nop
  }
}
 80084d0:	37e8      	adds	r7, #232	@ 0xe8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop

080084d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800851c:	b08c      	sub	sp, #48	@ 0x30
 800851e:	af00      	add	r7, sp, #0
 8008520:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	689a      	ldr	r2, [r3, #8]
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	431a      	orrs	r2, r3
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	431a      	orrs	r2, r3
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	4313      	orrs	r3, r2
 800853e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	4baa      	ldr	r3, [pc, #680]	@ (80087f0 <UART_SetConfig+0x2d8>)
 8008548:	4013      	ands	r3, r2
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	6812      	ldr	r2, [r2, #0]
 800854e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008550:	430b      	orrs	r3, r1
 8008552:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	68da      	ldr	r2, [r3, #12]
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	430a      	orrs	r2, r1
 8008568:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a9f      	ldr	r2, [pc, #636]	@ (80087f4 <UART_SetConfig+0x2dc>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d004      	beq.n	8008584 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008580:	4313      	orrs	r3, r2
 8008582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800858e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	6812      	ldr	r2, [r2, #0]
 8008596:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008598:	430b      	orrs	r3, r1
 800859a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a2:	f023 010f 	bic.w	r1, r3, #15
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a90      	ldr	r2, [pc, #576]	@ (80087f8 <UART_SetConfig+0x2e0>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d125      	bne.n	8008608 <UART_SetConfig+0xf0>
 80085bc:	4b8f      	ldr	r3, [pc, #572]	@ (80087fc <UART_SetConfig+0x2e4>)
 80085be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085c2:	f003 0303 	and.w	r3, r3, #3
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d81a      	bhi.n	8008600 <UART_SetConfig+0xe8>
 80085ca:	a201      	add	r2, pc, #4	@ (adr r2, 80085d0 <UART_SetConfig+0xb8>)
 80085cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d0:	080085e1 	.word	0x080085e1
 80085d4:	080085f1 	.word	0x080085f1
 80085d8:	080085e9 	.word	0x080085e9
 80085dc:	080085f9 	.word	0x080085f9
 80085e0:	2301      	movs	r3, #1
 80085e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085e6:	e116      	b.n	8008816 <UART_SetConfig+0x2fe>
 80085e8:	2302      	movs	r3, #2
 80085ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085ee:	e112      	b.n	8008816 <UART_SetConfig+0x2fe>
 80085f0:	2304      	movs	r3, #4
 80085f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085f6:	e10e      	b.n	8008816 <UART_SetConfig+0x2fe>
 80085f8:	2308      	movs	r3, #8
 80085fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085fe:	e10a      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008600:	2310      	movs	r3, #16
 8008602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008606:	e106      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a7c      	ldr	r2, [pc, #496]	@ (8008800 <UART_SetConfig+0x2e8>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d138      	bne.n	8008684 <UART_SetConfig+0x16c>
 8008612:	4b7a      	ldr	r3, [pc, #488]	@ (80087fc <UART_SetConfig+0x2e4>)
 8008614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008618:	f003 030c 	and.w	r3, r3, #12
 800861c:	2b0c      	cmp	r3, #12
 800861e:	d82d      	bhi.n	800867c <UART_SetConfig+0x164>
 8008620:	a201      	add	r2, pc, #4	@ (adr r2, 8008628 <UART_SetConfig+0x110>)
 8008622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008626:	bf00      	nop
 8008628:	0800865d 	.word	0x0800865d
 800862c:	0800867d 	.word	0x0800867d
 8008630:	0800867d 	.word	0x0800867d
 8008634:	0800867d 	.word	0x0800867d
 8008638:	0800866d 	.word	0x0800866d
 800863c:	0800867d 	.word	0x0800867d
 8008640:	0800867d 	.word	0x0800867d
 8008644:	0800867d 	.word	0x0800867d
 8008648:	08008665 	.word	0x08008665
 800864c:	0800867d 	.word	0x0800867d
 8008650:	0800867d 	.word	0x0800867d
 8008654:	0800867d 	.word	0x0800867d
 8008658:	08008675 	.word	0x08008675
 800865c:	2300      	movs	r3, #0
 800865e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008662:	e0d8      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008664:	2302      	movs	r3, #2
 8008666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800866a:	e0d4      	b.n	8008816 <UART_SetConfig+0x2fe>
 800866c:	2304      	movs	r3, #4
 800866e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008672:	e0d0      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008674:	2308      	movs	r3, #8
 8008676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800867a:	e0cc      	b.n	8008816 <UART_SetConfig+0x2fe>
 800867c:	2310      	movs	r3, #16
 800867e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008682:	e0c8      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a5e      	ldr	r2, [pc, #376]	@ (8008804 <UART_SetConfig+0x2ec>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d125      	bne.n	80086da <UART_SetConfig+0x1c2>
 800868e:	4b5b      	ldr	r3, [pc, #364]	@ (80087fc <UART_SetConfig+0x2e4>)
 8008690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008694:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008698:	2b30      	cmp	r3, #48	@ 0x30
 800869a:	d016      	beq.n	80086ca <UART_SetConfig+0x1b2>
 800869c:	2b30      	cmp	r3, #48	@ 0x30
 800869e:	d818      	bhi.n	80086d2 <UART_SetConfig+0x1ba>
 80086a0:	2b20      	cmp	r3, #32
 80086a2:	d00a      	beq.n	80086ba <UART_SetConfig+0x1a2>
 80086a4:	2b20      	cmp	r3, #32
 80086a6:	d814      	bhi.n	80086d2 <UART_SetConfig+0x1ba>
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d002      	beq.n	80086b2 <UART_SetConfig+0x19a>
 80086ac:	2b10      	cmp	r3, #16
 80086ae:	d008      	beq.n	80086c2 <UART_SetConfig+0x1aa>
 80086b0:	e00f      	b.n	80086d2 <UART_SetConfig+0x1ba>
 80086b2:	2300      	movs	r3, #0
 80086b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086b8:	e0ad      	b.n	8008816 <UART_SetConfig+0x2fe>
 80086ba:	2302      	movs	r3, #2
 80086bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086c0:	e0a9      	b.n	8008816 <UART_SetConfig+0x2fe>
 80086c2:	2304      	movs	r3, #4
 80086c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086c8:	e0a5      	b.n	8008816 <UART_SetConfig+0x2fe>
 80086ca:	2308      	movs	r3, #8
 80086cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086d0:	e0a1      	b.n	8008816 <UART_SetConfig+0x2fe>
 80086d2:	2310      	movs	r3, #16
 80086d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086d8:	e09d      	b.n	8008816 <UART_SetConfig+0x2fe>
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a4a      	ldr	r2, [pc, #296]	@ (8008808 <UART_SetConfig+0x2f0>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d125      	bne.n	8008730 <UART_SetConfig+0x218>
 80086e4:	4b45      	ldr	r3, [pc, #276]	@ (80087fc <UART_SetConfig+0x2e4>)
 80086e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80086ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80086f0:	d016      	beq.n	8008720 <UART_SetConfig+0x208>
 80086f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80086f4:	d818      	bhi.n	8008728 <UART_SetConfig+0x210>
 80086f6:	2b80      	cmp	r3, #128	@ 0x80
 80086f8:	d00a      	beq.n	8008710 <UART_SetConfig+0x1f8>
 80086fa:	2b80      	cmp	r3, #128	@ 0x80
 80086fc:	d814      	bhi.n	8008728 <UART_SetConfig+0x210>
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d002      	beq.n	8008708 <UART_SetConfig+0x1f0>
 8008702:	2b40      	cmp	r3, #64	@ 0x40
 8008704:	d008      	beq.n	8008718 <UART_SetConfig+0x200>
 8008706:	e00f      	b.n	8008728 <UART_SetConfig+0x210>
 8008708:	2300      	movs	r3, #0
 800870a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800870e:	e082      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008710:	2302      	movs	r3, #2
 8008712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008716:	e07e      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008718:	2304      	movs	r3, #4
 800871a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800871e:	e07a      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008720:	2308      	movs	r3, #8
 8008722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008726:	e076      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008728:	2310      	movs	r3, #16
 800872a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800872e:	e072      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a35      	ldr	r2, [pc, #212]	@ (800880c <UART_SetConfig+0x2f4>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d12a      	bne.n	8008790 <UART_SetConfig+0x278>
 800873a:	4b30      	ldr	r3, [pc, #192]	@ (80087fc <UART_SetConfig+0x2e4>)
 800873c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008740:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008744:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008748:	d01a      	beq.n	8008780 <UART_SetConfig+0x268>
 800874a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800874e:	d81b      	bhi.n	8008788 <UART_SetConfig+0x270>
 8008750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008754:	d00c      	beq.n	8008770 <UART_SetConfig+0x258>
 8008756:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800875a:	d815      	bhi.n	8008788 <UART_SetConfig+0x270>
 800875c:	2b00      	cmp	r3, #0
 800875e:	d003      	beq.n	8008768 <UART_SetConfig+0x250>
 8008760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008764:	d008      	beq.n	8008778 <UART_SetConfig+0x260>
 8008766:	e00f      	b.n	8008788 <UART_SetConfig+0x270>
 8008768:	2300      	movs	r3, #0
 800876a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800876e:	e052      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008770:	2302      	movs	r3, #2
 8008772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008776:	e04e      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008778:	2304      	movs	r3, #4
 800877a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800877e:	e04a      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008780:	2308      	movs	r3, #8
 8008782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008786:	e046      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008788:	2310      	movs	r3, #16
 800878a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800878e:	e042      	b.n	8008816 <UART_SetConfig+0x2fe>
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a17      	ldr	r2, [pc, #92]	@ (80087f4 <UART_SetConfig+0x2dc>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d13a      	bne.n	8008810 <UART_SetConfig+0x2f8>
 800879a:	4b18      	ldr	r3, [pc, #96]	@ (80087fc <UART_SetConfig+0x2e4>)
 800879c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80087a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087a8:	d01a      	beq.n	80087e0 <UART_SetConfig+0x2c8>
 80087aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087ae:	d81b      	bhi.n	80087e8 <UART_SetConfig+0x2d0>
 80087b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087b4:	d00c      	beq.n	80087d0 <UART_SetConfig+0x2b8>
 80087b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087ba:	d815      	bhi.n	80087e8 <UART_SetConfig+0x2d0>
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d003      	beq.n	80087c8 <UART_SetConfig+0x2b0>
 80087c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087c4:	d008      	beq.n	80087d8 <UART_SetConfig+0x2c0>
 80087c6:	e00f      	b.n	80087e8 <UART_SetConfig+0x2d0>
 80087c8:	2300      	movs	r3, #0
 80087ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ce:	e022      	b.n	8008816 <UART_SetConfig+0x2fe>
 80087d0:	2302      	movs	r3, #2
 80087d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087d6:	e01e      	b.n	8008816 <UART_SetConfig+0x2fe>
 80087d8:	2304      	movs	r3, #4
 80087da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087de:	e01a      	b.n	8008816 <UART_SetConfig+0x2fe>
 80087e0:	2308      	movs	r3, #8
 80087e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087e6:	e016      	b.n	8008816 <UART_SetConfig+0x2fe>
 80087e8:	2310      	movs	r3, #16
 80087ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ee:	e012      	b.n	8008816 <UART_SetConfig+0x2fe>
 80087f0:	cfff69f3 	.word	0xcfff69f3
 80087f4:	40008000 	.word	0x40008000
 80087f8:	40013800 	.word	0x40013800
 80087fc:	40021000 	.word	0x40021000
 8008800:	40004400 	.word	0x40004400
 8008804:	40004800 	.word	0x40004800
 8008808:	40004c00 	.word	0x40004c00
 800880c:	40005000 	.word	0x40005000
 8008810:	2310      	movs	r3, #16
 8008812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4aae      	ldr	r2, [pc, #696]	@ (8008ad4 <UART_SetConfig+0x5bc>)
 800881c:	4293      	cmp	r3, r2
 800881e:	f040 8097 	bne.w	8008950 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008822:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008826:	2b08      	cmp	r3, #8
 8008828:	d823      	bhi.n	8008872 <UART_SetConfig+0x35a>
 800882a:	a201      	add	r2, pc, #4	@ (adr r2, 8008830 <UART_SetConfig+0x318>)
 800882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008830:	08008855 	.word	0x08008855
 8008834:	08008873 	.word	0x08008873
 8008838:	0800885d 	.word	0x0800885d
 800883c:	08008873 	.word	0x08008873
 8008840:	08008863 	.word	0x08008863
 8008844:	08008873 	.word	0x08008873
 8008848:	08008873 	.word	0x08008873
 800884c:	08008873 	.word	0x08008873
 8008850:	0800886b 	.word	0x0800886b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008854:	f7fe ffee 	bl	8007834 <HAL_RCC_GetPCLK1Freq>
 8008858:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800885a:	e010      	b.n	800887e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800885c:	4b9e      	ldr	r3, [pc, #632]	@ (8008ad8 <UART_SetConfig+0x5c0>)
 800885e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008860:	e00d      	b.n	800887e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008862:	f7fe ff79 	bl	8007758 <HAL_RCC_GetSysClockFreq>
 8008866:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008868:	e009      	b.n	800887e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800886a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800886e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008870:	e005      	b.n	800887e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008872:	2300      	movs	r3, #0
 8008874:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800887c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800887e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008880:	2b00      	cmp	r3, #0
 8008882:	f000 8130 	beq.w	8008ae6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800888a:	4a94      	ldr	r2, [pc, #592]	@ (8008adc <UART_SetConfig+0x5c4>)
 800888c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008890:	461a      	mov	r2, r3
 8008892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008894:	fbb3 f3f2 	udiv	r3, r3, r2
 8008898:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	685a      	ldr	r2, [r3, #4]
 800889e:	4613      	mov	r3, r2
 80088a0:	005b      	lsls	r3, r3, #1
 80088a2:	4413      	add	r3, r2
 80088a4:	69ba      	ldr	r2, [r7, #24]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d305      	bcc.n	80088b6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088b0:	69ba      	ldr	r2, [r7, #24]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d903      	bls.n	80088be <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80088bc:	e113      	b.n	8008ae6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c0:	2200      	movs	r2, #0
 80088c2:	60bb      	str	r3, [r7, #8]
 80088c4:	60fa      	str	r2, [r7, #12]
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ca:	4a84      	ldr	r2, [pc, #528]	@ (8008adc <UART_SetConfig+0x5c4>)
 80088cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	2200      	movs	r2, #0
 80088d4:	603b      	str	r3, [r7, #0]
 80088d6:	607a      	str	r2, [r7, #4]
 80088d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088e0:	f7f7 fc9a 	bl	8000218 <__aeabi_uldivmod>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	4610      	mov	r0, r2
 80088ea:	4619      	mov	r1, r3
 80088ec:	f04f 0200 	mov.w	r2, #0
 80088f0:	f04f 0300 	mov.w	r3, #0
 80088f4:	020b      	lsls	r3, r1, #8
 80088f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80088fa:	0202      	lsls	r2, r0, #8
 80088fc:	6979      	ldr	r1, [r7, #20]
 80088fe:	6849      	ldr	r1, [r1, #4]
 8008900:	0849      	lsrs	r1, r1, #1
 8008902:	2000      	movs	r0, #0
 8008904:	460c      	mov	r4, r1
 8008906:	4605      	mov	r5, r0
 8008908:	eb12 0804 	adds.w	r8, r2, r4
 800890c:	eb43 0905 	adc.w	r9, r3, r5
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	469a      	mov	sl, r3
 8008918:	4693      	mov	fp, r2
 800891a:	4652      	mov	r2, sl
 800891c:	465b      	mov	r3, fp
 800891e:	4640      	mov	r0, r8
 8008920:	4649      	mov	r1, r9
 8008922:	f7f7 fc79 	bl	8000218 <__aeabi_uldivmod>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4613      	mov	r3, r2
 800892c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008934:	d308      	bcc.n	8008948 <UART_SetConfig+0x430>
 8008936:	6a3b      	ldr	r3, [r7, #32]
 8008938:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800893c:	d204      	bcs.n	8008948 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6a3a      	ldr	r2, [r7, #32]
 8008944:	60da      	str	r2, [r3, #12]
 8008946:	e0ce      	b.n	8008ae6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800894e:	e0ca      	b.n	8008ae6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	69db      	ldr	r3, [r3, #28]
 8008954:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008958:	d166      	bne.n	8008a28 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800895a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800895e:	2b08      	cmp	r3, #8
 8008960:	d827      	bhi.n	80089b2 <UART_SetConfig+0x49a>
 8008962:	a201      	add	r2, pc, #4	@ (adr r2, 8008968 <UART_SetConfig+0x450>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	0800898d 	.word	0x0800898d
 800896c:	08008995 	.word	0x08008995
 8008970:	0800899d 	.word	0x0800899d
 8008974:	080089b3 	.word	0x080089b3
 8008978:	080089a3 	.word	0x080089a3
 800897c:	080089b3 	.word	0x080089b3
 8008980:	080089b3 	.word	0x080089b3
 8008984:	080089b3 	.word	0x080089b3
 8008988:	080089ab 	.word	0x080089ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800898c:	f7fe ff52 	bl	8007834 <HAL_RCC_GetPCLK1Freq>
 8008990:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008992:	e014      	b.n	80089be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008994:	f7fe ff64 	bl	8007860 <HAL_RCC_GetPCLK2Freq>
 8008998:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800899a:	e010      	b.n	80089be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800899c:	4b4e      	ldr	r3, [pc, #312]	@ (8008ad8 <UART_SetConfig+0x5c0>)
 800899e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089a0:	e00d      	b.n	80089be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089a2:	f7fe fed9 	bl	8007758 <HAL_RCC_GetSysClockFreq>
 80089a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089a8:	e009      	b.n	80089be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089b0:	e005      	b.n	80089be <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80089bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f000 8090 	beq.w	8008ae6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ca:	4a44      	ldr	r2, [pc, #272]	@ (8008adc <UART_SetConfig+0x5c4>)
 80089cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089d0:	461a      	mov	r2, r3
 80089d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80089d8:	005a      	lsls	r2, r3, #1
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	085b      	lsrs	r3, r3, #1
 80089e0:	441a      	add	r2, r3
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089ec:	6a3b      	ldr	r3, [r7, #32]
 80089ee:	2b0f      	cmp	r3, #15
 80089f0:	d916      	bls.n	8008a20 <UART_SetConfig+0x508>
 80089f2:	6a3b      	ldr	r3, [r7, #32]
 80089f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089f8:	d212      	bcs.n	8008a20 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	f023 030f 	bic.w	r3, r3, #15
 8008a02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	085b      	lsrs	r3, r3, #1
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	f003 0307 	and.w	r3, r3, #7
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	8bfb      	ldrh	r3, [r7, #30]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	8bfa      	ldrh	r2, [r7, #30]
 8008a1c:	60da      	str	r2, [r3, #12]
 8008a1e:	e062      	b.n	8008ae6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a26:	e05e      	b.n	8008ae6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a28:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a2c:	2b08      	cmp	r3, #8
 8008a2e:	d828      	bhi.n	8008a82 <UART_SetConfig+0x56a>
 8008a30:	a201      	add	r2, pc, #4	@ (adr r2, 8008a38 <UART_SetConfig+0x520>)
 8008a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a36:	bf00      	nop
 8008a38:	08008a5d 	.word	0x08008a5d
 8008a3c:	08008a65 	.word	0x08008a65
 8008a40:	08008a6d 	.word	0x08008a6d
 8008a44:	08008a83 	.word	0x08008a83
 8008a48:	08008a73 	.word	0x08008a73
 8008a4c:	08008a83 	.word	0x08008a83
 8008a50:	08008a83 	.word	0x08008a83
 8008a54:	08008a83 	.word	0x08008a83
 8008a58:	08008a7b 	.word	0x08008a7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a5c:	f7fe feea 	bl	8007834 <HAL_RCC_GetPCLK1Freq>
 8008a60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a62:	e014      	b.n	8008a8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a64:	f7fe fefc 	bl	8007860 <HAL_RCC_GetPCLK2Freq>
 8008a68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a6a:	e010      	b.n	8008a8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ad8 <UART_SetConfig+0x5c0>)
 8008a6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a70:	e00d      	b.n	8008a8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a72:	f7fe fe71 	bl	8007758 <HAL_RCC_GetSysClockFreq>
 8008a76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a78:	e009      	b.n	8008a8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a80:	e005      	b.n	8008a8e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008a8c:	bf00      	nop
    }

    if (pclk != 0U)
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d028      	beq.n	8008ae6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a98:	4a10      	ldr	r2, [pc, #64]	@ (8008adc <UART_SetConfig+0x5c4>)
 8008a9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	085b      	lsrs	r3, r3, #1
 8008aac:	441a      	add	r2, r3
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ab6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	2b0f      	cmp	r3, #15
 8008abc:	d910      	bls.n	8008ae0 <UART_SetConfig+0x5c8>
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ac4:	d20c      	bcs.n	8008ae0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ac6:	6a3b      	ldr	r3, [r7, #32]
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	60da      	str	r2, [r3, #12]
 8008ad0:	e009      	b.n	8008ae6 <UART_SetConfig+0x5ce>
 8008ad2:	bf00      	nop
 8008ad4:	40008000 	.word	0x40008000
 8008ad8:	00f42400 	.word	0x00f42400
 8008adc:	0800a33c 	.word	0x0800a33c
      }
      else
      {
        ret = HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	2200      	movs	r2, #0
 8008afa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	2200      	movs	r2, #0
 8008b00:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008b02:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3730      	adds	r7, #48	@ 0x30
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008b10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b1c:	f003 0308 	and.w	r3, r3, #8
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00a      	beq.n	8008b3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b3e:	f003 0301 	and.w	r3, r3, #1
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00a      	beq.n	8008b5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b60:	f003 0302 	and.w	r3, r3, #2
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00a      	beq.n	8008b7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b82:	f003 0304 	and.w	r3, r3, #4
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00a      	beq.n	8008ba0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	430a      	orrs	r2, r1
 8008b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba4:	f003 0310 	and.w	r3, r3, #16
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00a      	beq.n	8008bc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	430a      	orrs	r2, r1
 8008bc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc6:	f003 0320 	and.w	r3, r3, #32
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00a      	beq.n	8008be4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	430a      	orrs	r2, r1
 8008be2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d01a      	beq.n	8008c26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c0e:	d10a      	bne.n	8008c26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	605a      	str	r2, [r3, #4]
  }
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b098      	sub	sp, #96	@ 0x60
 8008c58:	af02      	add	r7, sp, #8
 8008c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c64:	f7f8 fe3a 	bl	80018dc <HAL_GetTick>
 8008c68:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0308 	and.w	r3, r3, #8
 8008c74:	2b08      	cmp	r3, #8
 8008c76:	d12f      	bne.n	8008cd8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c80:	2200      	movs	r2, #0
 8008c82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f88e 	bl	8008da8 <UART_WaitOnFlagUntilTimeout>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d022      	beq.n	8008cd8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9a:	e853 3f00 	ldrex	r3, [r3]
 8008c9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ca2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ca6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	461a      	mov	r2, r3
 8008cae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cb2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cb8:	e841 2300 	strex	r3, r2, [r1]
 8008cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1e6      	bne.n	8008c92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2220      	movs	r2, #32
 8008cc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e063      	b.n	8008da0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0304 	and.w	r3, r3, #4
 8008ce2:	2b04      	cmp	r3, #4
 8008ce4:	d149      	bne.n	8008d7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ce6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f857 	bl	8008da8 <UART_WaitOnFlagUntilTimeout>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d03c      	beq.n	8008d7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d08:	e853 3f00 	ldrex	r3, [r3]
 8008d0c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d0e:	6a3b      	ldr	r3, [r7, #32]
 8008d10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d20:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d26:	e841 2300 	strex	r3, r2, [r1]
 8008d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1e6      	bne.n	8008d00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3308      	adds	r3, #8
 8008d38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	e853 3f00 	ldrex	r3, [r3]
 8008d40:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f023 0301 	bic.w	r3, r3, #1
 8008d48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	3308      	adds	r3, #8
 8008d50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d52:	61fa      	str	r2, [r7, #28]
 8008d54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d56:	69b9      	ldr	r1, [r7, #24]
 8008d58:	69fa      	ldr	r2, [r7, #28]
 8008d5a:	e841 2300 	strex	r3, r2, [r1]
 8008d5e:	617b      	str	r3, [r7, #20]
   return(result);
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1e5      	bne.n	8008d32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2220      	movs	r2, #32
 8008d6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	e012      	b.n	8008da0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2220      	movs	r2, #32
 8008d7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2220      	movs	r2, #32
 8008d86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3758      	adds	r7, #88	@ 0x58
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	603b      	str	r3, [r7, #0]
 8008db4:	4613      	mov	r3, r2
 8008db6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008db8:	e04f      	b.n	8008e5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc0:	d04b      	beq.n	8008e5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dc2:	f7f8 fd8b 	bl	80018dc <HAL_GetTick>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	1ad3      	subs	r3, r2, r3
 8008dcc:	69ba      	ldr	r2, [r7, #24]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d302      	bcc.n	8008dd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d101      	bne.n	8008ddc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e04e      	b.n	8008e7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 0304 	and.w	r3, r3, #4
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d037      	beq.n	8008e5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	2b80      	cmp	r3, #128	@ 0x80
 8008dee:	d034      	beq.n	8008e5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	2b40      	cmp	r3, #64	@ 0x40
 8008df4:	d031      	beq.n	8008e5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	69db      	ldr	r3, [r3, #28]
 8008dfc:	f003 0308 	and.w	r3, r3, #8
 8008e00:	2b08      	cmp	r3, #8
 8008e02:	d110      	bne.n	8008e26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2208      	movs	r2, #8
 8008e0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f000 f838 	bl	8008e82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2208      	movs	r2, #8
 8008e16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e029      	b.n	8008e7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	69db      	ldr	r3, [r3, #28]
 8008e2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e34:	d111      	bne.n	8008e5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 f81e 	bl	8008e82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2220      	movs	r2, #32
 8008e4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e00f      	b.n	8008e7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	69da      	ldr	r2, [r3, #28]
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	4013      	ands	r3, r2
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	bf0c      	ite	eq
 8008e6a:	2301      	moveq	r3, #1
 8008e6c:	2300      	movne	r3, #0
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	461a      	mov	r2, r3
 8008e72:	79fb      	ldrb	r3, [r7, #7]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d0a0      	beq.n	8008dba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b095      	sub	sp, #84	@ 0x54
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e92:	e853 3f00 	ldrex	r3, [r3]
 8008e96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ea8:	643b      	str	r3, [r7, #64]	@ 0x40
 8008eaa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008eae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008eb0:	e841 2300 	strex	r3, r2, [r1]
 8008eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1e6      	bne.n	8008e8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3308      	adds	r3, #8
 8008ec2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	e853 3f00 	ldrex	r3, [r3]
 8008eca:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ed2:	f023 0301 	bic.w	r3, r3, #1
 8008ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3308      	adds	r3, #8
 8008ede:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ee0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ee8:	e841 2300 	strex	r3, r2, [r1]
 8008eec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1e3      	bne.n	8008ebc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d118      	bne.n	8008f2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	e853 3f00 	ldrex	r3, [r3]
 8008f08:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	f023 0310 	bic.w	r3, r3, #16
 8008f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	461a      	mov	r2, r3
 8008f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f1a:	61bb      	str	r3, [r7, #24]
 8008f1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1e:	6979      	ldr	r1, [r7, #20]
 8008f20:	69ba      	ldr	r2, [r7, #24]
 8008f22:	e841 2300 	strex	r3, r2, [r1]
 8008f26:	613b      	str	r3, [r7, #16]
   return(result);
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1e6      	bne.n	8008efc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2220      	movs	r2, #32
 8008f32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008f42:	bf00      	nop
 8008f44:	3754      	adds	r7, #84	@ 0x54
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr

08008f4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f7ff fac1 	bl	80084ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f6a:	bf00      	nop
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b088      	sub	sp, #32
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	e853 3f00 	ldrex	r3, [r3]
 8008f86:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f8e:	61fb      	str	r3, [r7, #28]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	461a      	mov	r2, r3
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	61bb      	str	r3, [r7, #24]
 8008f9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9c:	6979      	ldr	r1, [r7, #20]
 8008f9e:	69ba      	ldr	r2, [r7, #24]
 8008fa0:	e841 2300 	strex	r3, r2, [r1]
 8008fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1e6      	bne.n	8008f7a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2220      	movs	r2, #32
 8008fb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7ff fa8c 	bl	80084d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fc0:	bf00      	nop
 8008fc2:	3720      	adds	r7, #32
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008fd0:	bf00      	nop
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009012:	2b01      	cmp	r3, #1
 8009014:	d101      	bne.n	800901a <HAL_UARTEx_DisableFifoMode+0x16>
 8009016:	2302      	movs	r3, #2
 8009018:	e027      	b.n	800906a <HAL_UARTEx_DisableFifoMode+0x66>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2201      	movs	r2, #1
 800901e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2224      	movs	r2, #36	@ 0x24
 8009026:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f022 0201 	bic.w	r2, r2, #1
 8009040:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009048:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2220      	movs	r2, #32
 800905c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b084      	sub	sp, #16
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
 800907e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009086:	2b01      	cmp	r3, #1
 8009088:	d101      	bne.n	800908e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800908a:	2302      	movs	r3, #2
 800908c:	e02d      	b.n	80090ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2224      	movs	r2, #36	@ 0x24
 800909a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f022 0201 	bic.w	r2, r2, #1
 80090b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	683a      	ldr	r2, [r7, #0]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f850 	bl	8009170 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2220      	movs	r2, #32
 80090dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b084      	sub	sp, #16
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
 80090fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009102:	2b01      	cmp	r3, #1
 8009104:	d101      	bne.n	800910a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009106:	2302      	movs	r3, #2
 8009108:	e02d      	b.n	8009166 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2201      	movs	r2, #1
 800910e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2224      	movs	r2, #36	@ 0x24
 8009116:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f022 0201 	bic.w	r2, r2, #1
 8009130:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	683a      	ldr	r2, [r7, #0]
 8009142:	430a      	orrs	r2, r1
 8009144:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f812 	bl	8009170 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2220      	movs	r2, #32
 8009158:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
	...

08009170 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800917c:	2b00      	cmp	r3, #0
 800917e:	d108      	bne.n	8009192 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009190:	e031      	b.n	80091f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009192:	2308      	movs	r3, #8
 8009194:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009196:	2308      	movs	r3, #8
 8009198:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	0e5b      	lsrs	r3, r3, #25
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	f003 0307 	and.w	r3, r3, #7
 80091a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	0f5b      	lsrs	r3, r3, #29
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f003 0307 	and.w	r3, r3, #7
 80091b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091ba:	7bbb      	ldrb	r3, [r7, #14]
 80091bc:	7b3a      	ldrb	r2, [r7, #12]
 80091be:	4911      	ldr	r1, [pc, #68]	@ (8009204 <UARTEx_SetNbDataToProcess+0x94>)
 80091c0:	5c8a      	ldrb	r2, [r1, r2]
 80091c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80091c6:	7b3a      	ldrb	r2, [r7, #12]
 80091c8:	490f      	ldr	r1, [pc, #60]	@ (8009208 <UARTEx_SetNbDataToProcess+0x98>)
 80091ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
 80091da:	7b7a      	ldrb	r2, [r7, #13]
 80091dc:	4909      	ldr	r1, [pc, #36]	@ (8009204 <UARTEx_SetNbDataToProcess+0x94>)
 80091de:	5c8a      	ldrb	r2, [r1, r2]
 80091e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80091e4:	7b7a      	ldrb	r2, [r7, #13]
 80091e6:	4908      	ldr	r1, [pc, #32]	@ (8009208 <UARTEx_SetNbDataToProcess+0x98>)
 80091e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80091f6:	bf00      	nop
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	0800a354 	.word	0x0800a354
 8009208:	0800a35c 	.word	0x0800a35c

0800920c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800920c:	b480      	push	{r7}
 800920e:	b08b      	sub	sp, #44	@ 0x2c
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	fa93 f3a3 	rbit	r3, r3
 8009226:	613b      	str	r3, [r7, #16]
  return result;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009232:	2320      	movs	r3, #32
 8009234:	e003      	b.n	800923e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	fab3 f383 	clz	r3, r3
 800923c:	b2db      	uxtb	r3, r3
 800923e:	005b      	lsls	r3, r3, #1
 8009240:	2103      	movs	r1, #3
 8009242:	fa01 f303 	lsl.w	r3, r1, r3
 8009246:	43db      	mvns	r3, r3
 8009248:	401a      	ands	r2, r3
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800924e:	6a3b      	ldr	r3, [r7, #32]
 8009250:	fa93 f3a3 	rbit	r3, r3
 8009254:	61fb      	str	r3, [r7, #28]
  return result;
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800925a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925c:	2b00      	cmp	r3, #0
 800925e:	d101      	bne.n	8009264 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009260:	2320      	movs	r3, #32
 8009262:	e003      	b.n	800926c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009266:	fab3 f383 	clz	r3, r3
 800926a:	b2db      	uxtb	r3, r3
 800926c:	005b      	lsls	r3, r3, #1
 800926e:	6879      	ldr	r1, [r7, #4]
 8009270:	fa01 f303 	lsl.w	r3, r1, r3
 8009274:	431a      	orrs	r2, r3
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	601a      	str	r2, [r3, #0]
}
 800927a:	bf00      	nop
 800927c:	372c      	adds	r7, #44	@ 0x2c
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr

08009286 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8009286:	b480      	push	{r7}
 8009288:	b085      	sub	sp, #20
 800928a:	af00      	add	r7, sp, #0
 800928c:	60f8      	str	r0, [r7, #12]
 800928e:	60b9      	str	r1, [r7, #8]
 8009290:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	685a      	ldr	r2, [r3, #4]
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	43db      	mvns	r3, r3
 800929a:	401a      	ands	r2, r3
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	6879      	ldr	r1, [r7, #4]
 80092a0:	fb01 f303 	mul.w	r3, r1, r3
 80092a4:	431a      	orrs	r2, r3
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	605a      	str	r2, [r3, #4]
}
 80092aa:	bf00      	nop
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b08b      	sub	sp, #44	@ 0x2c
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	60f8      	str	r0, [r7, #12]
 80092be:	60b9      	str	r1, [r7, #8]
 80092c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	689a      	ldr	r2, [r3, #8]
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	fa93 f3a3 	rbit	r3, r3
 80092d0:	613b      	str	r3, [r7, #16]
  return result;
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d101      	bne.n	80092e0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80092dc:	2320      	movs	r3, #32
 80092de:	e003      	b.n	80092e8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	fab3 f383 	clz	r3, r3
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	005b      	lsls	r3, r3, #1
 80092ea:	2103      	movs	r1, #3
 80092ec:	fa01 f303 	lsl.w	r3, r1, r3
 80092f0:	43db      	mvns	r3, r3
 80092f2:	401a      	ands	r2, r3
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092f8:	6a3b      	ldr	r3, [r7, #32]
 80092fa:	fa93 f3a3 	rbit	r3, r3
 80092fe:	61fb      	str	r3, [r7, #28]
  return result;
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800930a:	2320      	movs	r3, #32
 800930c:	e003      	b.n	8009316 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800930e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009310:	fab3 f383 	clz	r3, r3
 8009314:	b2db      	uxtb	r3, r3
 8009316:	005b      	lsls	r3, r3, #1
 8009318:	6879      	ldr	r1, [r7, #4]
 800931a:	fa01 f303 	lsl.w	r3, r1, r3
 800931e:	431a      	orrs	r2, r3
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8009324:	bf00      	nop
 8009326:	372c      	adds	r7, #44	@ 0x2c
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009330:	b480      	push	{r7}
 8009332:	b08b      	sub	sp, #44	@ 0x2c
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	68da      	ldr	r2, [r3, #12]
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	fa93 f3a3 	rbit	r3, r3
 800934a:	613b      	str	r3, [r7, #16]
  return result;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d101      	bne.n	800935a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8009356:	2320      	movs	r3, #32
 8009358:	e003      	b.n	8009362 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	fab3 f383 	clz	r3, r3
 8009360:	b2db      	uxtb	r3, r3
 8009362:	005b      	lsls	r3, r3, #1
 8009364:	2103      	movs	r1, #3
 8009366:	fa01 f303 	lsl.w	r3, r1, r3
 800936a:	43db      	mvns	r3, r3
 800936c:	401a      	ands	r2, r3
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009372:	6a3b      	ldr	r3, [r7, #32]
 8009374:	fa93 f3a3 	rbit	r3, r3
 8009378:	61fb      	str	r3, [r7, #28]
  return result;
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800937e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009380:	2b00      	cmp	r3, #0
 8009382:	d101      	bne.n	8009388 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009384:	2320      	movs	r3, #32
 8009386:	e003      	b.n	8009390 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938a:	fab3 f383 	clz	r3, r3
 800938e:	b2db      	uxtb	r3, r3
 8009390:	005b      	lsls	r3, r3, #1
 8009392:	6879      	ldr	r1, [r7, #4]
 8009394:	fa01 f303 	lsl.w	r3, r1, r3
 8009398:	431a      	orrs	r2, r3
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	60da      	str	r2, [r3, #12]
}
 800939e:	bf00      	nop
 80093a0:	372c      	adds	r7, #44	@ 0x2c
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b08b      	sub	sp, #44	@ 0x2c
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	60f8      	str	r0, [r7, #12]
 80093b2:	60b9      	str	r1, [r7, #8]
 80093b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6a1a      	ldr	r2, [r3, #32]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	fa93 f3a3 	rbit	r3, r3
 80093c4:	613b      	str	r3, [r7, #16]
  return result;
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d101      	bne.n	80093d4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80093d0:	2320      	movs	r3, #32
 80093d2:	e003      	b.n	80093dc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	fab3 f383 	clz	r3, r3
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	210f      	movs	r1, #15
 80093e0:	fa01 f303 	lsl.w	r3, r1, r3
 80093e4:	43db      	mvns	r3, r3
 80093e6:	401a      	ands	r2, r3
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093ec:	6a3b      	ldr	r3, [r7, #32]
 80093ee:	fa93 f3a3 	rbit	r3, r3
 80093f2:	61fb      	str	r3, [r7, #28]
  return result;
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80093f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d101      	bne.n	8009402 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80093fe:	2320      	movs	r3, #32
 8009400:	e003      	b.n	800940a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8009402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009404:	fab3 f383 	clz	r3, r3
 8009408:	b2db      	uxtb	r3, r3
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	6879      	ldr	r1, [r7, #4]
 800940e:	fa01 f303 	lsl.w	r3, r1, r3
 8009412:	431a      	orrs	r2, r3
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8009418:	bf00      	nop
 800941a:	372c      	adds	r7, #44	@ 0x2c
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009424:	b480      	push	{r7}
 8009426:	b08b      	sub	sp, #44	@ 0x2c
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	0a1b      	lsrs	r3, r3, #8
 8009438:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	fa93 f3a3 	rbit	r3, r3
 8009440:	613b      	str	r3, [r7, #16]
  return result;
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d101      	bne.n	8009450 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800944c:	2320      	movs	r3, #32
 800944e:	e003      	b.n	8009458 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	fab3 f383 	clz	r3, r3
 8009456:	b2db      	uxtb	r3, r3
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	210f      	movs	r1, #15
 800945c:	fa01 f303 	lsl.w	r3, r1, r3
 8009460:	43db      	mvns	r3, r3
 8009462:	401a      	ands	r2, r3
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	0a1b      	lsrs	r3, r3, #8
 8009468:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800946a:	6a3b      	ldr	r3, [r7, #32]
 800946c:	fa93 f3a3 	rbit	r3, r3
 8009470:	61fb      	str	r3, [r7, #28]
  return result;
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800947c:	2320      	movs	r3, #32
 800947e:	e003      	b.n	8009488 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009482:	fab3 f383 	clz	r3, r3
 8009486:	b2db      	uxtb	r3, r3
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	6879      	ldr	r1, [r7, #4]
 800948c:	fa01 f303 	lsl.w	r3, r1, r3
 8009490:	431a      	orrs	r2, r3
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8009496:	bf00      	nop
 8009498:	372c      	adds	r7, #44	@ 0x2c
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b088      	sub	sp, #32
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	fa93 f3a3 	rbit	r3, r3
 80094b8:	60fb      	str	r3, [r7, #12]
  return result;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d101      	bne.n	80094c8 <LL_GPIO_Init+0x26>
    return 32U;
 80094c4:	2320      	movs	r3, #32
 80094c6:	e003      	b.n	80094d0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	fab3 f383 	clz	r3, r3
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80094d2:	e048      	b.n	8009566 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	2101      	movs	r1, #1
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	fa01 f303 	lsl.w	r3, r1, r3
 80094e0:	4013      	ands	r3, r2
 80094e2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d03a      	beq.n	8009560 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d003      	beq.n	80094fa <LL_GPIO_Init+0x58>
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d10e      	bne.n	8009518 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	461a      	mov	r2, r3
 8009500:	69b9      	ldr	r1, [r7, #24]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f7ff fed7 	bl	80092b6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	6819      	ldr	r1, [r3, #0]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	461a      	mov	r2, r3
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f7ff feb7 	bl	8009286 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	461a      	mov	r2, r3
 800951e:	69b9      	ldr	r1, [r7, #24]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f7ff ff05 	bl	8009330 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	2b02      	cmp	r3, #2
 800952c:	d111      	bne.n	8009552 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	2bff      	cmp	r3, #255	@ 0xff
 8009532:	d807      	bhi.n	8009544 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	695b      	ldr	r3, [r3, #20]
 8009538:	461a      	mov	r2, r3
 800953a:	69b9      	ldr	r1, [r7, #24]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7ff ff34 	bl	80093aa <LL_GPIO_SetAFPin_0_7>
 8009542:	e006      	b.n	8009552 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	695b      	ldr	r3, [r3, #20]
 8009548:	461a      	mov	r2, r3
 800954a:	69b9      	ldr	r1, [r7, #24]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f7ff ff69 	bl	8009424 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	461a      	mov	r2, r3
 8009558:	69b9      	ldr	r1, [r7, #24]
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7ff fe56 	bl	800920c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	3301      	adds	r3, #1
 8009564:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	fa22 f303 	lsr.w	r3, r2, r3
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1af      	bne.n	80094d4 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3720      	adds	r7, #32
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800957e:	b480      	push	{r7}
 8009580:	b085      	sub	sp, #20
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009586:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800958a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009592:	b29a      	uxth	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	b29b      	uxth	r3, r3
 8009598:	43db      	mvns	r3, r3
 800959a:	b29b      	uxth	r3, r3
 800959c:	4013      	ands	r3, r2
 800959e:	b29a      	uxth	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3714      	adds	r7, #20
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	1d3b      	adds	r3, r7, #4
 80095be:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b0ac      	sub	sp, #176	@ 0xb0
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	785b      	ldrb	r3, [r3, #1]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	f040 84ca 	bne.w	8009f98 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	699a      	ldr	r2, [r3, #24]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	429a      	cmp	r2, r3
 800960e:	d904      	bls.n	800961a <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009618:	e003      	b.n	8009622 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	699b      	ldr	r3, [r3, #24]
 800961e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	7b1b      	ldrb	r3, [r3, #12]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d122      	bne.n	8009670 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	6959      	ldr	r1, [r3, #20]
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	88da      	ldrh	r2, [r3, #6]
 8009632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009636:	b29b      	uxth	r3, r3
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fdac 	bl	800a196 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	613b      	str	r3, [r7, #16]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009648:	b29b      	uxth	r3, r3
 800964a:	461a      	mov	r2, r3
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	4413      	add	r3, r2
 8009650:	613b      	str	r3, [r7, #16]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	00da      	lsls	r2, r3, #3
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	4413      	add	r3, r2
 800965c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009660:	60fb      	str	r3, [r7, #12]
 8009662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009666:	b29a      	uxth	r2, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	801a      	strh	r2, [r3, #0]
 800966c:	f000 bc6f 	b.w	8009f4e <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	78db      	ldrb	r3, [r3, #3]
 8009674:	2b02      	cmp	r3, #2
 8009676:	f040 831e 	bne.w	8009cb6 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	6a1a      	ldr	r2, [r3, #32]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	429a      	cmp	r2, r3
 8009684:	f240 82cf 	bls.w	8009c26 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	4413      	add	r3, r2
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	b29b      	uxth	r3, r3
 8009696:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800969a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800969e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	441a      	add	r2, r3
 80096ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80096b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096b8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80096bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	6a1a      	ldr	r2, [r3, #32]
 80096c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096cc:	1ad2      	subs	r2, r2, r3
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	881b      	ldrh	r3, [r3, #0]
 80096de:	b29b      	uxth	r3, r3
 80096e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f000 814f 	beq.w	8009988 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	785b      	ldrb	r3, [r3, #1]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d16b      	bne.n	80097ce <USB_EPStartXfer+0x1de>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009700:	b29b      	uxth	r3, r3
 8009702:	461a      	mov	r2, r3
 8009704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009706:	4413      	add	r3, r2
 8009708:	62bb      	str	r3, [r7, #40]	@ 0x28
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	00da      	lsls	r2, r3, #3
 8009710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009712:	4413      	add	r3, r2
 8009714:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009718:	627b      	str	r3, [r7, #36]	@ 0x24
 800971a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971c:	881b      	ldrh	r3, [r3, #0]
 800971e:	b29b      	uxth	r3, r3
 8009720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009724:	b29a      	uxth	r2, r3
 8009726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009728:	801a      	strh	r2, [r3, #0]
 800972a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10a      	bne.n	8009748 <USB_EPStartXfer+0x158>
 8009732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009734:	881b      	ldrh	r3, [r3, #0]
 8009736:	b29b      	uxth	r3, r3
 8009738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800973c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009740:	b29a      	uxth	r2, r3
 8009742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009744:	801a      	strh	r2, [r3, #0]
 8009746:	e05b      	b.n	8009800 <USB_EPStartXfer+0x210>
 8009748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800974c:	2b3e      	cmp	r3, #62	@ 0x3e
 800974e:	d81c      	bhi.n	800978a <USB_EPStartXfer+0x19a>
 8009750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009754:	085b      	lsrs	r3, r3, #1
 8009756:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800975a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	2b00      	cmp	r3, #0
 8009764:	d004      	beq.n	8009770 <USB_EPStartXfer+0x180>
 8009766:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800976a:	3301      	adds	r3, #1
 800976c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009772:	881b      	ldrh	r3, [r3, #0]
 8009774:	b29a      	uxth	r2, r3
 8009776:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800977a:	b29b      	uxth	r3, r3
 800977c:	029b      	lsls	r3, r3, #10
 800977e:	b29b      	uxth	r3, r3
 8009780:	4313      	orrs	r3, r2
 8009782:	b29a      	uxth	r2, r3
 8009784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009786:	801a      	strh	r2, [r3, #0]
 8009788:	e03a      	b.n	8009800 <USB_EPStartXfer+0x210>
 800978a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800978e:	095b      	lsrs	r3, r3, #5
 8009790:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009794:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009798:	f003 031f 	and.w	r3, r3, #31
 800979c:	2b00      	cmp	r3, #0
 800979e:	d104      	bne.n	80097aa <USB_EPStartXfer+0x1ba>
 80097a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80097a4:	3b01      	subs	r3, #1
 80097a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80097aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ac:	881b      	ldrh	r3, [r3, #0]
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	029b      	lsls	r3, r3, #10
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	4313      	orrs	r3, r2
 80097bc:	b29b      	uxth	r3, r3
 80097be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ca:	801a      	strh	r2, [r3, #0]
 80097cc:	e018      	b.n	8009800 <USB_EPStartXfer+0x210>
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	785b      	ldrb	r3, [r3, #1]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d114      	bne.n	8009800 <USB_EPStartXfer+0x210>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097dc:	b29b      	uxth	r3, r3
 80097de:	461a      	mov	r2, r3
 80097e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e2:	4413      	add	r3, r2
 80097e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	00da      	lsls	r2, r3, #3
 80097ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ee:	4413      	add	r3, r2
 80097f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80097f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	895b      	ldrh	r3, [r3, #10]
 8009804:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	6959      	ldr	r1, [r3, #20]
 800980c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009810:	b29b      	uxth	r3, r3
 8009812:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fcbd 	bl	800a196 <USB_WritePMA>
            ep->xfer_buff += len;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	695a      	ldr	r2, [r3, #20]
 8009820:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009824:	441a      	add	r2, r3
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	6a1a      	ldr	r2, [r3, #32]
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	429a      	cmp	r2, r3
 8009834:	d907      	bls.n	8009846 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	6a1a      	ldr	r2, [r3, #32]
 800983a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800983e:	1ad2      	subs	r2, r2, r3
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	621a      	str	r2, [r3, #32]
 8009844:	e006      	b.n	8009854 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	6a1b      	ldr	r3, [r3, #32]
 800984a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2200      	movs	r2, #0
 8009852:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	785b      	ldrb	r3, [r3, #1]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d16b      	bne.n	8009934 <USB_EPStartXfer+0x344>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	61bb      	str	r3, [r7, #24]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009866:	b29b      	uxth	r3, r3
 8009868:	461a      	mov	r2, r3
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	4413      	add	r3, r2
 800986e:	61bb      	str	r3, [r7, #24]
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	00da      	lsls	r2, r3, #3
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	4413      	add	r3, r2
 800987a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800987e:	617b      	str	r3, [r7, #20]
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	881b      	ldrh	r3, [r3, #0]
 8009884:	b29b      	uxth	r3, r3
 8009886:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800988a:	b29a      	uxth	r2, r3
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	801a      	strh	r2, [r3, #0]
 8009890:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009894:	2b00      	cmp	r3, #0
 8009896:	d10a      	bne.n	80098ae <USB_EPStartXfer+0x2be>
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	881b      	ldrh	r3, [r3, #0]
 800989c:	b29b      	uxth	r3, r3
 800989e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	801a      	strh	r2, [r3, #0]
 80098ac:	e05d      	b.n	800996a <USB_EPStartXfer+0x37a>
 80098ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80098b4:	d81c      	bhi.n	80098f0 <USB_EPStartXfer+0x300>
 80098b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098ba:	085b      	lsrs	r3, r3, #1
 80098bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80098c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098c4:	f003 0301 	and.w	r3, r3, #1
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d004      	beq.n	80098d6 <USB_EPStartXfer+0x2e6>
 80098cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80098d0:	3301      	adds	r3, #1
 80098d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	881b      	ldrh	r3, [r3, #0]
 80098da:	b29a      	uxth	r2, r3
 80098dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	029b      	lsls	r3, r3, #10
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	4313      	orrs	r3, r2
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	801a      	strh	r2, [r3, #0]
 80098ee:	e03c      	b.n	800996a <USB_EPStartXfer+0x37a>
 80098f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098f4:	095b      	lsrs	r3, r3, #5
 80098f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80098fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098fe:	f003 031f 	and.w	r3, r3, #31
 8009902:	2b00      	cmp	r3, #0
 8009904:	d104      	bne.n	8009910 <USB_EPStartXfer+0x320>
 8009906:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800990a:	3b01      	subs	r3, #1
 800990c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	881b      	ldrh	r3, [r3, #0]
 8009914:	b29a      	uxth	r2, r3
 8009916:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800991a:	b29b      	uxth	r3, r3
 800991c:	029b      	lsls	r3, r3, #10
 800991e:	b29b      	uxth	r3, r3
 8009920:	4313      	orrs	r3, r2
 8009922:	b29b      	uxth	r3, r3
 8009924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800992c:	b29a      	uxth	r2, r3
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	801a      	strh	r2, [r3, #0]
 8009932:	e01a      	b.n	800996a <USB_EPStartXfer+0x37a>
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	785b      	ldrb	r3, [r3, #1]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d116      	bne.n	800996a <USB_EPStartXfer+0x37a>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	623b      	str	r3, [r7, #32]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009946:	b29b      	uxth	r3, r3
 8009948:	461a      	mov	r2, r3
 800994a:	6a3b      	ldr	r3, [r7, #32]
 800994c:	4413      	add	r3, r2
 800994e:	623b      	str	r3, [r7, #32]
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	00da      	lsls	r2, r3, #3
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	4413      	add	r3, r2
 800995a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800995e:	61fb      	str	r3, [r7, #28]
 8009960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009964:	b29a      	uxth	r2, r3
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	891b      	ldrh	r3, [r3, #8]
 800996e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	6959      	ldr	r1, [r3, #20]
 8009976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800997a:	b29b      	uxth	r3, r3
 800997c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 fc08 	bl	800a196 <USB_WritePMA>
 8009986:	e2e2      	b.n	8009f4e <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	785b      	ldrb	r3, [r3, #1]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d16b      	bne.n	8009a68 <USB_EPStartXfer+0x478>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800999a:	b29b      	uxth	r3, r3
 800999c:	461a      	mov	r2, r3
 800999e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099a0:	4413      	add	r3, r2
 80099a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	00da      	lsls	r2, r3, #3
 80099aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099ac:	4413      	add	r3, r2
 80099ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80099b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80099b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099b6:	881b      	ldrh	r3, [r3, #0]
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099be:	b29a      	uxth	r2, r3
 80099c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099c2:	801a      	strh	r2, [r3, #0]
 80099c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d10a      	bne.n	80099e2 <USB_EPStartXfer+0x3f2>
 80099cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099ce:	881b      	ldrh	r3, [r3, #0]
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099da:	b29a      	uxth	r2, r3
 80099dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099de:	801a      	strh	r2, [r3, #0]
 80099e0:	e05d      	b.n	8009a9e <USB_EPStartXfer+0x4ae>
 80099e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80099e8:	d81c      	bhi.n	8009a24 <USB_EPStartXfer+0x434>
 80099ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099ee:	085b      	lsrs	r3, r3, #1
 80099f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80099f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099f8:	f003 0301 	and.w	r3, r3, #1
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d004      	beq.n	8009a0a <USB_EPStartXfer+0x41a>
 8009a00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a04:	3301      	adds	r3, #1
 8009a06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009a0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a0c:	881b      	ldrh	r3, [r3, #0]
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	029b      	lsls	r3, r3, #10
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a20:	801a      	strh	r2, [r3, #0]
 8009a22:	e03c      	b.n	8009a9e <USB_EPStartXfer+0x4ae>
 8009a24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a28:	095b      	lsrs	r3, r3, #5
 8009a2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009a2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a32:	f003 031f 	and.w	r3, r3, #31
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d104      	bne.n	8009a44 <USB_EPStartXfer+0x454>
 8009a3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a46:	881b      	ldrh	r3, [r3, #0]
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	029b      	lsls	r3, r3, #10
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	4313      	orrs	r3, r2
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a64:	801a      	strh	r2, [r3, #0]
 8009a66:	e01a      	b.n	8009a9e <USB_EPStartXfer+0x4ae>
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	785b      	ldrb	r3, [r3, #1]
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d116      	bne.n	8009a9e <USB_EPStartXfer+0x4ae>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a80:	4413      	add	r3, r2
 8009a82:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	00da      	lsls	r2, r3, #3
 8009a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a8c:	4413      	add	r3, r2
 8009a8e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	891b      	ldrh	r3, [r3, #8]
 8009aa2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	6959      	ldr	r1, [r3, #20]
 8009aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fb6e 	bl	800a196 <USB_WritePMA>
            ep->xfer_buff += len;
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	695a      	ldr	r2, [r3, #20]
 8009abe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ac2:	441a      	add	r2, r3
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	6a1a      	ldr	r2, [r3, #32]
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d907      	bls.n	8009ae4 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	6a1a      	ldr	r2, [r3, #32]
 8009ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009adc:	1ad2      	subs	r2, r2, r3
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	621a      	str	r2, [r3, #32]
 8009ae2:	e006      	b.n	8009af2 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	6a1b      	ldr	r3, [r3, #32]
 8009ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	2200      	movs	r2, #0
 8009af0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	785b      	ldrb	r3, [r3, #1]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d16b      	bne.n	8009bd6 <USB_EPStartXfer+0x5e6>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0e:	4413      	add	r3, r2
 8009b10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	00da      	lsls	r2, r3, #3
 8009b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1a:	4413      	add	r3, r2
 8009b1c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009b20:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b24:	881b      	ldrh	r3, [r3, #0]
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b30:	801a      	strh	r2, [r3, #0]
 8009b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10a      	bne.n	8009b50 <USB_EPStartXfer+0x560>
 8009b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b3c:	881b      	ldrh	r3, [r3, #0]
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b48:	b29a      	uxth	r2, r3
 8009b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b4c:	801a      	strh	r2, [r3, #0]
 8009b4e:	e05b      	b.n	8009c08 <USB_EPStartXfer+0x618>
 8009b50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b54:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b56:	d81c      	bhi.n	8009b92 <USB_EPStartXfer+0x5a2>
 8009b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b5c:	085b      	lsrs	r3, r3, #1
 8009b5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009b62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b66:	f003 0301 	and.w	r3, r3, #1
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d004      	beq.n	8009b78 <USB_EPStartXfer+0x588>
 8009b6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b72:	3301      	adds	r3, #1
 8009b74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b7a:	881b      	ldrh	r3, [r3, #0]
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	029b      	lsls	r3, r3, #10
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b8e:	801a      	strh	r2, [r3, #0]
 8009b90:	e03a      	b.n	8009c08 <USB_EPStartXfer+0x618>
 8009b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b96:	095b      	lsrs	r3, r3, #5
 8009b98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ba0:	f003 031f 	and.w	r3, r3, #31
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d104      	bne.n	8009bb2 <USB_EPStartXfer+0x5c2>
 8009ba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009bac:	3b01      	subs	r3, #1
 8009bae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bb4:	881b      	ldrh	r3, [r3, #0]
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	029b      	lsls	r3, r3, #10
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bd2:	801a      	strh	r2, [r3, #0]
 8009bd4:	e018      	b.n	8009c08 <USB_EPStartXfer+0x618>
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	785b      	ldrb	r3, [r3, #1]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d114      	bne.n	8009c08 <USB_EPStartXfer+0x618>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	461a      	mov	r2, r3
 8009be8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bea:	4413      	add	r3, r2
 8009bec:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	00da      	lsls	r2, r3, #3
 8009bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bf6:	4413      	add	r3, r2
 8009bf8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c06:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	895b      	ldrh	r3, [r3, #10]
 8009c0c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	6959      	ldr	r1, [r3, #20]
 8009c14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 fab9 	bl	800a196 <USB_WritePMA>
 8009c24:	e193      	b.n	8009f4e <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	6a1b      	ldr	r3, [r3, #32]
 8009c2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	4413      	add	r3, r2
 8009c38:	881b      	ldrh	r3, [r3, #0]
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009c40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c44:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	441a      	add	r2, r3
 8009c52:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009c56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	461a      	mov	r2, r3
 8009c78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c7a:	4413      	add	r3, r2
 8009c7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	00da      	lsls	r2, r3, #3
 8009c84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c86:	4413      	add	r3, r2
 8009c88:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c92:	b29a      	uxth	r2, r3
 8009c94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c96:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	891b      	ldrh	r3, [r3, #8]
 8009c9c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	6959      	ldr	r1, [r3, #20]
 8009ca4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fa71 	bl	800a196 <USB_WritePMA>
 8009cb4:	e14b      	b.n	8009f4e <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	6a1a      	ldr	r2, [r3, #32]
 8009cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cbe:	1ad2      	subs	r2, r2, r3
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	4413      	add	r3, r2
 8009cce:	881b      	ldrh	r3, [r3, #0]
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f000 809a 	beq.w	8009e10 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	673b      	str	r3, [r7, #112]	@ 0x70
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	785b      	ldrb	r3, [r3, #1]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d16b      	bne.n	8009dc0 <USB_EPStartXfer+0x7d0>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009cf8:	4413      	add	r3, r2
 8009cfa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	00da      	lsls	r2, r3, #3
 8009d02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d04:	4413      	add	r3, r2
 8009d06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009d0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8009d0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d0e:	881b      	ldrh	r3, [r3, #0]
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d1a:	801a      	strh	r2, [r3, #0]
 8009d1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10a      	bne.n	8009d3a <USB_EPStartXfer+0x74a>
 8009d24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d26:	881b      	ldrh	r3, [r3, #0]
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d36:	801a      	strh	r2, [r3, #0]
 8009d38:	e05b      	b.n	8009df2 <USB_EPStartXfer+0x802>
 8009d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d40:	d81c      	bhi.n	8009d7c <USB_EPStartXfer+0x78c>
 8009d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d46:	085b      	lsrs	r3, r3, #1
 8009d48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d50:	f003 0301 	and.w	r3, r3, #1
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d004      	beq.n	8009d62 <USB_EPStartXfer+0x772>
 8009d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d64:	881b      	ldrh	r3, [r3, #0]
 8009d66:	b29a      	uxth	r2, r3
 8009d68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	029b      	lsls	r3, r3, #10
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	4313      	orrs	r3, r2
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d78:	801a      	strh	r2, [r3, #0]
 8009d7a:	e03a      	b.n	8009df2 <USB_EPStartXfer+0x802>
 8009d7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d80:	095b      	lsrs	r3, r3, #5
 8009d82:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d8a:	f003 031f 	and.w	r3, r3, #31
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d104      	bne.n	8009d9c <USB_EPStartXfer+0x7ac>
 8009d92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d96:	3b01      	subs	r3, #1
 8009d98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d9e:	881b      	ldrh	r3, [r3, #0]
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	029b      	lsls	r3, r3, #10
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	4313      	orrs	r3, r2
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009dbc:	801a      	strh	r2, [r3, #0]
 8009dbe:	e018      	b.n	8009df2 <USB_EPStartXfer+0x802>
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	785b      	ldrb	r3, [r3, #1]
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d114      	bne.n	8009df2 <USB_EPStartXfer+0x802>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009dd4:	4413      	add	r3, r2
 8009dd6:	673b      	str	r3, [r7, #112]	@ 0x70
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	00da      	lsls	r2, r3, #3
 8009dde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009de0:	4413      	add	r3, r2
 8009de2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009de6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009de8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009df0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	895b      	ldrh	r3, [r3, #10]
 8009df6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	6959      	ldr	r1, [r3, #20]
 8009dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 f9c4 	bl	800a196 <USB_WritePMA>
 8009e0e:	e09e      	b.n	8009f4e <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	785b      	ldrb	r3, [r3, #1]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d16b      	bne.n	8009ef0 <USB_EPStartXfer+0x900>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	461a      	mov	r2, r3
 8009e26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009e28:	4413      	add	r3, r2
 8009e2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	00da      	lsls	r2, r3, #3
 8009e32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009e34:	4413      	add	r3, r2
 8009e36:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009e3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e3e:	881b      	ldrh	r3, [r3, #0]
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e46:	b29a      	uxth	r2, r3
 8009e48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e4a:	801a      	strh	r2, [r3, #0]
 8009e4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d10a      	bne.n	8009e6a <USB_EPStartXfer+0x87a>
 8009e54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e56:	881b      	ldrh	r3, [r3, #0]
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e66:	801a      	strh	r2, [r3, #0]
 8009e68:	e063      	b.n	8009f32 <USB_EPStartXfer+0x942>
 8009e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e6e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009e70:	d81c      	bhi.n	8009eac <USB_EPStartXfer+0x8bc>
 8009e72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e76:	085b      	lsrs	r3, r3, #1
 8009e78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e80:	f003 0301 	and.w	r3, r3, #1
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d004      	beq.n	8009e92 <USB_EPStartXfer+0x8a2>
 8009e88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e94:	881b      	ldrh	r3, [r3, #0]
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	029b      	lsls	r3, r3, #10
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	b29a      	uxth	r2, r3
 8009ea6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ea8:	801a      	strh	r2, [r3, #0]
 8009eaa:	e042      	b.n	8009f32 <USB_EPStartXfer+0x942>
 8009eac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009eb0:	095b      	lsrs	r3, r3, #5
 8009eb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009eba:	f003 031f 	and.w	r3, r3, #31
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d104      	bne.n	8009ecc <USB_EPStartXfer+0x8dc>
 8009ec2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ecc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ece:	881b      	ldrh	r3, [r3, #0]
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	029b      	lsls	r3, r3, #10
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	4313      	orrs	r3, r2
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009eec:	801a      	strh	r2, [r3, #0]
 8009eee:	e020      	b.n	8009f32 <USB_EPStartXfer+0x942>
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	785b      	ldrb	r3, [r3, #1]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d11c      	bne.n	8009f32 <USB_EPStartXfer+0x942>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	461a      	mov	r2, r3
 8009f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f0c:	4413      	add	r3, r2
 8009f0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	00da      	lsls	r2, r3, #3
 8009f18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f1c:	4413      	add	r3, r2
 8009f1e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009f22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009f30:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	891b      	ldrh	r3, [r3, #8]
 8009f36:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	6959      	ldr	r1, [r3, #20]
 8009f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f924 	bl	800a196 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	4413      	add	r3, r2
 8009f58:	881b      	ldrh	r3, [r3, #0]
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f64:	817b      	strh	r3, [r7, #10]
 8009f66:	897b      	ldrh	r3, [r7, #10]
 8009f68:	f083 0310 	eor.w	r3, r3, #16
 8009f6c:	817b      	strh	r3, [r7, #10]
 8009f6e:	897b      	ldrh	r3, [r7, #10]
 8009f70:	f083 0320 	eor.w	r3, r3, #32
 8009f74:	817b      	strh	r3, [r7, #10]
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	441a      	add	r2, r3
 8009f80:	897b      	ldrh	r3, [r7, #10]
 8009f82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	8013      	strh	r3, [r2, #0]
 8009f96:	e0d5      	b.n	800a144 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	7b1b      	ldrb	r3, [r3, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d156      	bne.n	800a04e <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	699b      	ldr	r3, [r3, #24]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d122      	bne.n	8009fee <USB_EPStartXfer+0x9fe>
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	78db      	ldrb	r3, [r3, #3]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d11e      	bne.n	8009fee <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	881b      	ldrh	r3, [r3, #0]
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fc6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	441a      	add	r2, r3
 8009fd4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009fd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fe0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009fe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	8013      	strh	r3, [r2, #0]
 8009fec:	e01d      	b.n	800a02a <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	4413      	add	r3, r2
 8009ff8:	881b      	ldrh	r3, [r3, #0]
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a000:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a004:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	441a      	add	r2, r3
 800a012:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800a016:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a01a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a01e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a026:	b29b      	uxth	r3, r3
 800a028:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	699a      	ldr	r2, [r3, #24]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	429a      	cmp	r2, r3
 800a034:	d907      	bls.n	800a046 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	699a      	ldr	r2, [r3, #24]
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	1ad2      	subs	r2, r2, r3
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	619a      	str	r2, [r3, #24]
 800a044:	e054      	b.n	800a0f0 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	2200      	movs	r2, #0
 800a04a:	619a      	str	r2, [r3, #24]
 800a04c:	e050      	b.n	800a0f0 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	78db      	ldrb	r3, [r3, #3]
 800a052:	2b02      	cmp	r3, #2
 800a054:	d142      	bne.n	800a0dc <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	69db      	ldr	r3, [r3, #28]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d048      	beq.n	800a0f0 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4413      	add	r3, r2
 800a068:	881b      	ldrh	r3, [r3, #0]
 800a06a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a06e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a076:	2b00      	cmp	r3, #0
 800a078:	d005      	beq.n	800a086 <USB_EPStartXfer+0xa96>
 800a07a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a07e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a082:	2b00      	cmp	r3, #0
 800a084:	d10b      	bne.n	800a09e <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a086:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a08a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d12e      	bne.n	800a0f0 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a092:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d128      	bne.n	800a0f0 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4413      	add	r3, r2
 800a0a8:	881b      	ldrh	r3, [r3, #0]
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0b4:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	441a      	add	r2, r3
 800a0c2:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800a0c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	8013      	strh	r3, [r2, #0]
 800a0da:	e009      	b.n	800a0f0 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	78db      	ldrb	r3, [r3, #3]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d103      	bne.n	800a0ec <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	619a      	str	r2, [r3, #24]
 800a0ea:	e001      	b.n	800a0f0 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e02a      	b.n	800a146 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	4413      	add	r3, r2
 800a0fa:	881b      	ldrh	r3, [r3, #0]
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a106:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a10a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a10e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a112:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a116:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a11a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a11e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	441a      	add	r2, r3
 800a12c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a130:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a134:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a13c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a140:	b29b      	uxth	r3, r3
 800a142:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	37b0      	adds	r7, #176	@ 0xb0
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a14e:	b480      	push	{r7}
 800a150:	b083      	sub	sp, #12
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
 800a156:	460b      	mov	r3, r1
 800a158:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a15a:	78fb      	ldrb	r3, [r7, #3]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d103      	bne.n	800a168 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2280      	movs	r2, #128	@ 0x80
 800a164:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr

0800a176 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a176:	b480      	push	{r7}
 800a178:	b085      	sub	sp, #20
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a184:	b29b      	uxth	r3, r3
 800a186:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a188:	68fb      	ldr	r3, [r7, #12]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3714      	adds	r7, #20
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr

0800a196 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a196:	b480      	push	{r7}
 800a198:	b08b      	sub	sp, #44	@ 0x2c
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	60f8      	str	r0, [r7, #12]
 800a19e:	60b9      	str	r1, [r7, #8]
 800a1a0:	4611      	mov	r1, r2
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	80fb      	strh	r3, [r7, #6]
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a1ac:	88bb      	ldrh	r3, [r7, #4]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	085b      	lsrs	r3, r3, #1
 800a1b2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a1bc:	88fa      	ldrh	r2, [r7, #6]
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a1c6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1cc:	e01b      	b.n	800a206 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	021b      	lsls	r3, r3, #8
 800a1dc:	b21a      	sxth	r2, r3
 800a1de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	b21b      	sxth	r3, r3
 800a1e6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	8a7a      	ldrh	r2, [r7, #18]
 800a1ec:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a1ee:	6a3b      	ldr	r3, [r7, #32]
 800a1f0:	3302      	adds	r3, #2
 800a1f2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a202:	3b01      	subs	r3, #1
 800a204:	627b      	str	r3, [r7, #36]	@ 0x24
 800a206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d1e0      	bne.n	800a1ce <USB_WritePMA+0x38>
  }
}
 800a20c:	bf00      	nop
 800a20e:	bf00      	nop
 800a210:	372c      	adds	r7, #44	@ 0x2c
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a21a:	b480      	push	{r7}
 800a21c:	b08b      	sub	sp, #44	@ 0x2c
 800a21e:	af00      	add	r7, sp, #0
 800a220:	60f8      	str	r0, [r7, #12]
 800a222:	60b9      	str	r1, [r7, #8]
 800a224:	4611      	mov	r1, r2
 800a226:	461a      	mov	r2, r3
 800a228:	460b      	mov	r3, r1
 800a22a:	80fb      	strh	r3, [r7, #6]
 800a22c:	4613      	mov	r3, r2
 800a22e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a230:	88bb      	ldrh	r3, [r7, #4]
 800a232:	085b      	lsrs	r3, r3, #1
 800a234:	b29b      	uxth	r3, r3
 800a236:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a240:	88fa      	ldrh	r2, [r7, #6]
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	4413      	add	r3, r2
 800a246:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a24a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a250:	e018      	b.n	800a284 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a252:	6a3b      	ldr	r3, [r7, #32]
 800a254:	881b      	ldrh	r3, [r3, #0]
 800a256:	b29b      	uxth	r3, r3
 800a258:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a25a:	6a3b      	ldr	r3, [r7, #32]
 800a25c:	3302      	adds	r3, #2
 800a25e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	b2da      	uxtb	r2, r3
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	3301      	adds	r3, #1
 800a26c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	0a1b      	lsrs	r3, r3, #8
 800a272:	b2da      	uxtb	r2, r3
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	3301      	adds	r3, #1
 800a27c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a280:	3b01      	subs	r3, #1
 800a282:	627b      	str	r3, [r7, #36]	@ 0x24
 800a284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1e3      	bne.n	800a252 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a28a:	88bb      	ldrh	r3, [r7, #4]
 800a28c:	f003 0301 	and.w	r3, r3, #1
 800a290:	b29b      	uxth	r3, r3
 800a292:	2b00      	cmp	r3, #0
 800a294:	d007      	beq.n	800a2a6 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a296:	6a3b      	ldr	r3, [r7, #32]
 800a298:	881b      	ldrh	r3, [r3, #0]
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	b2da      	uxtb	r2, r3
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	701a      	strb	r2, [r3, #0]
  }
}
 800a2a6:	bf00      	nop
 800a2a8:	372c      	adds	r7, #44	@ 0x2c
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <memset>:
 800a2b2:	4402      	add	r2, r0
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d100      	bne.n	800a2bc <memset+0xa>
 800a2ba:	4770      	bx	lr
 800a2bc:	f803 1b01 	strb.w	r1, [r3], #1
 800a2c0:	e7f9      	b.n	800a2b6 <memset+0x4>
	...

0800a2c4 <__libc_init_array>:
 800a2c4:	b570      	push	{r4, r5, r6, lr}
 800a2c6:	4d0d      	ldr	r5, [pc, #52]	@ (800a2fc <__libc_init_array+0x38>)
 800a2c8:	4c0d      	ldr	r4, [pc, #52]	@ (800a300 <__libc_init_array+0x3c>)
 800a2ca:	1b64      	subs	r4, r4, r5
 800a2cc:	10a4      	asrs	r4, r4, #2
 800a2ce:	2600      	movs	r6, #0
 800a2d0:	42a6      	cmp	r6, r4
 800a2d2:	d109      	bne.n	800a2e8 <__libc_init_array+0x24>
 800a2d4:	4d0b      	ldr	r5, [pc, #44]	@ (800a304 <__libc_init_array+0x40>)
 800a2d6:	4c0c      	ldr	r4, [pc, #48]	@ (800a308 <__libc_init_array+0x44>)
 800a2d8:	f000 f818 	bl	800a30c <_init>
 800a2dc:	1b64      	subs	r4, r4, r5
 800a2de:	10a4      	asrs	r4, r4, #2
 800a2e0:	2600      	movs	r6, #0
 800a2e2:	42a6      	cmp	r6, r4
 800a2e4:	d105      	bne.n	800a2f2 <__libc_init_array+0x2e>
 800a2e6:	bd70      	pop	{r4, r5, r6, pc}
 800a2e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2ec:	4798      	blx	r3
 800a2ee:	3601      	adds	r6, #1
 800a2f0:	e7ee      	b.n	800a2d0 <__libc_init_array+0xc>
 800a2f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2f6:	4798      	blx	r3
 800a2f8:	3601      	adds	r6, #1
 800a2fa:	e7f2      	b.n	800a2e2 <__libc_init_array+0x1e>
 800a2fc:	0800a36c 	.word	0x0800a36c
 800a300:	0800a36c 	.word	0x0800a36c
 800a304:	0800a36c 	.word	0x0800a36c
 800a308:	0800a370 	.word	0x0800a370

0800a30c <_init>:
 800a30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30e:	bf00      	nop
 800a310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a312:	bc08      	pop	{r3}
 800a314:	469e      	mov	lr, r3
 800a316:	4770      	bx	lr

0800a318 <_fini>:
 800a318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31a:	bf00      	nop
 800a31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a31e:	bc08      	pop	{r3}
 800a320:	469e      	mov	lr, r3
 800a322:	4770      	bx	lr
